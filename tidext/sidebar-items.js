window.SIDEBAR_ITEMS = {"derive":[["Decode","Derive `parity_scale_codec::Decode` and for struct and enum."],["Encode","Derive `parity_scale_codec::Encode` and `parity_scale_codec::EncodeLike` for struct and enum."]],"enum":[["AssetsCall",""],["BalancesCall",""],["Error",""],["MultiAddress","A multi-format address wrapper for on-chain accounts."],["OracleCall",""],["QuorumCall",""],["RewardDestination","A destination account for payment"],["StakingCall",""],["SubstrateSubxtError","The underlying error enum, generic over the type held by the `Runtime` variant. Prefer to use the [`Error<E>`] and [`Error`] aliases over using this type directly."],["TidechainCall",""],["TidefiCall",""],["TidefiRuntime",""]],"fn":[["get_signer_from_stronghold","Try to get signer details for an existing stronghold instance at the specific location"],["init_ephemeral_stronghold","Initialize the ephemeral stronghold client with a seed."],["init_stronghold_from_path","Initialize a new stronghold instance from the provided snapshot path and passphrase"],["init_stronghold_from_seed","Initialize a new stronghold instance from the `sr25519` mnemonic or raw seed"]],"macro":[["__with_tidext_runtime",""],["latest_block","Get latest Tidechain block"],["make_rpc_call","Make RPC call to Tidechain"]],"mod":[["lagoon",""],["lagoon6030",""],["lagoon6040",""],["lagoon7000",""],["test_utils","Test utils"],["tidechain",""],["tidechain6030",""],["tidechain6040",""],["tidechain7000",""]],"struct":[["Client","Tidechain client"],["ClientBuilder","Tidechain [`Client`] builder"],["Lagoon6030Runtime",""],["Lagoon6040Runtime",""],["Lagoon7000Runtime",""],["NodeHealth","Health status of the node the client is currently connected"],["Permill","A fixed point representation of a number in the range [0, 1]."],["StrongholdSigner","Stronghold signer instance."],["Tidechain6030Runtime",""],["Tidechain6040Runtime",""],["Tidechain7000Runtime",""],["TidechainConfig","Custom [`Config`] implementation with Clone"],["TidextKeyring","Tidefi keyring backed with a stronghold pair signer."]],"trait":[["Decode","Trait that allows zero-copy read of value-references from slices in LE format."],["Encode","Trait that allows zero-copy write of value-references to slices in LE format."],["OracleExt","An extension trait for `Client` that provides a variety of convenient Oracle functions."],["QuorumExt","An extension trait for `Client` that provides a variety of convenient Quorum functions."],["Signer","Signing transactions requires a [`Signer`]. This is responsible for providing the “from” account that the transaction is being signed by, as well as actually signing a SCALE encoded payload."]],"type":[["KeyPair","Tidechain key-pair representation."],["TidefiKeyring","Tidefi keyring"],["TidefiPairSigner","Stronghold pair signer."]]};
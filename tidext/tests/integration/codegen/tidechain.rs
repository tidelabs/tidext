#[allow(dead_code, unused_imports, non_camel_case_types)]
pub mod api {
  use super::api as root_mod;
  pub static PALLETS: [&str; 38usize] = [
    "System",
    "Babe",
    "Timestamp",
    "Indices",
    "Balances",
    "TransactionPayment",
    "Authorship",
    "Staking",
    "Offences",
    "Historical",
    "Session",
    "Grandpa",
    "ImOnline",
    "AuthorityDiscovery",
    "Council",
    "TechnicalCommittee",
    "Elections",
    "TechnicalMembership",
    "Treasury",
    "Utility",
    "Identity",
    "ElectionProviderMultiPhase",
    "Recovery",
    "Scheduler",
    "Proxy",
    "Multisig",
    "Bounties",
    "Assets",
    "BagsList",
    "Preimage",
    "Sudo",
    "Tidefi",
    "TidefiStaking",
    "Quorum",
    "Oracle",
    "Security",
    "Fees",
    "AssetRegistry",
  ];
  #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
  pub enum Event {
    #[codec(index = 0)]
    System(system::Event),
    #[codec(index = 3)]
    Indices(indices::Event),
    #[codec(index = 4)]
    Balances(balances::Event),
    #[codec(index = 7)]
    Staking(staking::Event),
    #[codec(index = 8)]
    Offences(offences::Event),
    #[codec(index = 10)]
    Session(session::Event),
    #[codec(index = 11)]
    Grandpa(grandpa::Event),
    #[codec(index = 12)]
    ImOnline(im_online::Event),
    #[codec(index = 14)]
    Council(council::Event),
    #[codec(index = 15)]
    TechnicalCommittee(technical_committee::Event),
    #[codec(index = 16)]
    Elections(elections::Event),
    #[codec(index = 17)]
    TechnicalMembership(technical_membership::Event),
    #[codec(index = 18)]
    Treasury(treasury::Event),
    #[codec(index = 19)]
    Utility(utility::Event),
    #[codec(index = 20)]
    Identity(identity::Event),
    #[codec(index = 21)]
    ElectionProviderMultiPhase(election_provider_multi_phase::Event),
    #[codec(index = 22)]
    Recovery(recovery::Event),
    #[codec(index = 23)]
    Scheduler(scheduler::Event),
    #[codec(index = 24)]
    Proxy(proxy::Event),
    #[codec(index = 25)]
    Multisig(multisig::Event),
    #[codec(index = 26)]
    Bounties(bounties::Event),
    #[codec(index = 27)]
    Assets(assets::Event),
    #[codec(index = 28)]
    BagsList(bags_list::Event),
    #[codec(index = 29)]
    Preimage(preimage::Event),
    #[codec(index = 30)]
    Sudo(sudo::Event),
    #[codec(index = 50)]
    Tidefi(tidefi::Event),
    #[codec(index = 51)]
    TidefiStaking(tidefi_staking::Event),
    #[codec(index = 52)]
    Quorum(quorum::Event),
    #[codec(index = 53)]
    Oracle(oracle::Event),
    #[codec(index = 54)]
    Security(security::Event),
    #[codec(index = 55)]
    Fees(fees::Event),
    #[codec(index = 56)]
    AssetRegistry(asset_registry::Event),
  }
  pub mod system {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct FillBlock {
        pub ratio: runtime_types::sp_arithmetic::per_things::Perbill,
      }
      impl ::subxt::Call for FillBlock {
        const PALLET: &'static str = "System";
        const FUNCTION: &'static str = "fill_block";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Remark {
        pub remark: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Call for Remark {
        const PALLET: &'static str = "System";
        const FUNCTION: &'static str = "remark";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      pub struct SetHeapPages {
        pub pages: ::core::primitive::u64,
      }
      impl ::subxt::Call for SetHeapPages {
        const PALLET: &'static str = "System";
        const FUNCTION: &'static str = "set_heap_pages";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetCode {
        pub code: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Call for SetCode {
        const PALLET: &'static str = "System";
        const FUNCTION: &'static str = "set_code";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetCodeWithoutChecks {
        pub code: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Call for SetCodeWithoutChecks {
        const PALLET: &'static str = "System";
        const FUNCTION: &'static str = "set_code_without_checks";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetStorage {
        pub items: ::std::vec::Vec<(
          ::std::vec::Vec<::core::primitive::u8>,
          ::std::vec::Vec<::core::primitive::u8>,
        )>,
      }
      impl ::subxt::Call for SetStorage {
        const PALLET: &'static str = "System";
        const FUNCTION: &'static str = "set_storage";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct KillStorage {
        pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
      }
      impl ::subxt::Call for KillStorage {
        const PALLET: &'static str = "System";
        const FUNCTION: &'static str = "kill_storage";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct KillPrefix {
        pub prefix: ::std::vec::Vec<::core::primitive::u8>,
        pub subkeys: ::core::primitive::u32,
      }
      impl ::subxt::Call for KillPrefix {
        const PALLET: &'static str = "System";
        const FUNCTION: &'static str = "kill_prefix";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RemarkWithEvent {
        pub remark: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Call for RemarkWithEvent {
        const PALLET: &'static str = "System";
        const FUNCTION: &'static str = "remark_with_event";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "A dispatch that will fill the block weight up to the given ratio."]
        pub fn fill_block(
          &self,
          ratio: runtime_types::sp_arithmetic::per_things::Perbill,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, FillBlock, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<FillBlock>()?
          };
          if runtime_call_hash
            == [
              228u8, 117u8, 251u8, 95u8, 47u8, 56u8, 32u8, 177u8, 191u8, 72u8, 75u8, 23u8, 193u8,
              175u8, 227u8, 218u8, 127u8, 94u8, 114u8, 110u8, 215u8, 61u8, 162u8, 102u8, 73u8,
              89u8, 218u8, 148u8, 59u8, 73u8, 59u8, 149u8,
            ]
          {
            let call = FillBlock { ratio };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Make some on-chain remark."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(1)`"]
        #[doc = "# </weight>"]
        pub fn remark(
          &self,
          remark: ::std::vec::Vec<::core::primitive::u8>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Remark, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Remark>()?
          };
          if runtime_call_hash
            == [
              186u8, 79u8, 33u8, 199u8, 216u8, 115u8, 19u8, 146u8, 220u8, 174u8, 98u8, 61u8, 179u8,
              230u8, 40u8, 70u8, 22u8, 251u8, 77u8, 62u8, 133u8, 80u8, 186u8, 70u8, 135u8, 172u8,
              178u8, 241u8, 69u8, 106u8, 235u8, 140u8,
            ]
          {
            let call = Remark { remark };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set the number of pages in the WebAssembly environment's heap."]
        pub fn set_heap_pages(
          &self,
          pages: ::core::primitive::u64,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetHeapPages, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetHeapPages>()?
          };
          if runtime_call_hash
            == [
              77u8, 138u8, 122u8, 55u8, 179u8, 101u8, 60u8, 137u8, 173u8, 39u8, 28u8, 36u8, 237u8,
              243u8, 232u8, 162u8, 76u8, 176u8, 135u8, 58u8, 60u8, 177u8, 105u8, 136u8, 94u8, 53u8,
              26u8, 31u8, 41u8, 156u8, 228u8, 241u8,
            ]
          {
            let call = SetHeapPages { pages };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set the new runtime code."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
        #[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
        #[doc = "  expensive)."]
        #[doc = "- 1 storage write (codec `O(C)`)."]
        #[doc = "- 1 digest item."]
        #[doc = "- 1 event."]
        #[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
        #[doc = "expensive. We will treat this as a full block."]
        #[doc = "# </weight>"]
        pub fn set_code(
          &self,
          code: ::std::vec::Vec<::core::primitive::u8>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetCode, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetCode>()?
          };
          if runtime_call_hash
            == [
              35u8, 75u8, 103u8, 203u8, 91u8, 141u8, 77u8, 95u8, 37u8, 157u8, 107u8, 240u8, 54u8,
              242u8, 245u8, 205u8, 104u8, 165u8, 177u8, 37u8, 86u8, 197u8, 28u8, 202u8, 121u8,
              159u8, 18u8, 204u8, 237u8, 117u8, 141u8, 131u8,
            ]
          {
            let call = SetCode { code };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set the new runtime code without doing any checks of the given `code`."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(C)` where `C` length of `code`"]
        #[doc = "- 1 storage write (codec `O(C)`)."]
        #[doc = "- 1 digest item."]
        #[doc = "- 1 event."]
        #[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
        #[doc = "block. # </weight>"]
        pub fn set_code_without_checks(
          &self,
          code: ::std::vec::Vec<::core::primitive::u8>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            SetCodeWithoutChecks,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetCodeWithoutChecks>()?
          };
          if runtime_call_hash
            == [
              150u8, 148u8, 119u8, 129u8, 77u8, 216u8, 135u8, 187u8, 127u8, 24u8, 238u8, 15u8,
              227u8, 229u8, 191u8, 217u8, 106u8, 129u8, 149u8, 79u8, 154u8, 78u8, 53u8, 159u8,
              89u8, 69u8, 103u8, 197u8, 93u8, 161u8, 134u8, 17u8,
            ]
          {
            let call = SetCodeWithoutChecks { code };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set some items of storage."]
        pub fn set_storage(
          &self,
          items: ::std::vec::Vec<(
            ::std::vec::Vec<::core::primitive::u8>,
            ::std::vec::Vec<::core::primitive::u8>,
          )>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetStorage, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetStorage>()?
          };
          if runtime_call_hash
            == [
              197u8, 12u8, 119u8, 205u8, 152u8, 103u8, 211u8, 170u8, 146u8, 253u8, 25u8, 56u8,
              180u8, 146u8, 74u8, 75u8, 38u8, 108u8, 212u8, 154u8, 23u8, 22u8, 148u8, 175u8, 107u8,
              186u8, 222u8, 13u8, 149u8, 132u8, 204u8, 217u8,
            ]
          {
            let call = SetStorage { items };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Kill some items from storage."]
        pub fn kill_storage(
          &self,
          keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, KillStorage, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<KillStorage>()?
          };
          if runtime_call_hash
            == [
              154u8, 115u8, 185u8, 20u8, 126u8, 90u8, 222u8, 131u8, 199u8, 57u8, 184u8, 226u8,
              43u8, 245u8, 161u8, 176u8, 194u8, 123u8, 139u8, 97u8, 97u8, 94u8, 47u8, 64u8, 204u8,
              96u8, 190u8, 94u8, 216u8, 237u8, 69u8, 51u8,
            ]
          {
            let call = KillStorage { keys };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Kill all storage items with a key that starts with the given prefix."]
        #[doc = ""]
        #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
        #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
        pub fn kill_prefix(
          &self,
          prefix: ::std::vec::Vec<::core::primitive::u8>,
          subkeys: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, KillPrefix, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<KillPrefix>()?
          };
          if runtime_call_hash
            == [
              214u8, 101u8, 191u8, 241u8, 1u8, 241u8, 144u8, 116u8, 246u8, 199u8, 159u8, 249u8,
              155u8, 164u8, 220u8, 221u8, 75u8, 33u8, 204u8, 3u8, 255u8, 201u8, 187u8, 238u8,
              181u8, 213u8, 41u8, 105u8, 234u8, 120u8, 202u8, 115u8,
            ]
          {
            let call = KillPrefix { prefix, subkeys };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Make some on-chain remark and emit event."]
        pub fn remark_with_event(
          &self,
          remark: ::std::vec::Vec<::core::primitive::u8>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RemarkWithEvent, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RemarkWithEvent>()?
          };
          if runtime_call_hash
            == [
              171u8, 82u8, 75u8, 237u8, 69u8, 197u8, 223u8, 125u8, 123u8, 51u8, 241u8, 35u8, 202u8,
              210u8, 227u8, 109u8, 1u8, 241u8, 255u8, 63u8, 33u8, 115u8, 156u8, 239u8, 97u8, 76u8,
              193u8, 35u8, 74u8, 199u8, 43u8, 255u8,
            ]
          {
            let call = RemarkWithEvent { remark };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::frame_system::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An extrinsic completed successfully."]
      pub struct ExtrinsicSuccess {
        pub dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
      }
      impl ::subxt::Event for ExtrinsicSuccess {
        const PALLET: &'static str = "System";
        const EVENT: &'static str = "ExtrinsicSuccess";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An extrinsic failed."]
      pub struct ExtrinsicFailed {
        pub dispatch_error: runtime_types::sp_runtime::DispatchError,
        pub dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
      }
      impl ::subxt::Event for ExtrinsicFailed {
        const PALLET: &'static str = "System";
        const EVENT: &'static str = "ExtrinsicFailed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "`:code` was updated."]
      pub struct CodeUpdated;
      impl ::subxt::Event for CodeUpdated {
        const PALLET: &'static str = "System";
        const EVENT: &'static str = "CodeUpdated";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A new account was created."]
      pub struct NewAccount {
        pub account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for NewAccount {
        const PALLET: &'static str = "System";
        const EVENT: &'static str = "NewAccount";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An account was reaped."]
      pub struct KilledAccount {
        pub account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for KilledAccount {
        const PALLET: &'static str = "System";
        const EVENT: &'static str = "KilledAccount";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "On on-chain remark happened."]
      pub struct Remarked {
        pub sender: ::subxt::sp_core::crypto::AccountId32,
        pub hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for Remarked {
        const PALLET: &'static str = "System";
        const EVENT: &'static str = "Remarked";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Account<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Account<'_> {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "Account";
        type Value = runtime_types::frame_system::AccountInfo<
          ::core::primitive::u32,
          runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct ExtrinsicCount;
      impl ::subxt::StorageEntry for ExtrinsicCount {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "ExtrinsicCount";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct BlockWeight;
      impl ::subxt::StorageEntry for BlockWeight {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "BlockWeight";
        type Value =
          runtime_types::frame_support::weights::PerDispatchClass<::core::primitive::u64>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct AllExtrinsicsLen;
      impl ::subxt::StorageEntry for AllExtrinsicsLen {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "AllExtrinsicsLen";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct BlockHash<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for BlockHash<'_> {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "BlockHash";
        type Value = ::subxt::sp_core::H256;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct ExtrinsicData<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for ExtrinsicData<'_> {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "ExtrinsicData";
        type Value = ::std::vec::Vec<::core::primitive::u8>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct Number;
      impl ::subxt::StorageEntry for Number {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "Number";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ParentHash;
      impl ::subxt::StorageEntry for ParentHash {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "ParentHash";
        type Value = ::subxt::sp_core::H256;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Digest;
      impl ::subxt::StorageEntry for Digest {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "Digest";
        type Value = runtime_types::sp_runtime::generic::digest::Digest;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Events;
      impl ::subxt::StorageEntry for Events {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "Events";
        type Value = ::std::vec::Vec<
          runtime_types::frame_system::EventRecord<
            runtime_types::lagoon_runtime::Event,
            ::subxt::sp_core::H256,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct EventCount;
      impl ::subxt::StorageEntry for EventCount {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "EventCount";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct EventTopics<'a>(pub &'a ::subxt::sp_core::H256);
      impl ::subxt::StorageEntry for EventTopics<'_> {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "EventTopics";
        type Value = ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct LastRuntimeUpgrade;
      impl ::subxt::StorageEntry for LastRuntimeUpgrade {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "LastRuntimeUpgrade";
        type Value = runtime_types::frame_system::LastRuntimeUpgradeInfo;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct UpgradedToU32RefCount;
      impl ::subxt::StorageEntry for UpgradedToU32RefCount {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "UpgradedToU32RefCount";
        type Value = ::core::primitive::bool;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct UpgradedToTripleRefCount;
      impl ::subxt::StorageEntry for UpgradedToTripleRefCount {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "UpgradedToTripleRefCount";
        type Value = ::core::primitive::bool;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ExecutionPhase;
      impl ::subxt::StorageEntry for ExecutionPhase {
        const PALLET: &'static str = "System";
        const STORAGE: &'static str = "ExecutionPhase";
        type Value = runtime_types::frame_system::Phase;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The full account information for a particular account ID."]
        pub async fn account(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_system::AccountInfo<
            ::core::primitive::u32,
            runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Account>()?
          };
          if runtime_storage_hash
            == [
              224u8, 184u8, 2u8, 14u8, 38u8, 177u8, 223u8, 98u8, 223u8, 15u8, 130u8, 23u8, 212u8,
              69u8, 61u8, 165u8, 171u8, 61u8, 171u8, 57u8, 88u8, 71u8, 168u8, 172u8, 54u8, 91u8,
              109u8, 231u8, 169u8, 167u8, 195u8, 46u8,
            ]
          {
            let entry = Account(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The full account information for a particular account ID."]
        pub async fn account_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Account<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Account>()?
          };
          if runtime_storage_hash
            == [
              224u8, 184u8, 2u8, 14u8, 38u8, 177u8, 223u8, 98u8, 223u8, 15u8, 130u8, 23u8, 212u8,
              69u8, 61u8, 165u8, 171u8, 61u8, 171u8, 57u8, 88u8, 71u8, 168u8, 172u8, 54u8, 91u8,
              109u8, 231u8, 169u8, 167u8, 195u8, 46u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Total extrinsics count for the current block."]
        pub async fn extrinsic_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ExtrinsicCount>()?
          };
          if runtime_storage_hash
            == [
              223u8, 60u8, 201u8, 120u8, 36u8, 44u8, 180u8, 210u8, 242u8, 53u8, 222u8, 154u8,
              123u8, 176u8, 249u8, 8u8, 225u8, 28u8, 232u8, 4u8, 136u8, 41u8, 151u8, 82u8, 189u8,
              149u8, 49u8, 166u8, 139u8, 9u8, 163u8, 231u8,
            ]
          {
            let entry = ExtrinsicCount;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The current weight for the block."]
        pub async fn block_weight(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::weights::PerDispatchClass<::core::primitive::u64>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<BlockWeight>()?
          };
          if runtime_storage_hash
            == [
              2u8, 236u8, 190u8, 174u8, 244u8, 98u8, 194u8, 168u8, 89u8, 208u8, 7u8, 45u8, 175u8,
              171u8, 177u8, 121u8, 215u8, 190u8, 184u8, 195u8, 49u8, 133u8, 44u8, 1u8, 181u8,
              215u8, 89u8, 84u8, 255u8, 16u8, 57u8, 152u8,
            ]
          {
            let entry = BlockWeight;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
        pub async fn all_extrinsics_len(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AllExtrinsicsLen>()?
          };
          if runtime_storage_hash
            == [
              202u8, 145u8, 209u8, 225u8, 40u8, 220u8, 174u8, 74u8, 93u8, 164u8, 254u8, 248u8,
              254u8, 192u8, 32u8, 117u8, 96u8, 149u8, 53u8, 145u8, 219u8, 64u8, 234u8, 18u8, 217u8,
              200u8, 203u8, 141u8, 145u8, 28u8, 134u8, 60u8,
            ]
          {
            let entry = AllExtrinsicsLen;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Map of block numbers to block hashes."]
        pub async fn block_hash(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::sp_core::H256, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<BlockHash>()?
          };
          if runtime_storage_hash
            == [
              24u8, 99u8, 146u8, 142u8, 205u8, 166u8, 4u8, 32u8, 218u8, 213u8, 24u8, 236u8, 45u8,
              116u8, 145u8, 204u8, 27u8, 141u8, 169u8, 249u8, 111u8, 141u8, 37u8, 136u8, 45u8,
              73u8, 167u8, 217u8, 118u8, 206u8, 246u8, 120u8,
            ]
          {
            let entry = BlockHash(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Map of block numbers to block hashes."]
        pub async fn block_hash_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, BlockHash<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<BlockHash>()?
          };
          if runtime_storage_hash
            == [
              24u8, 99u8, 146u8, 142u8, 205u8, 166u8, 4u8, 32u8, 218u8, 213u8, 24u8, 236u8, 45u8,
              116u8, 145u8, 204u8, 27u8, 141u8, 169u8, 249u8, 111u8, 141u8, 37u8, 136u8, 45u8,
              73u8, 167u8, 217u8, 118u8, 206u8, 246u8, 120u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
        pub async fn extrinsic_data(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::std::vec::Vec<::core::primitive::u8>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ExtrinsicData>()?
          };
          if runtime_storage_hash
            == [
              210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8, 211u8, 254u8, 73u8,
              67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8, 23u8, 241u8, 59u8, 49u8, 86u8, 126u8,
              9u8, 114u8, 163u8, 160u8, 62u8, 50u8, 67u8,
            ]
          {
            let entry = ExtrinsicData(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
        pub async fn extrinsic_data_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, ExtrinsicData<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ExtrinsicData>()?
          };
          if runtime_storage_hash
            == [
              210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8, 211u8, 254u8, 73u8,
              67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8, 23u8, 241u8, 59u8, 49u8, 86u8, 126u8,
              9u8, 114u8, 163u8, 160u8, 62u8, 50u8, 67u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The current block number being processed. Set by `execute_block`."]
        pub async fn number(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Number>()?
          };
          if runtime_storage_hash
            == [
              228u8, 96u8, 102u8, 190u8, 252u8, 130u8, 239u8, 172u8, 126u8, 235u8, 246u8, 139u8,
              208u8, 15u8, 88u8, 245u8, 141u8, 232u8, 43u8, 204u8, 36u8, 87u8, 211u8, 141u8, 187u8,
              68u8, 236u8, 70u8, 193u8, 235u8, 164u8, 191u8,
            ]
          {
            let entry = Number;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Hash of the previous block."]
        pub async fn parent_hash(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::sp_core::H256, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ParentHash>()?
          };
          if runtime_storage_hash
            == [
              194u8, 221u8, 147u8, 22u8, 68u8, 141u8, 32u8, 6u8, 202u8, 39u8, 164u8, 184u8, 69u8,
              126u8, 190u8, 101u8, 215u8, 27u8, 127u8, 157u8, 200u8, 69u8, 170u8, 139u8, 232u8,
              27u8, 254u8, 181u8, 183u8, 105u8, 111u8, 177u8,
            ]
          {
            let entry = ParentHash;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Digest of the current block, also part of the block header."]
        pub async fn digest(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::sp_runtime::generic::digest::Digest,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Digest>()?
          };
          if runtime_storage_hash
            == [
              10u8, 176u8, 13u8, 228u8, 226u8, 42u8, 210u8, 151u8, 107u8, 212u8, 136u8, 15u8, 38u8,
              182u8, 225u8, 12u8, 250u8, 56u8, 193u8, 243u8, 219u8, 113u8, 95u8, 233u8, 21u8,
              229u8, 125u8, 146u8, 92u8, 250u8, 32u8, 168u8,
            ]
          {
            let entry = Digest;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Events deposited for the current block."]
        #[doc = ""]
        #[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
        #[doc = " It could otherwise inflate the PoV size of a block."]
        #[doc = ""]
        #[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
        #[doc = " just in case someone still reads them from within the runtime."]
        pub async fn events(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<
            runtime_types::frame_system::EventRecord<
              runtime_types::lagoon_runtime::Event,
              ::subxt::sp_core::H256,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Events>()?
          };
          if runtime_storage_hash
            == [
              144u8, 109u8, 97u8, 8u8, 138u8, 12u8, 122u8, 218u8, 3u8, 146u8, 181u8, 92u8, 212u8,
              220u8, 235u8, 111u8, 42u8, 212u8, 228u8, 33u8, 109u8, 200u8, 226u8, 97u8, 201u8,
              245u8, 45u8, 194u8, 117u8, 64u8, 71u8, 103u8,
            ]
          {
            let entry = Events;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The number of events in the `Events<T>` list."]
        pub async fn event_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<EventCount>()?
          };
          if runtime_storage_hash
            == [
              236u8, 93u8, 90u8, 177u8, 250u8, 211u8, 138u8, 187u8, 26u8, 208u8, 203u8, 113u8,
              221u8, 233u8, 227u8, 9u8, 249u8, 25u8, 202u8, 185u8, 161u8, 144u8, 167u8, 104u8,
              127u8, 187u8, 38u8, 18u8, 52u8, 61u8, 66u8, 112u8,
            ]
          {
            let entry = EventCount;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
        #[doc = " of events in the `<Events<T>>` list."]
        #[doc = ""]
        #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
        #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
        #[doc = " in case of changes fetch the list of events of interest."]
        #[doc = ""]
        #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
        #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
        #[doc = " no notification will be triggered thus the event might be lost."]
        pub async fn event_topics(
          &self,
          _0: &::subxt::sp_core::H256,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<EventTopics>()?
          };
          if runtime_storage_hash
            == [
              231u8, 73u8, 172u8, 223u8, 210u8, 145u8, 151u8, 102u8, 73u8, 23u8, 140u8, 55u8, 97u8,
              40u8, 219u8, 239u8, 229u8, 177u8, 72u8, 41u8, 93u8, 178u8, 7u8, 209u8, 57u8, 86u8,
              153u8, 252u8, 86u8, 152u8, 245u8, 179u8,
            ]
          {
            let entry = EventTopics(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
        #[doc = " of events in the `<Events<T>>` list."]
        #[doc = ""]
        #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
        #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
        #[doc = " in case of changes fetch the list of events of interest."]
        #[doc = ""]
        #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
        #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
        #[doc = " no notification will be triggered thus the event might be lost."]
        pub async fn event_topics_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, EventTopics<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<EventTopics>()?
          };
          if runtime_storage_hash
            == [
              231u8, 73u8, 172u8, 223u8, 210u8, 145u8, 151u8, 102u8, 73u8, 23u8, 140u8, 55u8, 97u8,
              40u8, 219u8, 239u8, 229u8, 177u8, 72u8, 41u8, 93u8, 178u8, 7u8, 209u8, 57u8, 86u8,
              153u8, 252u8, 86u8, 152u8, 245u8, 179u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
        pub async fn last_runtime_upgrade(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::frame_system::LastRuntimeUpgradeInfo>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<LastRuntimeUpgrade>()?
          };
          if runtime_storage_hash
            == [
              219u8, 153u8, 158u8, 38u8, 45u8, 65u8, 151u8, 137u8, 53u8, 76u8, 11u8, 181u8, 218u8,
              248u8, 125u8, 190u8, 100u8, 240u8, 173u8, 75u8, 179u8, 137u8, 198u8, 197u8, 248u8,
              185u8, 118u8, 58u8, 42u8, 165u8, 125u8, 119u8,
            ]
          {
            let entry = LastRuntimeUpgrade;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
        pub async fn upgraded_to_u32_ref_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::bool, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<UpgradedToU32RefCount>()?
          };
          if runtime_storage_hash
            == [
              171u8, 88u8, 244u8, 92u8, 122u8, 67u8, 27u8, 18u8, 59u8, 175u8, 175u8, 178u8, 20u8,
              150u8, 213u8, 59u8, 222u8, 141u8, 32u8, 107u8, 3u8, 114u8, 83u8, 250u8, 180u8, 233u8,
              152u8, 54u8, 187u8, 99u8, 131u8, 204u8,
            ]
          {
            let entry = UpgradedToU32RefCount;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
        #[doc = " (default) if not."]
        pub async fn upgraded_to_triple_ref_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::bool, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<UpgradedToTripleRefCount>()?
          };
          if runtime_storage_hash
            == [
              90u8, 33u8, 56u8, 86u8, 90u8, 101u8, 89u8, 133u8, 203u8, 56u8, 201u8, 210u8, 244u8,
              232u8, 150u8, 18u8, 51u8, 105u8, 14u8, 230u8, 103u8, 155u8, 246u8, 99u8, 53u8, 207u8,
              225u8, 128u8, 186u8, 76u8, 40u8, 185u8,
            ]
          {
            let entry = UpgradedToTripleRefCount;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The execution phase of the block."]
        pub async fn execution_phase(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::frame_system::Phase>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ExecutionPhase>()?
          };
          if runtime_storage_hash
            == [
              174u8, 13u8, 230u8, 220u8, 239u8, 161u8, 172u8, 122u8, 188u8, 95u8, 141u8, 118u8,
              91u8, 158u8, 111u8, 145u8, 243u8, 173u8, 226u8, 212u8, 187u8, 118u8, 94u8, 132u8,
              221u8, 244u8, 61u8, 148u8, 217u8, 30u8, 238u8, 225u8,
            ]
          {
            let entry = ExecutionPhase;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Block & extrinsics weights: base values and limits."]
        pub fn block_weights(
          &self,
        ) -> ::core::result::Result<
          runtime_types::frame_system::limits::BlockWeights,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("System", "BlockWeights")?
            == [
              200u8, 248u8, 31u8, 36u8, 218u8, 142u8, 208u8, 76u8, 248u8, 100u8, 87u8, 242u8, 90u8,
              226u8, 143u8, 182u8, 173u8, 156u8, 179u8, 61u8, 82u8, 63u8, 158u8, 192u8, 52u8,
              108u8, 49u8, 5u8, 103u8, 113u8, 106u8, 234u8,
            ]
          {
            let pallet = metadata.pallet("System")?;
            let constant = pallet.constant("BlockWeights")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum length of a block (in bytes)."]
        pub fn block_length(
          &self,
        ) -> ::core::result::Result<
          runtime_types::frame_system::limits::BlockLength,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("System", "BlockLength")?
            == [
              120u8, 249u8, 182u8, 103u8, 246u8, 214u8, 149u8, 44u8, 42u8, 64u8, 2u8, 56u8, 157u8,
              184u8, 43u8, 195u8, 214u8, 251u8, 207u8, 207u8, 249u8, 105u8, 203u8, 108u8, 179u8,
              93u8, 93u8, 246u8, 40u8, 175u8, 160u8, 114u8,
            ]
          {
            let pallet = metadata.pallet("System")?;
            let constant = pallet.constant("BlockLength")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
        pub fn block_hash_count(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("System", "BlockHashCount")?
            == [
              123u8, 126u8, 182u8, 103u8, 71u8, 187u8, 233u8, 8u8, 47u8, 226u8, 159u8, 139u8, 0u8,
              59u8, 190u8, 135u8, 189u8, 77u8, 190u8, 81u8, 39u8, 198u8, 224u8, 219u8, 70u8, 143u8,
              6u8, 132u8, 196u8, 61u8, 117u8, 194u8,
            ]
          {
            let pallet = metadata.pallet("System")?;
            let constant = pallet.constant("BlockHashCount")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The weight of runtime database operations the runtime can invoke."]
        pub fn db_weight(
          &self,
        ) -> ::core::result::Result<
          runtime_types::frame_support::weights::RuntimeDbWeight,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("System", "DbWeight")?
            == [
              203u8, 8u8, 106u8, 152u8, 74u8, 132u8, 2u8, 132u8, 244u8, 106u8, 147u8, 12u8, 93u8,
              80u8, 61u8, 158u8, 172u8, 178u8, 228u8, 125u8, 213u8, 102u8, 75u8, 210u8, 64u8,
              185u8, 204u8, 84u8, 10u8, 164u8, 204u8, 62u8,
            ]
          {
            let pallet = metadata.pallet("System")?;
            let constant = pallet.constant("DbWeight")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Get the chain's current version."]
        pub fn version(
          &self,
        ) -> ::core::result::Result<runtime_types::sp_version::RuntimeVersion, ::subxt::BasicError>
        {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("System", "Version")?
            == [
              143u8, 163u8, 46u8, 7u8, 227u8, 61u8, 208u8, 87u8, 232u8, 226u8, 73u8, 52u8, 76u8,
              114u8, 76u8, 61u8, 83u8, 4u8, 246u8, 231u8, 155u8, 2u8, 108u8, 3u8, 15u8, 14u8, 68u8,
              185u8, 151u8, 151u8, 240u8, 76u8,
            ]
          {
            let pallet = metadata.pallet("System")?;
            let constant = pallet.constant("Version")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The designated SS85 prefix of this chain."]
        #[doc = ""]
        #[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
        #[doc = " that the runtime should know about the prefix in order to make use of it as"]
        #[doc = " an identifier of the chain."]
        pub fn ss58_prefix(
          &self,
        ) -> ::core::result::Result<::core::primitive::u16, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("System", "SS58Prefix")?
            == [
              197u8, 217u8, 49u8, 68u8, 82u8, 238u8, 120u8, 50u8, 91u8, 58u8, 6u8, 156u8, 40u8,
              1u8, 241u8, 213u8, 141u8, 74u8, 83u8, 115u8, 117u8, 41u8, 119u8, 50u8, 140u8, 136u8,
              163u8, 185u8, 34u8, 190u8, 60u8, 97u8,
            ]
          {
            let pallet = metadata.pallet("System")?;
            let constant = pallet.constant("SS58Prefix")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod babe {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ReportEquivocation {
        pub equivocation_proof: ::std::boxed::Box<
          runtime_types::sp_consensus_slots::EquivocationProof<
            runtime_types::sp_runtime::generic::header::Header<
              ::core::primitive::u32,
              runtime_types::sp_runtime::traits::BlakeTwo256,
            >,
            runtime_types::sp_consensus_babe::app::Public,
          >,
        >,
        pub key_owner_proof: runtime_types::sp_session::MembershipProof,
      }
      impl ::subxt::Call for ReportEquivocation {
        const PALLET: &'static str = "Babe";
        const FUNCTION: &'static str = "report_equivocation";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ReportEquivocationUnsigned {
        pub equivocation_proof: ::std::boxed::Box<
          runtime_types::sp_consensus_slots::EquivocationProof<
            runtime_types::sp_runtime::generic::header::Header<
              ::core::primitive::u32,
              runtime_types::sp_runtime::traits::BlakeTwo256,
            >,
            runtime_types::sp_consensus_babe::app::Public,
          >,
        >,
        pub key_owner_proof: runtime_types::sp_session::MembershipProof,
      }
      impl ::subxt::Call for ReportEquivocationUnsigned {
        const PALLET: &'static str = "Babe";
        const FUNCTION: &'static str = "report_equivocation_unsigned";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct PlanConfigChange {
        pub config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
      }
      impl ::subxt::Call for PlanConfigChange {
        const PALLET: &'static str = "Babe";
        const FUNCTION: &'static str = "plan_config_change";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Report authority equivocation/misbehavior. This method will verify"]
        #[doc = "the equivocation proof and validate the given key ownership proof"]
        #[doc = "against the extracted offender. If both are valid, the offence will"]
        #[doc = "be reported."]
        pub fn report_equivocation(
          &self,
          equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
            runtime_types::sp_runtime::generic::header::Header<
              ::core::primitive::u32,
              runtime_types::sp_runtime::traits::BlakeTwo256,
            >,
            runtime_types::sp_consensus_babe::app::Public,
          >,
          key_owner_proof: runtime_types::sp_session::MembershipProof,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ReportEquivocation,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ReportEquivocation>()?
          };
          if runtime_call_hash
            == [
              123u8, 212u8, 216u8, 77u8, 79u8, 132u8, 201u8, 155u8, 166u8, 230u8, 50u8, 89u8, 98u8,
              68u8, 56u8, 213u8, 206u8, 245u8, 91u8, 104u8, 89u8, 189u8, 57u8, 38u8, 127u8, 22u8,
              47u8, 206u8, 142u8, 202u8, 106u8, 154u8,
            ]
          {
            let call = ReportEquivocation {
              equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
              key_owner_proof,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Report authority equivocation/misbehavior. This method will verify"]
        #[doc = "the equivocation proof and validate the given key ownership proof"]
        #[doc = "against the extracted offender. If both are valid, the offence will"]
        #[doc = "be reported."]
        #[doc = "This extrinsic must be called unsigned and it is expected that only"]
        #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
        #[doc = "if the block author is defined it will be defined as the equivocation"]
        #[doc = "reporter."]
        pub fn report_equivocation_unsigned(
          &self,
          equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
            runtime_types::sp_runtime::generic::header::Header<
              ::core::primitive::u32,
              runtime_types::sp_runtime::traits::BlakeTwo256,
            >,
            runtime_types::sp_consensus_babe::app::Public,
          >,
          key_owner_proof: runtime_types::sp_session::MembershipProof,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ReportEquivocationUnsigned,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ReportEquivocationUnsigned>()?
          };
          if runtime_call_hash
            == [
              32u8, 163u8, 168u8, 251u8, 251u8, 9u8, 1u8, 195u8, 173u8, 32u8, 235u8, 125u8, 141u8,
              201u8, 130u8, 207u8, 239u8, 76u8, 150u8, 99u8, 74u8, 193u8, 60u8, 165u8, 93u8, 49u8,
              95u8, 224u8, 217u8, 243u8, 117u8, 173u8,
            ]
          {
            let call = ReportEquivocationUnsigned {
              equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
              key_owner_proof,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Plan an epoch config change. The epoch config change is recorded and will be enacted on"]
        #[doc = "the next call to `enact_epoch_change`. The config will be activated one epoch after."]
        #[doc = "Multiple calls to this method will replace any existing planned config change that had"]
        #[doc = "not been enacted yet."]
        pub fn plan_config_change(
          &self,
          config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, PlanConfigChange, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<PlanConfigChange>()?
          };
          if runtime_call_hash
            == [
              215u8, 121u8, 90u8, 87u8, 178u8, 247u8, 114u8, 53u8, 174u8, 28u8, 20u8, 33u8, 139u8,
              216u8, 13u8, 187u8, 74u8, 198u8, 38u8, 28u8, 175u8, 13u8, 73u8, 132u8, 103u8, 78u8,
              217u8, 207u8, 113u8, 169u8, 42u8, 103u8,
            ]
          {
            let call = PlanConfigChange { config };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct EpochIndex;
      impl ::subxt::StorageEntry for EpochIndex {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "EpochIndex";
        type Value = ::core::primitive::u64;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Authorities;
      impl ::subxt::StorageEntry for Authorities {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "Authorities";
        type Value = runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<(
          runtime_types::sp_consensus_babe::app::Public,
          ::core::primitive::u64,
        )>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct GenesisSlot;
      impl ::subxt::StorageEntry for GenesisSlot {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "GenesisSlot";
        type Value = runtime_types::sp_consensus_slots::Slot;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct CurrentSlot;
      impl ::subxt::StorageEntry for CurrentSlot {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "CurrentSlot";
        type Value = runtime_types::sp_consensus_slots::Slot;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Randomness;
      impl ::subxt::StorageEntry for Randomness {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "Randomness";
        type Value = [::core::primitive::u8; 32usize];
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct PendingEpochConfigChange;
      impl ::subxt::StorageEntry for PendingEpochConfigChange {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "PendingEpochConfigChange";
        type Value = runtime_types::sp_consensus_babe::digests::NextConfigDescriptor;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct NextRandomness;
      impl ::subxt::StorageEntry for NextRandomness {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "NextRandomness";
        type Value = [::core::primitive::u8; 32usize];
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct NextAuthorities;
      impl ::subxt::StorageEntry for NextAuthorities {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "NextAuthorities";
        type Value = runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<(
          runtime_types::sp_consensus_babe::app::Public,
          ::core::primitive::u64,
        )>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct SegmentIndex;
      impl ::subxt::StorageEntry for SegmentIndex {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "SegmentIndex";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct UnderConstruction<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for UnderConstruction<'_> {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "UnderConstruction";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
          [::core::primitive::u8; 32usize],
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct Initialized;
      impl ::subxt::StorageEntry for Initialized {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "Initialized";
        type Value = ::core::option::Option<runtime_types::sp_consensus_babe::digests::PreDigest>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct AuthorVrfRandomness;
      impl ::subxt::StorageEntry for AuthorVrfRandomness {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "AuthorVrfRandomness";
        type Value = ::core::option::Option<[::core::primitive::u8; 32usize]>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct EpochStart;
      impl ::subxt::StorageEntry for EpochStart {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "EpochStart";
        type Value = (::core::primitive::u32, ::core::primitive::u32);
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Lateness;
      impl ::subxt::StorageEntry for Lateness {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "Lateness";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct EpochConfig;
      impl ::subxt::StorageEntry for EpochConfig {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "EpochConfig";
        type Value = runtime_types::sp_consensus_babe::BabeEpochConfiguration;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct NextEpochConfig;
      impl ::subxt::StorageEntry for NextEpochConfig {
        const PALLET: &'static str = "Babe";
        const STORAGE: &'static str = "NextEpochConfig";
        type Value = runtime_types::sp_consensus_babe::BabeEpochConfiguration;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Current epoch index."]
        pub async fn epoch_index(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<EpochIndex>()?
          };
          if runtime_storage_hash
            == [
              51u8, 27u8, 91u8, 156u8, 118u8, 99u8, 46u8, 219u8, 190u8, 147u8, 205u8, 23u8, 106u8,
              169u8, 121u8, 218u8, 208u8, 235u8, 135u8, 127u8, 243u8, 41u8, 55u8, 243u8, 235u8,
              122u8, 57u8, 86u8, 37u8, 90u8, 208u8, 71u8,
            ]
          {
            let entry = EpochIndex;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Current epoch authorities."]
        pub async fn authorities(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<(
            runtime_types::sp_consensus_babe::app::Public,
            ::core::primitive::u64,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Authorities>()?
          };
          if runtime_storage_hash
            == [
              39u8, 102u8, 251u8, 125u8, 230u8, 247u8, 174u8, 255u8, 2u8, 81u8, 86u8, 69u8, 182u8,
              92u8, 191u8, 163u8, 66u8, 181u8, 247u8, 9u8, 57u8, 154u8, 239u8, 34u8, 25u8, 139u8,
              119u8, 4u8, 131u8, 124u8, 135u8, 240u8,
            ]
          {
            let entry = Authorities;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The slot at which the first epoch actually started. This is 0"]
        #[doc = " until the first block of the chain."]
        pub async fn genesis_slot(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<runtime_types::sp_consensus_slots::Slot, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<GenesisSlot>()?
          };
          if runtime_storage_hash
            == [
              136u8, 244u8, 7u8, 142u8, 224u8, 33u8, 144u8, 186u8, 155u8, 144u8, 68u8, 81u8, 241u8,
              57u8, 40u8, 207u8, 35u8, 39u8, 28u8, 41u8, 210u8, 213u8, 53u8, 195u8, 175u8, 119u8,
              6u8, 175u8, 100u8, 192u8, 180u8, 73u8,
            ]
          {
            let entry = GenesisSlot;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Current slot number."]
        pub async fn current_slot(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<runtime_types::sp_consensus_slots::Slot, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CurrentSlot>()?
          };
          if runtime_storage_hash
            == [
              233u8, 102u8, 77u8, 99u8, 103u8, 50u8, 151u8, 229u8, 46u8, 226u8, 181u8, 37u8, 117u8,
              204u8, 234u8, 120u8, 116u8, 166u8, 80u8, 188u8, 92u8, 154u8, 137u8, 150u8, 79u8,
              164u8, 29u8, 203u8, 2u8, 51u8, 123u8, 104u8,
            ]
          {
            let entry = CurrentSlot;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The epoch randomness for the *current* epoch."]
        #[doc = ""]
        #[doc = " # Security"]
        #[doc = ""]
        #[doc = " This MUST NOT be used for gambling, as it can be influenced by a"]
        #[doc = " malicious validator in the short term. It MAY be used in many"]
        #[doc = " cryptographic protocols, however, so long as one remembers that this"]
        #[doc = " (like everything else on-chain) it is public. For example, it can be"]
        #[doc = " used where a number is needed that cannot have been chosen by an"]
        #[doc = " adversary, for purposes such as public-coin zero-knowledge proofs."]
        pub async fn randomness(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<[::core::primitive::u8; 32usize], ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Randomness>()?
          };
          if runtime_storage_hash
            == [
              191u8, 197u8, 25u8, 164u8, 104u8, 248u8, 247u8, 193u8, 244u8, 60u8, 181u8, 195u8,
              248u8, 90u8, 41u8, 199u8, 82u8, 123u8, 72u8, 126u8, 18u8, 17u8, 128u8, 215u8, 34u8,
              251u8, 227u8, 70u8, 166u8, 10u8, 104u8, 140u8,
            ]
          {
            let entry = Randomness;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Pending epoch configuration change that will be applied when the next epoch is enacted."]
        pub async fn pending_epoch_config_change(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::sp_consensus_babe::digests::NextConfigDescriptor>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<PendingEpochConfigChange>()?
          };
          if runtime_storage_hash
            == [
              98u8, 52u8, 22u8, 32u8, 76u8, 196u8, 89u8, 78u8, 119u8, 181u8, 17u8, 49u8, 220u8,
              159u8, 195u8, 74u8, 33u8, 59u8, 15u8, 104u8, 26u8, 111u8, 165u8, 68u8, 147u8, 14u8,
              86u8, 94u8, 250u8, 167u8, 146u8, 82u8,
            ]
          {
            let entry = PendingEpochConfigChange;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Next epoch randomness."]
        pub async fn next_randomness(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<[::core::primitive::u8; 32usize], ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<NextRandomness>()?
          };
          if runtime_storage_hash
            == [
              185u8, 98u8, 45u8, 109u8, 253u8, 38u8, 238u8, 221u8, 240u8, 29u8, 38u8, 107u8, 118u8,
              117u8, 131u8, 115u8, 21u8, 255u8, 203u8, 81u8, 243u8, 251u8, 91u8, 60u8, 163u8,
              202u8, 125u8, 193u8, 173u8, 234u8, 166u8, 92u8,
            ]
          {
            let entry = NextRandomness;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Next epoch authorities."]
        pub async fn next_authorities(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<(
            runtime_types::sp_consensus_babe::app::Public,
            ::core::primitive::u64,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<NextAuthorities>()?
          };
          if runtime_storage_hash
            == [
              211u8, 175u8, 218u8, 0u8, 212u8, 114u8, 210u8, 137u8, 146u8, 135u8, 78u8, 133u8,
              85u8, 253u8, 140u8, 242u8, 101u8, 155u8, 159u8, 8u8, 217u8, 176u8, 234u8, 143u8,
              212u8, 103u8, 198u8, 94u8, 121u8, 111u8, 56u8, 89u8,
            ]
          {
            let entry = NextAuthorities;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Randomness under construction."]
        #[doc = ""]
        #[doc = " We make a trade-off between storage accesses and list length."]
        #[doc = " We store the under-construction randomness in segments of up to"]
        #[doc = " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`."]
        #[doc = ""]
        #[doc = " Once a segment reaches this length, we begin the next one."]
        #[doc = " We reset all segments and return to `0` at the beginning of every"]
        #[doc = " epoch."]
        pub async fn segment_index(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SegmentIndex>()?
          };
          if runtime_storage_hash
            == [
              128u8, 45u8, 87u8, 58u8, 174u8, 152u8, 241u8, 156u8, 56u8, 192u8, 19u8, 45u8, 75u8,
              160u8, 35u8, 253u8, 145u8, 11u8, 178u8, 81u8, 114u8, 117u8, 112u8, 107u8, 163u8,
              208u8, 240u8, 151u8, 102u8, 176u8, 246u8, 5u8,
            ]
          {
            let entry = SegmentIndex;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."]
        pub async fn under_construction(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            [::core::primitive::u8; 32usize],
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<UnderConstruction>()?
          };
          if runtime_storage_hash
            == [
              12u8, 167u8, 30u8, 96u8, 161u8, 63u8, 210u8, 63u8, 91u8, 199u8, 188u8, 78u8, 254u8,
              255u8, 253u8, 202u8, 203u8, 26u8, 4u8, 105u8, 76u8, 125u8, 191u8, 245u8, 32u8, 97u8,
              127u8, 129u8, 167u8, 80u8, 210u8, 123u8,
            ]
          {
            let entry = UnderConstruction(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."]
        pub async fn under_construction_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, UnderConstruction<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<UnderConstruction>()?
          };
          if runtime_storage_hash
            == [
              12u8, 167u8, 30u8, 96u8, 161u8, 63u8, 210u8, 63u8, 91u8, 199u8, 188u8, 78u8, 254u8,
              255u8, 253u8, 202u8, 203u8, 26u8, 4u8, 105u8, 76u8, 125u8, 191u8, 245u8, 32u8, 97u8,
              127u8, 129u8, 167u8, 80u8, 210u8, 123u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Temporary value (cleared at block finalization) which is `Some`"]
        #[doc = " if per-block initialization has already been called for current block."]
        pub async fn initialized(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            ::core::option::Option<runtime_types::sp_consensus_babe::digests::PreDigest>,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Initialized>()?
          };
          if runtime_storage_hash
            == [
              174u8, 23u8, 254u8, 52u8, 114u8, 235u8, 65u8, 46u8, 39u8, 97u8, 238u8, 243u8, 237u8,
              138u8, 142u8, 85u8, 114u8, 69u8, 58u8, 172u8, 7u8, 238u8, 110u8, 153u8, 22u8, 122u8,
              117u8, 149u8, 113u8, 221u8, 127u8, 225u8,
            ]
          {
            let entry = Initialized;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " This field should always be populated during block processing unless"]
        #[doc = " secondary plain slots are enabled (which don't contain a VRF output)."]
        #[doc = ""]
        #[doc = " It is set in `on_finalize`, before it will contain the value from the last block."]
        pub async fn author_vrf_randomness(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<[::core::primitive::u8; 32usize]>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AuthorVrfRandomness>()?
          };
          if runtime_storage_hash
            == [
              66u8, 235u8, 74u8, 252u8, 222u8, 135u8, 19u8, 28u8, 74u8, 191u8, 170u8, 197u8, 207u8,
              127u8, 77u8, 121u8, 138u8, 138u8, 110u8, 187u8, 34u8, 14u8, 230u8, 43u8, 241u8,
              241u8, 63u8, 163u8, 53u8, 179u8, 250u8, 247u8,
            ]
          {
            let entry = AuthorVrfRandomness;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The block numbers when the last and current epoch have started, respectively `N-1` and"]
        #[doc = " `N`."]
        #[doc = " NOTE: We track this is in order to annotate the block number when a given pool of"]
        #[doc = " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in"]
        #[doc = " slots, which may be skipped, the block numbers may not line up with the slot numbers."]
        pub async fn epoch_start(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          (::core::primitive::u32, ::core::primitive::u32),
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<EpochStart>()?
          };
          if runtime_storage_hash
            == [
              196u8, 39u8, 241u8, 20u8, 150u8, 180u8, 136u8, 4u8, 195u8, 205u8, 218u8, 10u8, 130u8,
              131u8, 168u8, 243u8, 207u8, 249u8, 58u8, 195u8, 177u8, 119u8, 110u8, 243u8, 241u8,
              3u8, 245u8, 56u8, 157u8, 5u8, 68u8, 60u8,
            ]
          {
            let entry = EpochStart;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " How late the current block is compared to its parent."]
        #[doc = ""]
        #[doc = " This entry is populated as part of block execution and is cleaned up"]
        #[doc = " on block finalization. Querying this storage entry outside of block"]
        #[doc = " execution context should always yield zero."]
        pub async fn lateness(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Lateness>()?
          };
          if runtime_storage_hash
            == [
              229u8, 230u8, 224u8, 89u8, 49u8, 213u8, 198u8, 236u8, 144u8, 56u8, 193u8, 234u8,
              62u8, 242u8, 191u8, 199u8, 105u8, 131u8, 74u8, 63u8, 75u8, 1u8, 210u8, 49u8, 3u8,
              128u8, 18u8, 77u8, 219u8, 146u8, 60u8, 88u8,
            ]
          {
            let entry = Lateness;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The configuration for the current epoch. Should never be `None` as it is initialized in"]
        #[doc = " genesis."]
        pub async fn epoch_config(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::sp_consensus_babe::BabeEpochConfiguration>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<EpochConfig>()?
          };
          if runtime_storage_hash
            == [
              169u8, 189u8, 214u8, 159u8, 181u8, 232u8, 243u8, 4u8, 113u8, 24u8, 221u8, 229u8,
              27u8, 35u8, 3u8, 121u8, 136u8, 88u8, 187u8, 193u8, 207u8, 153u8, 223u8, 225u8, 166u8,
              183u8, 53u8, 3u8, 162u8, 207u8, 88u8, 133u8,
            ]
          {
            let entry = EpochConfig;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The configuration for the next epoch, `None` if the config will not change"]
        #[doc = " (you can fallback to `EpochConfig` instead in that case)."]
        pub async fn next_epoch_config(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::sp_consensus_babe::BabeEpochConfiguration>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<NextEpochConfig>()?
          };
          if runtime_storage_hash
            == [
              239u8, 125u8, 203u8, 223u8, 161u8, 107u8, 232u8, 54u8, 158u8, 100u8, 244u8, 140u8,
              119u8, 58u8, 253u8, 245u8, 73u8, 236u8, 50u8, 67u8, 228u8, 162u8, 166u8, 168u8,
              162u8, 152u8, 239u8, 246u8, 153u8, 223u8, 109u8, 121u8,
            ]
          {
            let entry = NextEpochConfig;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The amount of time, in slots, that each epoch should last."]
        #[doc = " NOTE: Currently it is not possible to change the epoch duration after"]
        #[doc = " the chain has started. Attempting to do so will brick block production."]
        pub fn epoch_duration(
          &self,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Babe", "EpochDuration")?
            == [
              40u8, 54u8, 255u8, 20u8, 89u8, 2u8, 38u8, 235u8, 70u8, 145u8, 128u8, 227u8, 177u8,
              3u8, 153u8, 91u8, 102u8, 159u8, 160u8, 139u8, 88u8, 111u8, 116u8, 90u8, 139u8, 12u8,
              31u8, 236u8, 11u8, 113u8, 213u8, 254u8,
            ]
          {
            let pallet = metadata.pallet("Babe")?;
            let constant = pallet.constant("EpochDuration")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The expected average block time at which BABE should be creating"]
        #[doc = " blocks. Since BABE is probabilistic it is not trivial to figure out"]
        #[doc = " what the expected average block time should be based on the slot"]
        #[doc = " duration and the security parameter `c` (where `1 - c` represents"]
        #[doc = " the probability of a slot being empty)."]
        pub fn expected_block_time(
          &self,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Babe", "ExpectedBlockTime")?
            == [
              249u8, 170u8, 37u8, 7u8, 132u8, 115u8, 106u8, 71u8, 116u8, 166u8, 78u8, 251u8, 242u8,
              146u8, 99u8, 207u8, 204u8, 225u8, 157u8, 57u8, 19u8, 17u8, 202u8, 231u8, 50u8, 67u8,
              17u8, 205u8, 238u8, 80u8, 154u8, 125u8,
            ]
          {
            let pallet = metadata.pallet("Babe")?;
            let constant = pallet.constant("ExpectedBlockTime")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Max number of authorities allowed"]
        pub fn max_authorities(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Babe", "MaxAuthorities")?
            == [
              248u8, 195u8, 131u8, 166u8, 10u8, 50u8, 71u8, 223u8, 41u8, 49u8, 43u8, 99u8, 251u8,
              113u8, 75u8, 193u8, 159u8, 15u8, 77u8, 217u8, 147u8, 205u8, 165u8, 50u8, 6u8, 166u8,
              77u8, 189u8, 102u8, 22u8, 201u8, 19u8,
            ]
          {
            let pallet = metadata.pallet("Babe")?;
            let constant = pallet.constant("MaxAuthorities")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod timestamp {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Set {
        #[codec(compact)]
        pub now: ::core::primitive::u64,
      }
      impl ::subxt::Call for Set {
        const PALLET: &'static str = "Timestamp";
        const FUNCTION: &'static str = "set";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Set the current time."]
        #[doc = ""]
        #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
        #[doc = "phase, if this call hasn't been invoked by that time."]
        #[doc = ""]
        #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
        #[doc = "`MinimumPeriod`."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be `Inherent`."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
        #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
        #[doc = "  `on_finalize`)"]
        #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
        #[doc = "# </weight>"]
        pub fn set(
          &self,
          now: ::core::primitive::u64,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Set, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Set>()?
          };
          if runtime_call_hash
            == [
              191u8, 73u8, 102u8, 150u8, 65u8, 157u8, 172u8, 194u8, 7u8, 72u8, 1u8, 35u8, 54u8,
              99u8, 245u8, 139u8, 40u8, 136u8, 245u8, 53u8, 167u8, 100u8, 143u8, 244u8, 160u8, 5u8,
              18u8, 130u8, 77u8, 160u8, 227u8, 51u8,
            ]
          {
            let call = Set { now };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Now;
      impl ::subxt::StorageEntry for Now {
        const PALLET: &'static str = "Timestamp";
        const STORAGE: &'static str = "Now";
        type Value = ::core::primitive::u64;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct DidUpdate;
      impl ::subxt::StorageEntry for DidUpdate {
        const PALLET: &'static str = "Timestamp";
        const STORAGE: &'static str = "DidUpdate";
        type Value = ::core::primitive::bool;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Current time for the current block."]
        pub async fn now(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Now>()?
          };
          if runtime_storage_hash
            == [
              148u8, 53u8, 50u8, 54u8, 13u8, 161u8, 57u8, 150u8, 16u8, 83u8, 144u8, 221u8, 59u8,
              75u8, 158u8, 130u8, 39u8, 123u8, 106u8, 134u8, 202u8, 185u8, 83u8, 85u8, 60u8, 41u8,
              120u8, 96u8, 210u8, 34u8, 2u8, 250u8,
            ]
          {
            let entry = Now;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Did the timestamp get updated in this block?"]
        pub async fn did_update(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::bool, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<DidUpdate>()?
          };
          if runtime_storage_hash
            == [
              70u8, 13u8, 92u8, 186u8, 80u8, 151u8, 167u8, 90u8, 158u8, 232u8, 175u8, 13u8, 103u8,
              135u8, 2u8, 78u8, 16u8, 6u8, 39u8, 158u8, 167u8, 85u8, 27u8, 47u8, 122u8, 73u8,
              127u8, 26u8, 35u8, 168u8, 72u8, 204u8,
            ]
          {
            let entry = DidUpdate;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The minimum period between blocks. Beware that this is different to the *expected*"]
        #[doc = " period that the block production apparatus provides. Your chosen consensus system will"]
        #[doc = " generally work with this to determine a sensible block time. e.g. For Aura, it will be"]
        #[doc = " double this period on default settings."]
        pub fn minimum_period(
          &self,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Timestamp", "MinimumPeriod")?
            == [
              141u8, 242u8, 40u8, 24u8, 83u8, 43u8, 33u8, 194u8, 156u8, 149u8, 219u8, 61u8, 10u8,
              123u8, 120u8, 247u8, 228u8, 22u8, 25u8, 24u8, 214u8, 188u8, 54u8, 135u8, 240u8,
              162u8, 41u8, 216u8, 3u8, 58u8, 238u8, 39u8,
            ]
          {
            let pallet = metadata.pallet("Timestamp")?;
            let constant = pallet.constant("MinimumPeriod")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod indices {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      pub struct Claim {
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Call for Claim {
        const PALLET: &'static str = "Indices";
        const FUNCTION: &'static str = "claim";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Transfer {
        pub new: ::subxt::sp_core::crypto::AccountId32,
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Call for Transfer {
        const PALLET: &'static str = "Indices";
        const FUNCTION: &'static str = "transfer";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      pub struct Free {
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Call for Free {
        const PALLET: &'static str = "Indices";
        const FUNCTION: &'static str = "free";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceTransfer {
        pub new: ::subxt::sp_core::crypto::AccountId32,
        pub index: ::core::primitive::u32,
        pub freeze: ::core::primitive::bool,
      }
      impl ::subxt::Call for ForceTransfer {
        const PALLET: &'static str = "Indices";
        const FUNCTION: &'static str = "force_transfer";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      pub struct Freeze {
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Call for Freeze {
        const PALLET: &'static str = "Indices";
        const FUNCTION: &'static str = "freeze";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Assign an previously unassigned index."]
        #[doc = ""]
        #[doc = "Payment: `Deposit` is reserved from the sender account."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "- `index`: the index to be claimed. This must not be in use."]
        #[doc = ""]
        #[doc = "Emits `IndexAssigned` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(1)`."]
        #[doc = "- One storage mutation (codec `O(1)`)."]
        #[doc = "- One reserve operation."]
        #[doc = "- One event."]
        #[doc = "-------------------"]
        #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
        #[doc = "# </weight>"]
        pub fn claim(
          &self,
          index: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Claim, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Claim>()?
          };
          if runtime_call_hash
            == [
              27u8, 4u8, 108u8, 55u8, 23u8, 109u8, 175u8, 25u8, 201u8, 230u8, 228u8, 51u8, 164u8,
              15u8, 79u8, 10u8, 219u8, 182u8, 242u8, 102u8, 164u8, 148u8, 39u8, 91u8, 106u8, 197u8,
              29u8, 190u8, 178u8, 221u8, 16u8, 87u8,
            ]
          {
            let call = Claim { index };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
        #[doc = "is effectively transferred to the new account."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
        #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
        #[doc = ""]
        #[doc = "Emits `IndexAssigned` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(1)`."]
        #[doc = "- One storage mutation (codec `O(1)`)."]
        #[doc = "- One transfer operation."]
        #[doc = "- One event."]
        #[doc = "-------------------"]
        #[doc = "- DB Weight:"]
        #[doc = "   - Reads: Indices Accounts, System Account (recipient)"]
        #[doc = "   - Writes: Indices Accounts, System Account (recipient)"]
        #[doc = "# </weight>"]
        pub fn transfer(
          &self,
          new: ::subxt::sp_core::crypto::AccountId32,
          index: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Transfer, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Transfer>()?
          };
          if runtime_call_hash
            == [
              124u8, 83u8, 33u8, 230u8, 23u8, 70u8, 83u8, 59u8, 76u8, 100u8, 219u8, 100u8, 165u8,
              163u8, 102u8, 193u8, 11u8, 22u8, 30u8, 125u8, 114u8, 28u8, 61u8, 156u8, 38u8, 170u8,
              129u8, 74u8, 187u8, 28u8, 33u8, 65u8,
            ]
          {
            let call = Transfer { new, index };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Free up an index owned by the sender."]
        #[doc = ""]
        #[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
        #[doc = ""]
        #[doc = "- `index`: the index to be freed. This must be owned by the sender."]
        #[doc = ""]
        #[doc = "Emits `IndexFreed` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(1)`."]
        #[doc = "- One storage mutation (codec `O(1)`)."]
        #[doc = "- One reserve operation."]
        #[doc = "- One event."]
        #[doc = "-------------------"]
        #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
        #[doc = "# </weight>"]
        pub fn free(
          &self,
          index: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Free, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Free>()?
          };
          if runtime_call_hash
            == [
              153u8, 143u8, 162u8, 33u8, 229u8, 3u8, 159u8, 153u8, 111u8, 100u8, 160u8, 250u8,
              227u8, 24u8, 157u8, 226u8, 173u8, 39u8, 25u8, 200u8, 137u8, 147u8, 232u8, 213u8,
              182u8, 49u8, 142u8, 250u8, 139u8, 155u8, 84u8, 214u8,
            ]
          {
            let call = Free { index };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
        #[doc = "held, then any deposit is reimbursed to its current owner."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Root_."]
        #[doc = ""]
        #[doc = "- `index`: the index to be (re-)assigned."]
        #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
        #[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
        #[doc = ""]
        #[doc = "Emits `IndexAssigned` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(1)`."]
        #[doc = "- One storage mutation (codec `O(1)`)."]
        #[doc = "- Up to one reserve operation."]
        #[doc = "- One event."]
        #[doc = "-------------------"]
        #[doc = "- DB Weight:"]
        #[doc = "   - Reads: Indices Accounts, System Account (original owner)"]
        #[doc = "   - Writes: Indices Accounts, System Account (original owner)"]
        #[doc = "# </weight>"]
        pub fn force_transfer(
          &self,
          new: ::subxt::sp_core::crypto::AccountId32,
          index: ::core::primitive::u32,
          freeze: ::core::primitive::bool,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ForceTransfer, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceTransfer>()?
          };
          if runtime_call_hash
            == [
              181u8, 143u8, 90u8, 135u8, 132u8, 11u8, 145u8, 85u8, 4u8, 211u8, 56u8, 110u8, 213u8,
              153u8, 224u8, 106u8, 198u8, 250u8, 130u8, 253u8, 72u8, 58u8, 133u8, 150u8, 102u8,
              119u8, 177u8, 175u8, 77u8, 106u8, 253u8, 99u8,
            ]
          {
            let call = ForceTransfer { new, index, freeze };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
        #[doc = "deposit."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
        #[doc = "non-frozen account `index`."]
        #[doc = ""]
        #[doc = "- `index`: the index to be frozen in place."]
        #[doc = ""]
        #[doc = "Emits `IndexFrozen` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(1)`."]
        #[doc = "- One storage mutation (codec `O(1)`)."]
        #[doc = "- Up to one slash operation."]
        #[doc = "- One event."]
        #[doc = "-------------------"]
        #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
        #[doc = "# </weight>"]
        pub fn freeze(
          &self,
          index: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Freeze, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Freeze>()?
          };
          if runtime_call_hash
            == [
              204u8, 127u8, 214u8, 137u8, 138u8, 28u8, 171u8, 169u8, 184u8, 164u8, 235u8, 114u8,
              132u8, 176u8, 14u8, 207u8, 72u8, 39u8, 179u8, 231u8, 137u8, 243u8, 242u8, 57u8, 89u8,
              57u8, 213u8, 210u8, 87u8, 12u8, 253u8, 159u8,
            ]
          {
            let call = Freeze { index };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_indices::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A account index was assigned."]
      pub struct IndexAssigned {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Event for IndexAssigned {
        const PALLET: &'static str = "Indices";
        const EVENT: &'static str = "IndexAssigned";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "A account index has been freed up (unassigned)."]
      pub struct IndexFreed {
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Event for IndexFreed {
        const PALLET: &'static str = "Indices";
        const EVENT: &'static str = "IndexFreed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A account index has been frozen to its current account ID."]
      pub struct IndexFrozen {
        pub index: ::core::primitive::u32,
        pub who: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for IndexFrozen {
        const PALLET: &'static str = "Indices";
        const EVENT: &'static str = "IndexFrozen";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Accounts<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for Accounts<'_> {
        const PALLET: &'static str = "Indices";
        const STORAGE: &'static str = "Accounts";
        type Value = (
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
          ::core::primitive::bool,
        );
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The lookup from index to account."]
        pub async fn accounts(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<(
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u128,
            ::core::primitive::bool,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Accounts>()?
          };
          if runtime_storage_hash
            == [
              105u8, 208u8, 81u8, 30u8, 157u8, 108u8, 22u8, 122u8, 152u8, 220u8, 40u8, 97u8, 255u8,
              166u8, 222u8, 11u8, 81u8, 245u8, 143u8, 79u8, 57u8, 19u8, 174u8, 164u8, 220u8, 59u8,
              77u8, 117u8, 39u8, 72u8, 251u8, 234u8,
            ]
          {
            let entry = Accounts(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The lookup from index to account."]
        pub async fn accounts_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Accounts<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Accounts>()?
          };
          if runtime_storage_hash
            == [
              105u8, 208u8, 81u8, 30u8, 157u8, 108u8, 22u8, 122u8, 152u8, 220u8, 40u8, 97u8, 255u8,
              166u8, 222u8, 11u8, 81u8, 245u8, 143u8, 79u8, 57u8, 19u8, 174u8, 164u8, 220u8, 59u8,
              77u8, 117u8, 39u8, 72u8, 251u8, 234u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The deposit needed for reserving an index."]
        pub fn deposit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Indices", "Deposit")?
            == [
              217u8, 97u8, 70u8, 109u8, 180u8, 214u8, 183u8, 67u8, 253u8, 148u8, 245u8, 108u8,
              187u8, 95u8, 0u8, 15u8, 167u8, 149u8, 163u8, 194u8, 206u8, 220u8, 164u8, 101u8, 1u8,
              99u8, 206u8, 165u8, 63u8, 141u8, 109u8, 1u8,
            ]
          {
            let pallet = metadata.pallet("Indices")?;
            let constant = pallet.constant("Deposit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod balances {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Transfer {
        pub dest: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub value: ::core::primitive::u128,
      }
      impl ::subxt::Call for Transfer {
        const PALLET: &'static str = "Balances";
        const FUNCTION: &'static str = "transfer";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetBalance {
        pub who: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub new_free: ::core::primitive::u128,
        #[codec(compact)]
        pub new_reserved: ::core::primitive::u128,
      }
      impl ::subxt::Call for SetBalance {
        const PALLET: &'static str = "Balances";
        const FUNCTION: &'static str = "set_balance";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceTransfer {
        pub source: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub dest: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub value: ::core::primitive::u128,
      }
      impl ::subxt::Call for ForceTransfer {
        const PALLET: &'static str = "Balances";
        const FUNCTION: &'static str = "force_transfer";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct TransferKeepAlive {
        pub dest: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub value: ::core::primitive::u128,
      }
      impl ::subxt::Call for TransferKeepAlive {
        const PALLET: &'static str = "Balances";
        const FUNCTION: &'static str = "transfer_keep_alive";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct TransferAll {
        pub dest: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub keep_alive: ::core::primitive::bool,
      }
      impl ::subxt::Call for TransferAll {
        const PALLET: &'static str = "Balances";
        const FUNCTION: &'static str = "transfer_all";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceUnreserve {
        pub who: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Call for ForceUnreserve {
        const PALLET: &'static str = "Balances";
        const FUNCTION: &'static str = "force_unreserve";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Transfer some liquid free balance to another account."]
        #[doc = ""]
        #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
        #[doc = "If the sender's account is below the existential deposit as a result"]
        #[doc = "of the transfer, the account will be reaped."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
        #[doc = "  types. See related functions below."]
        #[doc = "- It contains a limited number of reads and writes internally and no complex"]
        #[doc = "  computation."]
        #[doc = ""]
        #[doc = "Related functions:"]
        #[doc = ""]
        #[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
        #[doc = "  - Transferring balances to accounts that did not exist before will cause"]
        #[doc = "    `T::OnNewAccount::on_new_account` to be called."]
        #[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
        #[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
        #[doc = "    that the transfer will not kill the origin account."]
        #[doc = "---------------------------------"]
        #[doc = "- Origin account is already in memory, so no DB operations for them."]
        #[doc = "# </weight>"]
        pub fn transfer(
          &self,
          dest: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          value: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Transfer, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Transfer>()?
          };
          if runtime_call_hash
            == [
              51u8, 127u8, 65u8, 149u8, 186u8, 25u8, 125u8, 225u8, 172u8, 243u8, 144u8, 156u8,
              86u8, 150u8, 89u8, 114u8, 9u8, 142u8, 44u8, 98u8, 24u8, 252u8, 83u8, 64u8, 78u8,
              247u8, 136u8, 130u8, 203u8, 10u8, 206u8, 48u8,
            ]
          {
            let call = Transfer { dest, value };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set the balances of a given account."]
        #[doc = ""]
        #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
        #[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
        #[doc = "If the new free or reserved balance is below the existential deposit,"]
        #[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call is `root`."]
        pub fn set_balance(
          &self,
          who: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          new_free: ::core::primitive::u128,
          new_reserved: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetBalance, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetBalance>()?
          };
          if runtime_call_hash
            == [
              126u8, 224u8, 173u8, 235u8, 17u8, 214u8, 51u8, 73u8, 132u8, 184u8, 52u8, 124u8,
              147u8, 120u8, 186u8, 82u8, 247u8, 199u8, 89u8, 31u8, 111u8, 94u8, 224u8, 130u8,
              198u8, 2u8, 60u8, 0u8, 16u8, 248u8, 243u8, 216u8,
            ]
          {
            let call = SetBalance {
              who,
              new_free,
              new_reserved,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
        #[doc = "specified."]
        #[doc = "# <weight>"]
        #[doc = "- Same as transfer, but additional read and write because the source account is not"]
        #[doc = "  assumed to be in the overlay."]
        #[doc = "# </weight>"]
        pub fn force_transfer(
          &self,
          source: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          dest: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          value: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ForceTransfer, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceTransfer>()?
          };
          if runtime_call_hash
            == [
              39u8, 171u8, 216u8, 52u8, 120u8, 195u8, 8u8, 202u8, 157u8, 154u8, 191u8, 235u8,
              163u8, 121u8, 132u8, 119u8, 166u8, 162u8, 163u8, 68u8, 144u8, 193u8, 97u8, 194u8,
              130u8, 136u8, 234u8, 84u8, 177u8, 134u8, 0u8, 232u8,
            ]
          {
            let call = ForceTransfer {
              source,
              dest,
              value,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
        #[doc = "origin account."]
        #[doc = ""]
        #[doc = "99% of the time you want [`transfer`] instead."]
        #[doc = ""]
        #[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
        pub fn transfer_keep_alive(
          &self,
          dest: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          value: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            TransferKeepAlive,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<TransferKeepAlive>()?
          };
          if runtime_call_hash
            == [
              81u8, 224u8, 225u8, 42u8, 20u8, 198u8, 176u8, 165u8, 166u8, 150u8, 143u8, 162u8,
              202u8, 240u8, 59u8, 171u8, 17u8, 168u8, 211u8, 217u8, 137u8, 108u8, 207u8, 95u8,
              221u8, 51u8, 152u8, 4u8, 208u8, 79u8, 251u8, 29u8,
            ]
          {
            let call = TransferKeepAlive { dest, value };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Transfer the entire transferable balance from the caller account."]
        #[doc = ""]
        #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
        #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
        #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
        #[doc = "you might need to prepare the account by removing any reference counters, storage"]
        #[doc = "deposits, etc..."]
        #[doc = ""]
        #[doc = "The dispatch origin of this call must be Signed."]
        #[doc = ""]
        #[doc = "- `dest`: The recipient of the transfer."]
        #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
        #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
        #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
        #[doc = "  keep the sender account alive (true). # <weight>"]
        #[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
        #[doc = "  #</weight>"]
        pub fn transfer_all(
          &self,
          dest: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          keep_alive: ::core::primitive::bool,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, TransferAll, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<TransferAll>()?
          };
          if runtime_call_hash
            == [
              48u8, 241u8, 202u8, 6u8, 29u8, 207u8, 104u8, 141u8, 218u8, 18u8, 127u8, 214u8, 99u8,
              196u8, 39u8, 229u8, 120u8, 123u8, 130u8, 56u8, 129u8, 169u8, 149u8, 62u8, 221u8,
              108u8, 55u8, 201u8, 106u8, 36u8, 255u8, 85u8,
            ]
          {
            let call = TransferAll { dest, keep_alive };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Unreserve some balance from a user by force."]
        #[doc = ""]
        #[doc = "Can only be called by ROOT."]
        pub fn force_unreserve(
          &self,
          who: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          amount: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ForceUnreserve, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceUnreserve>()?
          };
          if runtime_call_hash
            == [
              4u8, 231u8, 55u8, 137u8, 114u8, 76u8, 44u8, 166u8, 28u8, 224u8, 22u8, 92u8, 76u8,
              124u8, 219u8, 29u8, 204u8, 207u8, 179u8, 134u8, 93u8, 137u8, 33u8, 178u8, 174u8,
              106u8, 132u8, 204u8, 180u8, 122u8, 162u8, 110u8,
            ]
          {
            let call = ForceUnreserve { who, amount };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_balances::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An account was created with some free balance."]
      pub struct Endowed {
        pub account: ::subxt::sp_core::crypto::AccountId32,
        pub free_balance: ::core::primitive::u128,
      }
      impl ::subxt::Event for Endowed {
        const PALLET: &'static str = "Balances";
        const EVENT: &'static str = "Endowed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
      #[doc = "resulting in an outright loss."]
      pub struct DustLost {
        pub account: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for DustLost {
        const PALLET: &'static str = "Balances";
        const EVENT: &'static str = "DustLost";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Transfer succeeded."]
      pub struct Transfer {
        pub from: ::subxt::sp_core::crypto::AccountId32,
        pub to: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for Transfer {
        const PALLET: &'static str = "Balances";
        const EVENT: &'static str = "Transfer";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A balance was set by root."]
      pub struct BalanceSet {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub free: ::core::primitive::u128,
        pub reserved: ::core::primitive::u128,
      }
      impl ::subxt::Event for BalanceSet {
        const PALLET: &'static str = "Balances";
        const EVENT: &'static str = "BalanceSet";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some balance was reserved (moved from free to reserved)."]
      pub struct Reserved {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for Reserved {
        const PALLET: &'static str = "Balances";
        const EVENT: &'static str = "Reserved";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some balance was unreserved (moved from reserved to free)."]
      pub struct Unreserved {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for Unreserved {
        const PALLET: &'static str = "Balances";
        const EVENT: &'static str = "Unreserved";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some balance was moved from the reserve of the first account to the second account."]
      #[doc = "Final argument indicates the destination balance type."]
      pub struct ReserveRepatriated {
        pub from: ::subxt::sp_core::crypto::AccountId32,
        pub to: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
        pub destination_status: runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
      }
      impl ::subxt::Event for ReserveRepatriated {
        const PALLET: &'static str = "Balances";
        const EVENT: &'static str = "ReserveRepatriated";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some amount was deposited (e.g. for transaction fees)."]
      pub struct Deposit {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for Deposit {
        const PALLET: &'static str = "Balances";
        const EVENT: &'static str = "Deposit";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
      pub struct Withdraw {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for Withdraw {
        const PALLET: &'static str = "Balances";
        const EVENT: &'static str = "Withdraw";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
      pub struct Slashed {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for Slashed {
        const PALLET: &'static str = "Balances";
        const EVENT: &'static str = "Slashed";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct TotalIssuance;
      impl ::subxt::StorageEntry for TotalIssuance {
        const PALLET: &'static str = "Balances";
        const STORAGE: &'static str = "TotalIssuance";
        type Value = ::core::primitive::u128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Account<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Account<'_> {
        const PALLET: &'static str = "Balances";
        const STORAGE: &'static str = "Account";
        type Value = runtime_types::pallet_balances::AccountData<::core::primitive::u128>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct Locks<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Locks<'_> {
        const PALLET: &'static str = "Balances";
        const STORAGE: &'static str = "Locks";
        type Value = runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
          runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct Reserves<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Reserves<'_> {
        const PALLET: &'static str = "Balances";
        const STORAGE: &'static str = "Reserves";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
          runtime_types::pallet_balances::ReserveData<
            [::core::primitive::u8; 8usize],
            ::core::primitive::u128,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct StorageVersion;
      impl ::subxt::StorageEntry for StorageVersion {
        const PALLET: &'static str = "Balances";
        const STORAGE: &'static str = "StorageVersion";
        type Value = runtime_types::pallet_balances::Releases;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The total units issued in the system."]
        pub async fn total_issuance(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<TotalIssuance>()?
          };
          if runtime_storage_hash
            == [
              1u8, 206u8, 252u8, 237u8, 6u8, 30u8, 20u8, 232u8, 164u8, 115u8, 51u8, 156u8, 156u8,
              206u8, 241u8, 187u8, 44u8, 84u8, 25u8, 164u8, 235u8, 20u8, 86u8, 242u8, 124u8, 23u8,
              28u8, 140u8, 26u8, 73u8, 231u8, 51u8,
            ]
          {
            let entry = TotalIssuance;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The Balances pallet example of storing the balance of an account."]
        #[doc = ""]
        #[doc = " # Example"]
        #[doc = ""]
        #[doc = " ```nocompile"]
        #[doc = "  impl pallet_balances::Config for Runtime {"]
        #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
        #[doc = "  }"]
        #[doc = " ```"]
        #[doc = ""]
        #[doc = " You can also store the balance of an account in the `System` pallet."]
        #[doc = ""]
        #[doc = " # Example"]
        #[doc = ""]
        #[doc = " ```nocompile"]
        #[doc = "  impl pallet_balances::Config for Runtime {"]
        #[doc = "   type AccountStore = System"]
        #[doc = "  }"]
        #[doc = " ```"]
        #[doc = ""]
        #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
        #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
        #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
        #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
        pub async fn account(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Account>()?
          };
          if runtime_storage_hash
            == [
              129u8, 169u8, 171u8, 206u8, 229u8, 178u8, 69u8, 118u8, 199u8, 64u8, 254u8, 67u8,
              16u8, 154u8, 160u8, 197u8, 177u8, 161u8, 148u8, 199u8, 78u8, 219u8, 187u8, 83u8,
              99u8, 110u8, 207u8, 252u8, 243u8, 39u8, 46u8, 106u8,
            ]
          {
            let entry = Account(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The Balances pallet example of storing the balance of an account."]
        #[doc = ""]
        #[doc = " # Example"]
        #[doc = ""]
        #[doc = " ```nocompile"]
        #[doc = "  impl pallet_balances::Config for Runtime {"]
        #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
        #[doc = "  }"]
        #[doc = " ```"]
        #[doc = ""]
        #[doc = " You can also store the balance of an account in the `System` pallet."]
        #[doc = ""]
        #[doc = " # Example"]
        #[doc = ""]
        #[doc = " ```nocompile"]
        #[doc = "  impl pallet_balances::Config for Runtime {"]
        #[doc = "   type AccountStore = System"]
        #[doc = "  }"]
        #[doc = " ```"]
        #[doc = ""]
        #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
        #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
        #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
        #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
        pub async fn account_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Account<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Account>()?
          };
          if runtime_storage_hash
            == [
              129u8, 169u8, 171u8, 206u8, 229u8, 178u8, 69u8, 118u8, 199u8, 64u8, 254u8, 67u8,
              16u8, 154u8, 160u8, 197u8, 177u8, 161u8, 148u8, 199u8, 78u8, 219u8, 187u8, 83u8,
              99u8, 110u8, 207u8, 252u8, 243u8, 39u8, 46u8, 106u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Any liquidity locks on some account balances."]
        #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
        pub async fn locks(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
            runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Locks>()?
          };
          if runtime_storage_hash
            == [
              31u8, 76u8, 213u8, 60u8, 86u8, 11u8, 155u8, 151u8, 33u8, 212u8, 74u8, 89u8, 174u8,
              74u8, 195u8, 107u8, 29u8, 163u8, 178u8, 34u8, 209u8, 8u8, 201u8, 237u8, 77u8, 99u8,
              205u8, 212u8, 236u8, 132u8, 2u8, 252u8,
            ]
          {
            let entry = Locks(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Any liquidity locks on some account balances."]
        #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
        pub async fn locks_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Locks<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Locks>()?
          };
          if runtime_storage_hash
            == [
              31u8, 76u8, 213u8, 60u8, 86u8, 11u8, 155u8, 151u8, 33u8, 212u8, 74u8, 89u8, 174u8,
              74u8, 195u8, 107u8, 29u8, 163u8, 178u8, 34u8, 209u8, 8u8, 201u8, 237u8, 77u8, 99u8,
              205u8, 212u8, 236u8, 132u8, 2u8, 252u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Named reserves on some account balances."]
        pub async fn reserves(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            runtime_types::pallet_balances::ReserveData<
              [::core::primitive::u8; 8usize],
              ::core::primitive::u128,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Reserves>()?
          };
          if runtime_storage_hash
            == [
              103u8, 6u8, 69u8, 151u8, 81u8, 40u8, 146u8, 113u8, 56u8, 239u8, 104u8, 31u8, 168u8,
              242u8, 141u8, 121u8, 213u8, 213u8, 114u8, 63u8, 62u8, 47u8, 91u8, 119u8, 57u8, 91u8,
              95u8, 81u8, 19u8, 208u8, 59u8, 146u8,
            ]
          {
            let entry = Reserves(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Named reserves on some account balances."]
        pub async fn reserves_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Reserves<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Reserves>()?
          };
          if runtime_storage_hash
            == [
              103u8, 6u8, 69u8, 151u8, 81u8, 40u8, 146u8, 113u8, 56u8, 239u8, 104u8, 31u8, 168u8,
              242u8, 141u8, 121u8, 213u8, 213u8, 114u8, 63u8, 62u8, 47u8, 91u8, 119u8, 57u8, 91u8,
              95u8, 81u8, 19u8, 208u8, 59u8, 146u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Storage version of the pallet."]
        #[doc = ""]
        #[doc = " This is set to v2.0.0 for new networks."]
        pub async fn storage_version(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<runtime_types::pallet_balances::Releases, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StorageVersion>()?
          };
          if runtime_storage_hash
            == [
              135u8, 96u8, 28u8, 234u8, 124u8, 212u8, 56u8, 140u8, 40u8, 101u8, 235u8, 128u8,
              136u8, 221u8, 182u8, 81u8, 17u8, 9u8, 184u8, 228u8, 174u8, 165u8, 200u8, 162u8,
              214u8, 178u8, 227u8, 72u8, 34u8, 5u8, 173u8, 96u8,
            ]
          {
            let entry = StorageVersion;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The minimum amount required to keep an account open."]
        pub fn existential_deposit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Balances", "ExistentialDeposit")?
            == [
              15u8, 100u8, 185u8, 155u8, 56u8, 183u8, 90u8, 235u8, 164u8, 39u8, 3u8, 79u8, 8u8,
              31u8, 168u8, 189u8, 50u8, 118u8, 179u8, 149u8, 157u8, 211u8, 99u8, 115u8, 54u8,
              186u8, 8u8, 46u8, 201u8, 103u8, 81u8, 208u8,
            ]
          {
            let pallet = metadata.pallet("Balances")?;
            let constant = pallet.constant("ExistentialDeposit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of locks that should exist on an account."]
        #[doc = " Not strictly enforced, but used for weight estimation."]
        pub fn max_locks(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Balances", "MaxLocks")?
            == [
              250u8, 58u8, 19u8, 15u8, 35u8, 113u8, 227u8, 89u8, 39u8, 75u8, 21u8, 108u8, 202u8,
              32u8, 163u8, 167u8, 207u8, 233u8, 69u8, 151u8, 53u8, 164u8, 230u8, 16u8, 14u8, 22u8,
              172u8, 46u8, 36u8, 216u8, 29u8, 1u8,
            ]
          {
            let pallet = metadata.pallet("Balances")?;
            let constant = pallet.constant("MaxLocks")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of named reserves that can exist on an account."]
        pub fn max_reserves(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Balances", "MaxReserves")?
            == [
              24u8, 30u8, 77u8, 89u8, 216u8, 114u8, 140u8, 11u8, 127u8, 252u8, 130u8, 203u8, 4u8,
              55u8, 62u8, 240u8, 65u8, 182u8, 187u8, 189u8, 140u8, 6u8, 177u8, 216u8, 159u8, 108u8,
              18u8, 73u8, 95u8, 67u8, 62u8, 50u8,
            ]
          {
            let pallet = metadata.pallet("Balances")?;
            let constant = pallet.constant("MaxReserves")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod transaction_payment {
    use super::root_mod;
    use super::runtime_types;
    pub mod storage {
      use super::runtime_types;
      pub struct NextFeeMultiplier;
      impl ::subxt::StorageEntry for NextFeeMultiplier {
        const PALLET: &'static str = "TransactionPayment";
        const STORAGE: &'static str = "NextFeeMultiplier";
        type Value = runtime_types::sp_arithmetic::fixed_point::FixedU128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageVersion;
      impl ::subxt::StorageEntry for StorageVersion {
        const PALLET: &'static str = "TransactionPayment";
        const STORAGE: &'static str = "StorageVersion";
        type Value = runtime_types::pallet_transaction_payment::Releases;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        pub async fn next_fee_multiplier(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::fixed_point::FixedU128,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<NextFeeMultiplier>()?
          };
          if runtime_storage_hash
            == [
              232u8, 48u8, 68u8, 202u8, 209u8, 29u8, 249u8, 71u8, 0u8, 84u8, 229u8, 250u8, 176u8,
              203u8, 27u8, 26u8, 34u8, 55u8, 83u8, 183u8, 224u8, 40u8, 62u8, 127u8, 131u8, 88u8,
              128u8, 9u8, 56u8, 178u8, 31u8, 183u8,
            ]
          {
            let entry = NextFeeMultiplier;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        pub async fn storage_version(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_transaction_payment::Releases,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StorageVersion>()?
          };
          if runtime_storage_hash
            == [
              219u8, 243u8, 82u8, 176u8, 65u8, 5u8, 132u8, 114u8, 8u8, 82u8, 176u8, 200u8, 97u8,
              150u8, 177u8, 164u8, 166u8, 11u8, 34u8, 12u8, 12u8, 198u8, 58u8, 191u8, 186u8, 221u8,
              221u8, 119u8, 181u8, 253u8, 154u8, 228u8,
            ]
          {
            let entry = StorageVersion;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
        #[doc = " `priority`"]
        #[doc = ""]
        #[doc = " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later"]
        #[doc = " added to a tip component in regular `priority` calculations."]
        #[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
        #[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
        #[doc = ""]
        #[doc = " ```rust,ignore"]
        #[doc = " // For `Normal`"]
        #[doc = " let priority = priority_calc(tip);"]
        #[doc = ""]
        #[doc = " // For `Operational`"]
        #[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
        #[doc = " let priority = priority_calc(tip + virtual_tip);"]
        #[doc = " ```"]
        #[doc = ""]
        #[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
        #[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
        #[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
        #[doc = " transactions."]
        pub fn operational_fee_multiplier(
          &self,
        ) -> ::core::result::Result<::core::primitive::u8, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("TransactionPayment", "OperationalFeeMultiplier")?
            == [
              161u8, 232u8, 150u8, 43u8, 106u8, 83u8, 56u8, 248u8, 54u8, 123u8, 244u8, 73u8, 5u8,
              49u8, 245u8, 150u8, 70u8, 92u8, 158u8, 207u8, 127u8, 115u8, 211u8, 21u8, 24u8, 136u8,
              89u8, 44u8, 151u8, 211u8, 235u8, 196u8,
            ]
          {
            let pallet = metadata.pallet("TransactionPayment")?;
            let constant = pallet.constant("OperationalFeeMultiplier")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The polynomial that is applied in order to derive fee from weight."]
        pub fn weight_to_fee(
          &self,
        ) -> ::core::result::Result<
          ::std::vec::Vec<
            runtime_types::frame_support::weights::WeightToFeeCoefficient<::core::primitive::u128>,
          >,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("TransactionPayment", "WeightToFee")?
            == [
              199u8, 253u8, 82u8, 206u8, 4u8, 164u8, 139u8, 149u8, 116u8, 179u8, 145u8, 205u8,
              174u8, 60u8, 144u8, 250u8, 154u8, 122u8, 246u8, 127u8, 227u8, 176u8, 97u8, 29u8,
              251u8, 85u8, 213u8, 13u8, 145u8, 37u8, 227u8, 142u8,
            ]
          {
            let pallet = metadata.pallet("TransactionPayment")?;
            let constant = pallet.constant("WeightToFee")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The polynomial that is applied in order to derive fee from length."]
        pub fn length_to_fee(
          &self,
        ) -> ::core::result::Result<
          ::std::vec::Vec<
            runtime_types::frame_support::weights::WeightToFeeCoefficient<::core::primitive::u128>,
          >,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("TransactionPayment", "LengthToFee")?
            == [
              149u8, 219u8, 123u8, 143u8, 114u8, 114u8, 81u8, 168u8, 141u8, 27u8, 130u8, 219u8,
              191u8, 64u8, 183u8, 203u8, 237u8, 177u8, 121u8, 67u8, 38u8, 89u8, 79u8, 93u8, 105u8,
              185u8, 193u8, 229u8, 177u8, 205u8, 173u8, 81u8,
            ]
          {
            let pallet = metadata.pallet("TransactionPayment")?;
            let constant = pallet.constant("LengthToFee")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod authorship {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetUncles {
        pub new_uncles: ::std::vec::Vec<
          runtime_types::sp_runtime::generic::header::Header<
            ::core::primitive::u32,
            runtime_types::sp_runtime::traits::BlakeTwo256,
          >,
        >,
      }
      impl ::subxt::Call for SetUncles {
        const PALLET: &'static str = "Authorship";
        const FUNCTION: &'static str = "set_uncles";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Provide a set of uncles."]
        pub fn set_uncles(
          &self,
          new_uncles: ::std::vec::Vec<
            runtime_types::sp_runtime::generic::header::Header<
              ::core::primitive::u32,
              runtime_types::sp_runtime::traits::BlakeTwo256,
            >,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetUncles, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetUncles>()?
          };
          if runtime_call_hash
            == [
              5u8, 56u8, 71u8, 152u8, 103u8, 232u8, 101u8, 171u8, 200u8, 2u8, 177u8, 102u8, 0u8,
              93u8, 210u8, 90u8, 56u8, 151u8, 5u8, 235u8, 227u8, 197u8, 189u8, 248u8, 2u8, 71u8,
              49u8, 220u8, 212u8, 253u8, 235u8, 67u8,
            ]
          {
            let call = SetUncles { new_uncles };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Uncles;
      impl ::subxt::StorageEntry for Uncles {
        const PALLET: &'static str = "Authorship";
        const STORAGE: &'static str = "Uncles";
        type Value = ::std::vec::Vec<
          runtime_types::pallet_authorship::UncleEntryItem<
            ::core::primitive::u32,
            ::subxt::sp_core::H256,
            ::subxt::sp_core::crypto::AccountId32,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Author;
      impl ::subxt::StorageEntry for Author {
        const PALLET: &'static str = "Authorship";
        const STORAGE: &'static str = "Author";
        type Value = ::subxt::sp_core::crypto::AccountId32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct DidSetUncles;
      impl ::subxt::StorageEntry for DidSetUncles {
        const PALLET: &'static str = "Authorship";
        const STORAGE: &'static str = "DidSetUncles";
        type Value = ::core::primitive::bool;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Uncles"]
        pub async fn uncles(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<
            runtime_types::pallet_authorship::UncleEntryItem<
              ::core::primitive::u32,
              ::subxt::sp_core::H256,
              ::subxt::sp_core::crypto::AccountId32,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Uncles>()?
          };
          if runtime_storage_hash
            == [
              71u8, 135u8, 85u8, 172u8, 221u8, 165u8, 212u8, 2u8, 208u8, 50u8, 9u8, 92u8, 251u8,
              25u8, 194u8, 123u8, 210u8, 4u8, 148u8, 30u8, 20u8, 146u8, 21u8, 210u8, 138u8, 128u8,
              144u8, 152u8, 97u8, 57u8, 205u8, 231u8,
            ]
          {
            let entry = Uncles;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Author of current block."]
        pub async fn author(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Author>()?
          };
          if runtime_storage_hash
            == [
              191u8, 57u8, 3u8, 242u8, 220u8, 123u8, 103u8, 215u8, 149u8, 120u8, 20u8, 139u8,
              146u8, 234u8, 180u8, 105u8, 129u8, 128u8, 114u8, 147u8, 114u8, 236u8, 23u8, 21u8,
              15u8, 250u8, 180u8, 19u8, 177u8, 145u8, 77u8, 228u8,
            ]
          {
            let entry = Author;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Whether uncles were already set in this block."]
        pub async fn did_set_uncles(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::bool, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<DidSetUncles>()?
          };
          if runtime_storage_hash
            == [
              64u8, 3u8, 208u8, 187u8, 50u8, 45u8, 37u8, 88u8, 163u8, 226u8, 37u8, 126u8, 232u8,
              107u8, 156u8, 187u8, 29u8, 15u8, 53u8, 46u8, 28u8, 73u8, 83u8, 123u8, 14u8, 244u8,
              243u8, 43u8, 245u8, 143u8, 15u8, 115u8,
            ]
          {
            let entry = DidSetUncles;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The number of blocks back we should accept uncles."]
        #[doc = " This means that we will deal with uncle-parents that are"]
        #[doc = " `UncleGenerations + 1` before `now`."]
        pub fn uncle_generations(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Authorship", "UncleGenerations")?
            == [
              0u8, 72u8, 57u8, 175u8, 222u8, 143u8, 191u8, 33u8, 163u8, 157u8, 202u8, 83u8, 186u8,
              103u8, 162u8, 103u8, 227u8, 158u8, 239u8, 212u8, 205u8, 193u8, 226u8, 138u8, 5u8,
              220u8, 221u8, 42u8, 7u8, 146u8, 173u8, 205u8,
            ]
          {
            let pallet = metadata.pallet("Authorship")?;
            let constant = pallet.constant("UncleGenerations")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod staking {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Bond {
        pub controller: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub value: ::core::primitive::u128,
        pub payee:
          runtime_types::pallet_staking::RewardDestination<::subxt::sp_core::crypto::AccountId32>,
      }
      impl ::subxt::Call for Bond {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "bond";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct BondExtra {
        #[codec(compact)]
        pub max_additional: ::core::primitive::u128,
      }
      impl ::subxt::Call for BondExtra {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "bond_extra";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Unbond {
        #[codec(compact)]
        pub value: ::core::primitive::u128,
      }
      impl ::subxt::Call for Unbond {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "unbond";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      pub struct WithdrawUnbonded {
        pub num_slashing_spans: ::core::primitive::u32,
      }
      impl ::subxt::Call for WithdrawUnbonded {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "withdraw_unbonded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Validate {
        pub prefs: runtime_types::pallet_staking::ValidatorPrefs,
      }
      impl ::subxt::Call for Validate {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "validate";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Nominate {
        pub targets: ::std::vec::Vec<
          ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        >,
      }
      impl ::subxt::Call for Nominate {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "nominate";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Chill;
      impl ::subxt::Call for Chill {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "chill";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetPayee {
        pub payee:
          runtime_types::pallet_staking::RewardDestination<::subxt::sp_core::crypto::AccountId32>,
      }
      impl ::subxt::Call for SetPayee {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "set_payee";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetController {
        pub controller: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for SetController {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "set_controller";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetValidatorCount {
        #[codec(compact)]
        pub new: ::core::primitive::u32,
      }
      impl ::subxt::Call for SetValidatorCount {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "set_validator_count";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct IncreaseValidatorCount {
        #[codec(compact)]
        pub additional: ::core::primitive::u32,
      }
      impl ::subxt::Call for IncreaseValidatorCount {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "increase_validator_count";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ScaleValidatorCount {
        pub factor: runtime_types::sp_arithmetic::per_things::Percent,
      }
      impl ::subxt::Call for ScaleValidatorCount {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "scale_validator_count";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceNoEras;
      impl ::subxt::Call for ForceNoEras {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "force_no_eras";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceNewEra;
      impl ::subxt::Call for ForceNewEra {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "force_new_era";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetInvulnerables {
        pub invulnerables: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
      }
      impl ::subxt::Call for SetInvulnerables {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "set_invulnerables";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceUnstake {
        pub stash: ::subxt::sp_core::crypto::AccountId32,
        pub num_slashing_spans: ::core::primitive::u32,
      }
      impl ::subxt::Call for ForceUnstake {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "force_unstake";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceNewEraAlways;
      impl ::subxt::Call for ForceNewEraAlways {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "force_new_era_always";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct CancelDeferredSlash {
        pub era: ::core::primitive::u32,
        pub slash_indices: ::std::vec::Vec<::core::primitive::u32>,
      }
      impl ::subxt::Call for CancelDeferredSlash {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "cancel_deferred_slash";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct PayoutStakers {
        pub validator_stash: ::subxt::sp_core::crypto::AccountId32,
        pub era: ::core::primitive::u32,
      }
      impl ::subxt::Call for PayoutStakers {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "payout_stakers";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Rebond {
        #[codec(compact)]
        pub value: ::core::primitive::u128,
      }
      impl ::subxt::Call for Rebond {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "rebond";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetHistoryDepth {
        #[codec(compact)]
        pub new_history_depth: ::core::primitive::u32,
        #[codec(compact)]
        pub era_items_deleted: ::core::primitive::u32,
      }
      impl ::subxt::Call for SetHistoryDepth {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "set_history_depth";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ReapStash {
        pub stash: ::subxt::sp_core::crypto::AccountId32,
        pub num_slashing_spans: ::core::primitive::u32,
      }
      impl ::subxt::Call for ReapStash {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "reap_stash";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Kick {
        pub who: ::std::vec::Vec<
          ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        >,
      }
      impl ::subxt::Call for Kick {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "kick";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetStakingConfigs {
        pub min_nominator_bond:
          runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u128>,
        pub min_validator_bond:
          runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u128>,
        pub max_nominator_count:
          runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u32>,
        pub max_validator_count:
          runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u32>,
        pub chill_threshold: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
          runtime_types::sp_arithmetic::per_things::Percent,
        >,
        pub min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
          runtime_types::sp_arithmetic::per_things::Perbill,
        >,
      }
      impl ::subxt::Call for SetStakingConfigs {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "set_staking_configs";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ChillOther {
        pub controller: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for ChillOther {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "chill_other";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceApplyMinCommission {
        pub validator_stash: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for ForceApplyMinCommission {
        const PALLET: &'static str = "Staking";
        const FUNCTION: &'static str = "force_apply_min_commission";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Take the origin account as a stash and lock up `value` of its balance. `controller` will"]
        #[doc = "be the account that controls it."]
        #[doc = ""]
        #[doc = "`value` must be more than the `minimum_balance` specified by `T::Currency`."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ by the stash account."]
        #[doc = ""]
        #[doc = "Emits `Bonded`."]
        #[doc = "# <weight>"]
        #[doc = "- Independent of the arguments. Moderate complexity."]
        #[doc = "- O(1)."]
        #[doc = "- Three extra DB entries."]
        #[doc = ""]
        #[doc = "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned"]
        #[doc = "unless the `origin` falls below _existential deposit_ and gets removed as dust."]
        #[doc = "------------------"]
        #[doc = "# </weight>"]
        pub fn bond(
          &self,
          controller: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          value: ::core::primitive::u128,
          payee: runtime_types::pallet_staking::RewardDestination<
            ::subxt::sp_core::crypto::AccountId32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Bond, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Bond>()?
          };
          if runtime_call_hash
            == [
              128u8, 109u8, 219u8, 32u8, 105u8, 191u8, 244u8, 153u8, 228u8, 154u8, 89u8, 52u8,
              237u8, 82u8, 0u8, 132u8, 27u8, 71u8, 57u8, 96u8, 172u8, 50u8, 192u8, 163u8, 229u8,
              106u8, 139u8, 28u8, 118u8, 187u8, 83u8, 150u8,
            ]
          {
            let call = Bond {
              controller,
              value,
              payee,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Add some extra amount that have appeared in the stash `free_balance` into the balance up"]
        #[doc = "for staking."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."]
        #[doc = ""]
        #[doc = "Use this if there are additional funds in your stash account that you wish to bond."]
        #[doc = "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose"]
        #[doc = "any limitation on the amount that can be added."]
        #[doc = ""]
        #[doc = "Emits `Bonded`."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Independent of the arguments. Insignificant complexity."]
        #[doc = "- O(1)."]
        #[doc = "# </weight>"]
        pub fn bond_extra(
          &self,
          max_additional: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, BondExtra, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<BondExtra>()?
          };
          if runtime_call_hash
            == [
              170u8, 38u8, 37u8, 71u8, 243u8, 41u8, 24u8, 59u8, 17u8, 229u8, 61u8, 20u8, 130u8,
              167u8, 1u8, 1u8, 158u8, 180u8, 234u8, 65u8, 196u8, 181u8, 232u8, 146u8, 62u8, 90u8,
              194u8, 183u8, 253u8, 142u8, 251u8, 200u8,
            ]
          {
            let call = BondExtra { max_additional };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Schedule a portion of the stash to be unlocked ready for transfer out after the bond"]
        #[doc = "period ends. If this leaves an amount actively bonded less than"]
        #[doc = "T::Currency::minimum_balance(), then it is increased to the full amount."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
        #[doc = ""]
        #[doc = "Once the unlock period is done, you can call `withdraw_unbonded` to actually move"]
        #[doc = "the funds out of management ready for transfer."]
        #[doc = ""]
        #[doc = "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)"]
        #[doc = "can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need"]
        #[doc = "to be called first to remove some of the chunks (if possible)."]
        #[doc = ""]
        #[doc = "If a user encounters the `InsufficientBond` error when calling this extrinsic,"]
        #[doc = "they should call `chill` first in order to free up their bonded funds."]
        #[doc = ""]
        #[doc = "Emits `Unbonded`."]
        #[doc = ""]
        #[doc = "See also [`Call::withdraw_unbonded`]."]
        pub fn unbond(
          &self,
          value: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Unbond, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Unbond>()?
          };
          if runtime_call_hash
            == [
              85u8, 188u8, 141u8, 62u8, 242u8, 15u8, 6u8, 20u8, 96u8, 220u8, 201u8, 163u8, 29u8,
              136u8, 24u8, 4u8, 143u8, 13u8, 22u8, 118u8, 22u8, 212u8, 164u8, 125u8, 200u8, 219u8,
              6u8, 25u8, 174u8, 92u8, 108u8, 89u8,
            ]
          {
            let call = Unbond { value };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove any unlocked chunks from the `unlocking` queue from our management."]
        #[doc = ""]
        #[doc = "This essentially frees up that balance to be used by the stash account to do"]
        #[doc = "whatever it wants."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ by the controller."]
        #[doc = ""]
        #[doc = "Emits `Withdrawn`."]
        #[doc = ""]
        #[doc = "See also [`Call::unbond`]."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Complexity O(S) where S is the number of slashing spans to remove"]
        #[doc = "NOTE: Weight annotation is the kill scenario, we refund otherwise."]
        #[doc = "# </weight>"]
        pub fn withdraw_unbonded(
          &self,
          num_slashing_spans: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, WithdrawUnbonded, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<WithdrawUnbonded>()?
          };
          if runtime_call_hash
            == [
              252u8, 47u8, 185u8, 86u8, 179u8, 203u8, 20u8, 5u8, 88u8, 252u8, 212u8, 173u8, 20u8,
              202u8, 206u8, 56u8, 10u8, 186u8, 124u8, 221u8, 42u8, 61u8, 202u8, 110u8, 233u8, 40u8,
              210u8, 135u8, 204u8, 110u8, 133u8, 123u8,
            ]
          {
            let call = WithdrawUnbonded { num_slashing_spans };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Declare the desire to validate for the origin controller."]
        #[doc = ""]
        #[doc = "Effects will be felt at the beginning of the next era."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
        pub fn validate(
          &self,
          prefs: runtime_types::pallet_staking::ValidatorPrefs,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Validate, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Validate>()?
          };
          if runtime_call_hash
            == [
              138u8, 13u8, 146u8, 216u8, 4u8, 27u8, 20u8, 159u8, 148u8, 25u8, 169u8, 229u8, 145u8,
              2u8, 251u8, 58u8, 13u8, 128u8, 20u8, 22u8, 194u8, 11u8, 13u8, 65u8, 50u8, 51u8,
              158u8, 239u8, 45u8, 90u8, 6u8, 37u8,
            ]
          {
            let call = Validate { prefs };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Declare the desire to nominate `targets` for the origin controller."]
        #[doc = ""]
        #[doc = "Effects will be felt at the beginning of the next era."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- The transaction's complexity is proportional to the size of `targets` (N)"]
        #[doc = "which is capped at CompactAssignments::LIMIT (T::MaxNominations)."]
        #[doc = "- Both the reads and writes follow a similar pattern."]
        #[doc = "# </weight>"]
        pub fn nominate(
          &self,
          targets: ::std::vec::Vec<
            ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Nominate, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Nominate>()?
          };
          if runtime_call_hash
            == [
              253u8, 19u8, 234u8, 31u8, 124u8, 216u8, 107u8, 102u8, 143u8, 144u8, 73u8, 45u8,
              207u8, 169u8, 48u8, 144u8, 169u8, 97u8, 81u8, 110u8, 216u8, 107u8, 198u8, 93u8,
              180u8, 189u8, 44u8, 222u8, 219u8, 15u8, 210u8, 84u8,
            ]
          {
            let call = Nominate { targets };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Declare no desire to either validate or nominate."]
        #[doc = ""]
        #[doc = "Effects will be felt at the beginning of the next era."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Independent of the arguments. Insignificant complexity."]
        #[doc = "- Contains one read."]
        #[doc = "- Writes are limited to the `origin` account key."]
        #[doc = "# </weight>"]
        pub fn chill(
          &self,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Chill, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Chill>()?
          };
          if runtime_call_hash
            == [
              94u8, 20u8, 196u8, 31u8, 220u8, 125u8, 115u8, 167u8, 140u8, 3u8, 20u8, 132u8, 81u8,
              120u8, 215u8, 166u8, 230u8, 56u8, 16u8, 222u8, 31u8, 153u8, 120u8, 62u8, 153u8, 67u8,
              220u8, 239u8, 11u8, 234u8, 127u8, 122u8,
            ]
          {
            let call = Chill {};
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "(Re-)set the payment target for a controller."]
        #[doc = ""]
        #[doc = "Effects will be felt instantly (as soon as this function is completed successfully)."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Independent of the arguments. Insignificant complexity."]
        #[doc = "- Contains a limited number of reads."]
        #[doc = "- Writes are limited to the `origin` account key."]
        #[doc = "---------"]
        #[doc = "- Weight: O(1)"]
        #[doc = "- DB Weight:"]
        #[doc = "    - Read: Ledger"]
        #[doc = "    - Write: Payee"]
        #[doc = "# </weight>"]
        pub fn set_payee(
          &self,
          payee: runtime_types::pallet_staking::RewardDestination<
            ::subxt::sp_core::crypto::AccountId32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetPayee, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetPayee>()?
          };
          if runtime_call_hash
            == [
              185u8, 62u8, 154u8, 65u8, 135u8, 104u8, 38u8, 171u8, 237u8, 16u8, 169u8, 38u8, 53u8,
              161u8, 170u8, 232u8, 249u8, 185u8, 24u8, 155u8, 54u8, 88u8, 96u8, 147u8, 171u8, 85u8,
              216u8, 240u8, 52u8, 158u8, 134u8, 72u8,
            ]
          {
            let call = SetPayee { payee };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "(Re-)set the controller of a stash."]
        #[doc = ""]
        #[doc = "Effects will be felt instantly (as soon as this function is completed successfully)."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Independent of the arguments. Insignificant complexity."]
        #[doc = "- Contains a limited number of reads."]
        #[doc = "- Writes are limited to the `origin` account key."]
        #[doc = "----------"]
        #[doc = "Weight: O(1)"]
        #[doc = "DB Weight:"]
        #[doc = "- Read: Bonded, Ledger New Controller, Ledger Old Controller"]
        #[doc = "- Write: Bonded, Ledger New Controller, Ledger Old Controller"]
        #[doc = "# </weight>"]
        pub fn set_controller(
          &self,
          controller: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetController, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetController>()?
          };
          if runtime_call_hash
            == [
              174u8, 112u8, 40u8, 87u8, 122u8, 45u8, 254u8, 162u8, 27u8, 128u8, 104u8, 204u8, 5u8,
              51u8, 52u8, 195u8, 40u8, 124u8, 45u8, 63u8, 252u8, 101u8, 56u8, 100u8, 122u8, 231u8,
              128u8, 31u8, 146u8, 111u8, 94u8, 3u8,
            ]
          {
            let call = SetController { controller };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Sets the ideal number of validators."]
        #[doc = ""]
        #[doc = "The dispatch origin must be Root."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Weight: O(1)"]
        #[doc = "Write: Validator Count"]
        #[doc = "# </weight>"]
        pub fn set_validator_count(
          &self,
          new: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            SetValidatorCount,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetValidatorCount>()?
          };
          if runtime_call_hash
            == [
              181u8, 82u8, 21u8, 239u8, 81u8, 194u8, 166u8, 66u8, 55u8, 156u8, 68u8, 22u8, 76u8,
              251u8, 241u8, 113u8, 168u8, 8u8, 193u8, 125u8, 112u8, 82u8, 200u8, 139u8, 55u8,
              139u8, 22u8, 35u8, 171u8, 124u8, 112u8, 52u8,
            ]
          {
            let call = SetValidatorCount { new };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Increments the ideal number of validators."]
        #[doc = ""]
        #[doc = "The dispatch origin must be Root."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Same as [`Self::set_validator_count`]."]
        #[doc = "# </weight>"]
        pub fn increase_validator_count(
          &self,
          additional: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            IncreaseValidatorCount,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<IncreaseValidatorCount>()?
          };
          if runtime_call_hash
            == [
              219u8, 143u8, 69u8, 205u8, 182u8, 155u8, 101u8, 39u8, 59u8, 214u8, 81u8, 47u8, 247u8,
              54u8, 106u8, 92u8, 183u8, 42u8, 30u8, 57u8, 28u8, 136u8, 13u8, 13u8, 170u8, 101u8,
              216u8, 234u8, 194u8, 90u8, 248u8, 234u8,
            ]
          {
            let call = IncreaseValidatorCount { additional };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Scale up the ideal number of validators by a factor."]
        #[doc = ""]
        #[doc = "The dispatch origin must be Root."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Same as [`Self::set_validator_count`]."]
        #[doc = "# </weight>"]
        pub fn scale_validator_count(
          &self,
          factor: runtime_types::sp_arithmetic::per_things::Percent,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ScaleValidatorCount,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ScaleValidatorCount>()?
          };
          if runtime_call_hash
            == [
              170u8, 156u8, 101u8, 109u8, 117u8, 199u8, 38u8, 157u8, 132u8, 210u8, 54u8, 66u8,
              251u8, 10u8, 123u8, 120u8, 237u8, 31u8, 206u8, 176u8, 224u8, 112u8, 82u8, 70u8,
              152u8, 6u8, 166u8, 118u8, 10u8, 172u8, 254u8, 148u8,
            ]
          {
            let call = ScaleValidatorCount { factor };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Force there to be no new eras indefinitely."]
        #[doc = ""]
        #[doc = "The dispatch origin must be Root."]
        #[doc = ""]
        #[doc = "# Warning"]
        #[doc = ""]
        #[doc = "The election process starts multiple blocks before the end of the era."]
        #[doc = "Thus the election process may be ongoing when this is called. In this case the"]
        #[doc = "election will continue until the next era is triggered."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- No arguments."]
        #[doc = "- Weight: O(1)"]
        #[doc = "- Write: ForceEra"]
        #[doc = "# </weight>"]
        pub fn force_no_eras(
          &self,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ForceNoEras, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceNoEras>()?
          };
          if runtime_call_hash
            == [
              16u8, 81u8, 207u8, 168u8, 23u8, 236u8, 11u8, 75u8, 141u8, 107u8, 92u8, 2u8, 53u8,
              111u8, 252u8, 116u8, 91u8, 120u8, 75u8, 24u8, 125u8, 53u8, 9u8, 28u8, 242u8, 87u8,
              245u8, 55u8, 40u8, 103u8, 151u8, 178u8,
            ]
          {
            let call = ForceNoEras {};
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Force there to be a new era at the end of the next session. After this, it will be"]
        #[doc = "reset to normal (non-forced) behaviour."]
        #[doc = ""]
        #[doc = "The dispatch origin must be Root."]
        #[doc = ""]
        #[doc = "# Warning"]
        #[doc = ""]
        #[doc = "The election process starts multiple blocks before the end of the era."]
        #[doc = "If this is called just before a new era is triggered, the election process may not"]
        #[doc = "have enough blocks to get a result."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- No arguments."]
        #[doc = "- Weight: O(1)"]
        #[doc = "- Write ForceEra"]
        #[doc = "# </weight>"]
        pub fn force_new_era(
          &self,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ForceNewEra, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceNewEra>()?
          };
          if runtime_call_hash
            == [
              230u8, 242u8, 169u8, 196u8, 78u8, 145u8, 24u8, 191u8, 113u8, 68u8, 5u8, 138u8, 48u8,
              51u8, 109u8, 126u8, 73u8, 136u8, 162u8, 158u8, 174u8, 201u8, 213u8, 230u8, 215u8,
              44u8, 200u8, 32u8, 75u8, 27u8, 23u8, 254u8,
            ]
          {
            let call = ForceNewEra {};
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set the validators who cannot be slashed (if any)."]
        #[doc = ""]
        #[doc = "The dispatch origin must be Root."]
        pub fn set_invulnerables(
          &self,
          invulnerables: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetInvulnerables, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetInvulnerables>()?
          };
          if runtime_call_hash
            == [
              0u8, 119u8, 27u8, 243u8, 238u8, 65u8, 133u8, 89u8, 210u8, 202u8, 154u8, 243u8, 168u8,
              158u8, 9u8, 147u8, 146u8, 215u8, 172u8, 28u8, 171u8, 183u8, 112u8, 42u8, 245u8,
              232u8, 238u8, 94u8, 205u8, 46u8, 0u8, 20u8,
            ]
          {
            let call = SetInvulnerables { invulnerables };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Force a current staker to become completely unstaked, immediately."]
        #[doc = ""]
        #[doc = "The dispatch origin must be Root."]
        pub fn force_unstake(
          &self,
          stash: ::subxt::sp_core::crypto::AccountId32,
          num_slashing_spans: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ForceUnstake, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceUnstake>()?
          };
          if runtime_call_hash
            == [
              254u8, 115u8, 250u8, 15u8, 235u8, 119u8, 2u8, 131u8, 237u8, 144u8, 247u8, 66u8,
              150u8, 92u8, 12u8, 112u8, 137u8, 195u8, 246u8, 178u8, 129u8, 64u8, 214u8, 4u8, 183u8,
              18u8, 94u8, 104u8, 157u8, 174u8, 231u8, 1u8,
            ]
          {
            let call = ForceUnstake {
              stash,
              num_slashing_spans,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Force there to be a new era at the end of sessions indefinitely."]
        #[doc = ""]
        #[doc = "The dispatch origin must be Root."]
        #[doc = ""]
        #[doc = "# Warning"]
        #[doc = ""]
        #[doc = "The election process starts multiple blocks before the end of the era."]
        #[doc = "If this is called just before a new era is triggered, the election process may not"]
        #[doc = "have enough blocks to get a result."]
        pub fn force_new_era_always(
          &self,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ForceNewEraAlways,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceNewEraAlways>()?
          };
          if runtime_call_hash
            == [
              179u8, 118u8, 189u8, 54u8, 248u8, 141u8, 207u8, 142u8, 80u8, 37u8, 241u8, 185u8,
              138u8, 254u8, 117u8, 147u8, 225u8, 118u8, 34u8, 177u8, 197u8, 158u8, 8u8, 82u8,
              202u8, 108u8, 208u8, 26u8, 64u8, 33u8, 74u8, 43u8,
            ]
          {
            let call = ForceNewEraAlways {};
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Cancel enactment of a deferred slash."]
        #[doc = ""]
        #[doc = "Can be called by the `T::SlashCancelOrigin`."]
        #[doc = ""]
        #[doc = "Parameters: era and indices of the slashes for that era to kill."]
        pub fn cancel_deferred_slash(
          &self,
          era: ::core::primitive::u32,
          slash_indices: ::std::vec::Vec<::core::primitive::u32>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            CancelDeferredSlash,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CancelDeferredSlash>()?
          };
          if runtime_call_hash
            == [
              217u8, 175u8, 246u8, 108u8, 78u8, 134u8, 98u8, 49u8, 178u8, 209u8, 98u8, 178u8, 52u8,
              242u8, 173u8, 135u8, 171u8, 70u8, 129u8, 239u8, 62u8, 150u8, 84u8, 142u8, 243u8,
              193u8, 179u8, 249u8, 114u8, 231u8, 8u8, 252u8,
            ]
          {
            let call = CancelDeferredSlash { era, slash_indices };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Pay out all the stakers behind a single validator for a single era."]
        #[doc = ""]
        #[doc = "- `validator_stash` is the stash account of the validator. Their nominators, up to"]
        #[doc = "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards."]
        #[doc = "- `era` may be any era between `[current_era - history_depth; current_era]`."]
        #[doc = ""]
        #[doc = "The origin of this call must be _Signed_. Any account can call this function, even if"]
        #[doc = "it is not one of the stakers."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Time complexity: at most O(MaxNominatorRewardedPerValidator)."]
        #[doc = "- Contains a limited number of reads and writes."]
        #[doc = "-----------"]
        #[doc = "N is the Number of payouts for the validator (including the validator)"]
        #[doc = "Weight:"]
        #[doc = "- Reward Destination Staked: O(N)"]
        #[doc = "- Reward Destination Controller (Creating): O(N)"]
        #[doc = ""]
        #[doc = "  NOTE: weights are assuming that payouts are made to alive stash account (Staked)."]
        #[doc = "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here."]
        #[doc = "# </weight>"]
        pub fn payout_stakers(
          &self,
          validator_stash: ::subxt::sp_core::crypto::AccountId32,
          era: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, PayoutStakers, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<PayoutStakers>()?
          };
          if runtime_call_hash
            == [
              235u8, 65u8, 65u8, 249u8, 162u8, 235u8, 127u8, 48u8, 216u8, 51u8, 252u8, 111u8,
              186u8, 191u8, 174u8, 245u8, 144u8, 77u8, 135u8, 124u8, 205u8, 160u8, 148u8, 130u8,
              81u8, 213u8, 195u8, 105u8, 21u8, 65u8, 186u8, 157u8,
            ]
          {
            let call = PayoutStakers {
              validator_stash,
              era,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Rebond a portion of the stash scheduled to be unlocked."]
        #[doc = ""]
        #[doc = "The dispatch origin must be signed by the controller."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Time complexity: O(L), where L is unlocking chunks"]
        #[doc = "- Bounded by `MaxUnlockingChunks`."]
        #[doc = "- Storage changes: Can't increase storage, only decrease it."]
        #[doc = "# </weight>"]
        pub fn rebond(
          &self,
          value: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Rebond, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Rebond>()?
          };
          if runtime_call_hash
            == [
              138u8, 156u8, 164u8, 170u8, 178u8, 236u8, 221u8, 242u8, 157u8, 176u8, 173u8, 145u8,
              254u8, 94u8, 158u8, 27u8, 138u8, 103u8, 116u8, 31u8, 41u8, 106u8, 199u8, 180u8,
              233u8, 172u8, 38u8, 7u8, 76u8, 29u8, 5u8, 225u8,
            ]
          {
            let call = Rebond { value };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set `HistoryDepth` value. This function will delete any history information"]
        #[doc = "when `HistoryDepth` is reduced."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `new_history_depth`: The new history depth you would like to set."]
        #[doc = "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This"]
        #[doc = "  should report all the storage items that will be deleted by clearing old era history."]
        #[doc = "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an"]
        #[doc = "  accurate number."]
        #[doc = ""]
        #[doc = "Origin must be root."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- E: Number of history depths removed, i.e. 10 -> 7 = 3"]
        #[doc = "- Weight: O(E)"]
        #[doc = "- DB Weight:"]
        #[doc = "    - Reads: Current Era, History Depth"]
        #[doc = "    - Writes: History Depth"]
        #[doc = "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs"]
        #[doc = "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,"]
        #[doc = "      ErasStartSessionIndex"]
        #[doc = "# </weight>"]
        pub fn set_history_depth(
          &self,
          new_history_depth: ::core::primitive::u32,
          era_items_deleted: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetHistoryDepth, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetHistoryDepth>()?
          };
          if runtime_call_hash
            == [
              128u8, 149u8, 139u8, 192u8, 213u8, 239u8, 248u8, 215u8, 57u8, 145u8, 177u8, 225u8,
              43u8, 214u8, 228u8, 14u8, 213u8, 181u8, 18u8, 40u8, 242u8, 1u8, 210u8, 87u8, 143u8,
              78u8, 0u8, 23u8, 145u8, 46u8, 210u8, 168u8,
            ]
          {
            let call = SetHistoryDepth {
              new_history_depth,
              era_items_deleted,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove all data structures concerning a staker/stash once it is at a state where it can"]
        #[doc = "be considered `dust` in the staking system. The requirements are:"]
        #[doc = ""]
        #[doc = "1. the `total_balance` of the stash is below existential deposit."]
        #[doc = "2. or, the `ledger.total` of the stash is below existential deposit."]
        #[doc = ""]
        #[doc = "The former can happen in cases like a slash; the latter when a fully unbonded account"]
        #[doc = "is still receiving staking rewards in `RewardDestination::Staked`."]
        #[doc = ""]
        #[doc = "It can be called by anyone, as long as `stash` meets the above requirements."]
        #[doc = ""]
        #[doc = "Refunds the transaction fees upon successful execution."]
        pub fn reap_stash(
          &self,
          stash: ::subxt::sp_core::crypto::AccountId32,
          num_slashing_spans: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ReapStash, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ReapStash>()?
          };
          if runtime_call_hash
            == [
              84u8, 192u8, 207u8, 193u8, 133u8, 53u8, 93u8, 148u8, 153u8, 112u8, 54u8, 145u8, 68u8,
              195u8, 42u8, 158u8, 17u8, 230u8, 197u8, 218u8, 179u8, 101u8, 237u8, 105u8, 17u8,
              232u8, 125u8, 163u8, 209u8, 134u8, 3u8, 248u8,
            ]
          {
            let call = ReapStash {
              stash,
              num_slashing_spans,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove the given nominations from the calling validator."]
        #[doc = ""]
        #[doc = "Effects will be felt at the beginning of the next era."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
        #[doc = ""]
        #[doc = "- `who`: A list of nominator stash accounts who are nominating this validator which"]
        #[doc = "  should no longer be nominating this validator."]
        #[doc = ""]
        #[doc = "Note: Making this call only makes sense if you first set the validator preferences to"]
        #[doc = "block any further nominations."]
        pub fn kick(
          &self,
          who: ::std::vec::Vec<
            ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Kick, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Kick>()?
          };
          if runtime_call_hash
            == [
              61u8, 203u8, 76u8, 57u8, 31u8, 73u8, 253u8, 126u8, 233u8, 206u8, 87u8, 168u8, 144u8,
              207u8, 47u8, 108u8, 147u8, 227u8, 50u8, 217u8, 58u8, 195u8, 245u8, 193u8, 207u8,
              227u8, 26u8, 227u8, 181u8, 214u8, 166u8, 101u8,
            ]
          {
            let call = Kick { who };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Update the various staking configurations ."]
        #[doc = ""]
        #[doc = "* `min_nominator_bond`: The minimum active bond needed to be a nominator."]
        #[doc = "* `min_validator_bond`: The minimum active bond needed to be a validator."]
        #[doc = "* `max_nominator_count`: The max number of users who can be a nominator at once. When"]
        #[doc = "  set to `None`, no limit is enforced."]
        #[doc = "* `max_validator_count`: The max number of users who can be a validator at once. When"]
        #[doc = "  set to `None`, no limit is enforced."]
        #[doc = "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which"]
        #[doc = "  should be filled in order for the `chill_other` transaction to work."]
        #[doc = "* `min_commission`: The minimum amount of commission that each validators must maintain."]
        #[doc = "  This is checked only upon calling `validate`. Existing validators are not affected."]
        #[doc = ""]
        #[doc = "Origin must be Root to call this function."]
        #[doc = ""]
        #[doc = "NOTE: Existing nominators and validators will not be affected by this update."]
        #[doc = "to kick people under the new limits, `chill_other` should be called."]
        pub fn set_staking_configs(
          &self,
          min_nominator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
            ::core::primitive::u128,
          >,
          min_validator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
            ::core::primitive::u128,
          >,
          max_nominator_count: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
            ::core::primitive::u32,
          >,
          max_validator_count: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
            ::core::primitive::u32,
          >,
          chill_threshold: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
            runtime_types::sp_arithmetic::per_things::Percent,
          >,
          min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
            runtime_types::sp_arithmetic::per_things::Perbill,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            SetStakingConfigs,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetStakingConfigs>()?
          };
          if runtime_call_hash
            == [
              249u8, 192u8, 107u8, 126u8, 200u8, 50u8, 63u8, 120u8, 116u8, 53u8, 183u8, 80u8,
              134u8, 135u8, 49u8, 112u8, 232u8, 140u8, 177u8, 175u8, 136u8, 220u8, 209u8, 179u8,
              219u8, 110u8, 19u8, 165u8, 191u8, 173u8, 65u8, 13u8,
            ]
          {
            let call = SetStakingConfigs {
              min_nominator_bond,
              min_validator_bond,
              max_nominator_count,
              max_validator_count,
              chill_threshold,
              min_commission,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Declare a `controller` to stop participating as either a validator or nominator."]
        #[doc = ""]
        #[doc = "Effects will be felt at the beginning of the next era."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_, but can be called by anyone."]
        #[doc = ""]
        #[doc = "If the caller is the same as the controller being targeted, then no further checks are"]
        #[doc = "enforced, and this function behaves just like `chill`."]
        #[doc = ""]
        #[doc = "If the caller is different than the controller being targeted, the following conditions"]
        #[doc = "must be met:"]
        #[doc = ""]
        #[doc = "* `controller` must belong to a nominator who has become non-decodable,"]
        #[doc = ""]
        #[doc = "Or:"]
        #[doc = ""]
        #[doc = "* A `ChillThreshold` must be set and checked which defines how close to the max"]
        #[doc = "  nominators or validators we must reach before users can start chilling one-another."]
        #[doc = "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine"]
        #[doc = "  how close we are to the threshold."]
        #[doc = "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines"]
        #[doc = "  if this is a person that should be chilled because they have not met the threshold"]
        #[doc = "  bond required."]
        #[doc = ""]
        #[doc = "This can be helpful if bond requirements are updated, and we need to remove old users"]
        #[doc = "who do not satisfy these requirements."]
        pub fn chill_other(
          &self,
          controller: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ChillOther, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ChillOther>()?
          };
          if runtime_call_hash
            == [
              219u8, 114u8, 146u8, 43u8, 175u8, 216u8, 70u8, 148u8, 137u8, 192u8, 77u8, 247u8,
              134u8, 80u8, 188u8, 100u8, 79u8, 141u8, 32u8, 94u8, 15u8, 178u8, 159u8, 233u8, 235u8,
              6u8, 243u8, 253u8, 22u8, 145u8, 146u8, 219u8,
            ]
          {
            let call = ChillOther { controller };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Force a validator to have at least the minimum commission. This will not affect a"]
        #[doc = "validator who already has a commission greater than or equal to the minimum. Any account"]
        #[doc = "can call this."]
        pub fn force_apply_min_commission(
          &self,
          validator_stash: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ForceApplyMinCommission,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceApplyMinCommission>()?
          };
          if runtime_call_hash
            == [
              8u8, 57u8, 61u8, 141u8, 175u8, 100u8, 174u8, 161u8, 236u8, 2u8, 133u8, 169u8, 249u8,
              168u8, 236u8, 188u8, 168u8, 221u8, 88u8, 148u8, 95u8, 24u8, 214u8, 206u8, 165u8,
              170u8, 200u8, 134u8, 38u8, 174u8, 187u8, 119u8,
            ]
          {
            let call = ForceApplyMinCommission { validator_stash };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_staking::pallet::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The era payout has been set; the first balance is the validator-payout; the second is"]
      #[doc = "the remainder from the maximum amount of reward."]
      #[doc = "\\[era_index, validator_payout, remainder\\]"]
      pub struct EraPaid(
        pub ::core::primitive::u32,
        pub ::core::primitive::u128,
        pub ::core::primitive::u128,
      );
      impl ::subxt::Event for EraPaid {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "EraPaid";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The nominator has been rewarded by this amount. \\[stash, amount\\]"]
      pub struct Rewarded(
        pub ::subxt::sp_core::crypto::AccountId32,
        pub ::core::primitive::u128,
      );
      impl ::subxt::Event for Rewarded {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "Rewarded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "One validator (and its nominators) has been slashed by the given amount."]
      #[doc = "\\[validator, amount\\]"]
      pub struct Slashed(
        pub ::subxt::sp_core::crypto::AccountId32,
        pub ::core::primitive::u128,
      );
      impl ::subxt::Event for Slashed {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "Slashed";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "An old slashing report from a prior era was discarded because it could"]
      #[doc = "not be processed. \\[session_index\\]"]
      pub struct OldSlashingReportDiscarded(pub ::core::primitive::u32);
      impl ::subxt::Event for OldSlashingReportDiscarded {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "OldSlashingReportDiscarded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A new set of stakers was elected."]
      pub struct StakersElected;
      impl ::subxt::Event for StakersElected {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "StakersElected";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An account has bonded this amount. \\[stash, amount\\]"]
      #[doc = ""]
      #[doc = "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,"]
      #[doc = "it will not be emitted for staking rewards when they are added to stake."]
      pub struct Bonded(
        pub ::subxt::sp_core::crypto::AccountId32,
        pub ::core::primitive::u128,
      );
      impl ::subxt::Event for Bonded {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "Bonded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An account has unbonded this amount. \\[stash, amount\\]"]
      pub struct Unbonded(
        pub ::subxt::sp_core::crypto::AccountId32,
        pub ::core::primitive::u128,
      );
      impl ::subxt::Event for Unbonded {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "Unbonded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`"]
      #[doc = "from the unlocking queue. \\[stash, amount\\]"]
      pub struct Withdrawn(
        pub ::subxt::sp_core::crypto::AccountId32,
        pub ::core::primitive::u128,
      );
      impl ::subxt::Event for Withdrawn {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "Withdrawn";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A nominator has been kicked from a validator. \\[nominator, stash\\]"]
      pub struct Kicked(
        pub ::subxt::sp_core::crypto::AccountId32,
        pub ::subxt::sp_core::crypto::AccountId32,
      );
      impl ::subxt::Event for Kicked {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "Kicked";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The election failed. No new era is planned."]
      pub struct StakingElectionFailed;
      impl ::subxt::Event for StakingElectionFailed {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "StakingElectionFailed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An account has stopped participating as either a validator or nominator."]
      #[doc = "\\[stash\\]"]
      pub struct Chilled(pub ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::Event for Chilled {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "Chilled";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"]
      pub struct PayoutStarted(
        pub ::core::primitive::u32,
        pub ::subxt::sp_core::crypto::AccountId32,
      );
      impl ::subxt::Event for PayoutStarted {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "PayoutStarted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A validator has set their preferences."]
      pub struct ValidatorPrefsSet(
        pub ::subxt::sp_core::crypto::AccountId32,
        pub runtime_types::pallet_staking::ValidatorPrefs,
      );
      impl ::subxt::Event for ValidatorPrefsSet {
        const PALLET: &'static str = "Staking";
        const EVENT: &'static str = "ValidatorPrefsSet";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct HistoryDepth;
      impl ::subxt::StorageEntry for HistoryDepth {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "HistoryDepth";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ValidatorCount;
      impl ::subxt::StorageEntry for ValidatorCount {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ValidatorCount";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct MinimumValidatorCount;
      impl ::subxt::StorageEntry for MinimumValidatorCount {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "MinimumValidatorCount";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Invulnerables;
      impl ::subxt::StorageEntry for Invulnerables {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "Invulnerables";
        type Value = ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Bonded<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Bonded<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "Bonded";
        type Value = ::subxt::sp_core::crypto::AccountId32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct MinNominatorBond;
      impl ::subxt::StorageEntry for MinNominatorBond {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "MinNominatorBond";
        type Value = ::core::primitive::u128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct MinValidatorBond;
      impl ::subxt::StorageEntry for MinValidatorBond {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "MinValidatorBond";
        type Value = ::core::primitive::u128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct MinCommission;
      impl ::subxt::StorageEntry for MinCommission {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "MinCommission";
        type Value = runtime_types::sp_arithmetic::per_things::Perbill;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Ledger<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Ledger<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "Ledger";
        type Value = runtime_types::pallet_staking::StakingLedger;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct Payee<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Payee<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "Payee";
        type Value =
          runtime_types::pallet_staking::RewardDestination<::subxt::sp_core::crypto::AccountId32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct Validators<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Validators<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "Validators";
        type Value = runtime_types::pallet_staking::ValidatorPrefs;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct CounterForValidators;
      impl ::subxt::StorageEntry for CounterForValidators {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "CounterForValidators";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct MaxValidatorsCount;
      impl ::subxt::StorageEntry for MaxValidatorsCount {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "MaxValidatorsCount";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Nominators<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Nominators<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "Nominators";
        type Value = runtime_types::pallet_staking::Nominations;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct CounterForNominators;
      impl ::subxt::StorageEntry for CounterForNominators {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "CounterForNominators";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct MaxNominatorsCount;
      impl ::subxt::StorageEntry for MaxNominatorsCount {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "MaxNominatorsCount";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct CurrentEra;
      impl ::subxt::StorageEntry for CurrentEra {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "CurrentEra";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ActiveEra;
      impl ::subxt::StorageEntry for ActiveEra {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ActiveEra";
        type Value = runtime_types::pallet_staking::ActiveEraInfo;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ErasStartSessionIndex<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for ErasStartSessionIndex<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ErasStartSessionIndex";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct ErasStakers<'a>(
        pub &'a ::core::primitive::u32,
        pub &'a ::subxt::sp_core::crypto::AccountId32,
      );
      impl ::subxt::StorageEntry for ErasStakers<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ErasStakers";
        type Value = runtime_types::pallet_staking::Exposure<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
          ])
        }
      }
      pub struct ErasStakersClipped<'a>(
        pub &'a ::core::primitive::u32,
        pub &'a ::subxt::sp_core::crypto::AccountId32,
      );
      impl ::subxt::StorageEntry for ErasStakersClipped<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ErasStakersClipped";
        type Value = runtime_types::pallet_staking::Exposure<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
          ])
        }
      }
      pub struct ErasValidatorPrefs<'a>(
        pub &'a ::core::primitive::u32,
        pub &'a ::subxt::sp_core::crypto::AccountId32,
      );
      impl ::subxt::StorageEntry for ErasValidatorPrefs<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ErasValidatorPrefs";
        type Value = runtime_types::pallet_staking::ValidatorPrefs;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
          ])
        }
      }
      pub struct ErasValidatorReward<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for ErasValidatorReward<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ErasValidatorReward";
        type Value = ::core::primitive::u128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct ErasRewardPoints<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for ErasRewardPoints<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ErasRewardPoints";
        type Value =
          runtime_types::pallet_staking::EraRewardPoints<::subxt::sp_core::crypto::AccountId32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct ErasTotalStake<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for ErasTotalStake<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ErasTotalStake";
        type Value = ::core::primitive::u128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct ForceEra;
      impl ::subxt::StorageEntry for ForceEra {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ForceEra";
        type Value = runtime_types::pallet_staking::Forcing;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct SlashRewardFraction;
      impl ::subxt::StorageEntry for SlashRewardFraction {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "SlashRewardFraction";
        type Value = runtime_types::sp_arithmetic::per_things::Perbill;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct CanceledSlashPayout;
      impl ::subxt::StorageEntry for CanceledSlashPayout {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "CanceledSlashPayout";
        type Value = ::core::primitive::u128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct UnappliedSlashes<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for UnappliedSlashes<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "UnappliedSlashes";
        type Value = ::std::vec::Vec<
          runtime_types::pallet_staking::UnappliedSlash<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u128,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct BondedEras;
      impl ::subxt::StorageEntry for BondedEras {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "BondedEras";
        type Value = ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ValidatorSlashInEra<'a>(
        pub &'a ::core::primitive::u32,
        pub &'a ::subxt::sp_core::crypto::AccountId32,
      );
      impl ::subxt::StorageEntry for ValidatorSlashInEra<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ValidatorSlashInEra";
        type Value = (
          runtime_types::sp_arithmetic::per_things::Perbill,
          ::core::primitive::u128,
        );
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
          ])
        }
      }
      pub struct NominatorSlashInEra<'a>(
        pub &'a ::core::primitive::u32,
        pub &'a ::subxt::sp_core::crypto::AccountId32,
      );
      impl ::subxt::StorageEntry for NominatorSlashInEra<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "NominatorSlashInEra";
        type Value = ::core::primitive::u128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
          ])
        }
      }
      pub struct SlashingSpans<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for SlashingSpans<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "SlashingSpans";
        type Value = runtime_types::pallet_staking::slashing::SlashingSpans;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct SpanSlash<'a>(
        pub &'a ::subxt::sp_core::crypto::AccountId32,
        pub &'a ::core::primitive::u32,
      );
      impl ::subxt::StorageEntry for SpanSlash<'_> {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "SpanSlash";
        type Value = runtime_types::pallet_staking::slashing::SpanRecord<::core::primitive::u128>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &(&self.0, &self.1),
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct EarliestUnappliedSlash;
      impl ::subxt::StorageEntry for EarliestUnappliedSlash {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "EarliestUnappliedSlash";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct CurrentPlannedSession;
      impl ::subxt::StorageEntry for CurrentPlannedSession {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "CurrentPlannedSession";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct OffendingValidators;
      impl ::subxt::StorageEntry for OffendingValidators {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "OffendingValidators";
        type Value = ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::bool)>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageVersion;
      impl ::subxt::StorageEntry for StorageVersion {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "StorageVersion";
        type Value = runtime_types::pallet_staking::Releases;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ChillThreshold;
      impl ::subxt::StorageEntry for ChillThreshold {
        const PALLET: &'static str = "Staking";
        const STORAGE: &'static str = "ChillThreshold";
        type Value = runtime_types::sp_arithmetic::per_things::Percent;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Number of eras to keep in history."]
        #[doc = ""]
        #[doc = " Information is kept for eras in `[current_era - history_depth; current_era]`."]
        #[doc = ""]
        #[doc = " Must be more than the number of eras delayed by session otherwise. I.e. active era must"]
        #[doc = " always be in history. I.e. `active_era > current_era - history_depth` must be"]
        #[doc = " guaranteed."]
        pub async fn history_depth(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<HistoryDepth>()?
          };
          if runtime_storage_hash
            == [
              41u8, 54u8, 118u8, 245u8, 75u8, 136u8, 220u8, 25u8, 55u8, 255u8, 149u8, 177u8, 49u8,
              155u8, 167u8, 188u8, 170u8, 29u8, 251u8, 44u8, 240u8, 250u8, 225u8, 205u8, 102u8,
              74u8, 25u8, 47u8, 52u8, 235u8, 204u8, 167u8,
            ]
          {
            let entry = HistoryDepth;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The ideal number of staking participants."]
        pub async fn validator_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ValidatorCount>()?
          };
          if runtime_storage_hash
            == [
              245u8, 75u8, 214u8, 110u8, 66u8, 164u8, 86u8, 206u8, 69u8, 89u8, 12u8, 111u8, 117u8,
              16u8, 228u8, 184u8, 207u8, 6u8, 0u8, 126u8, 221u8, 67u8, 125u8, 218u8, 188u8, 245u8,
              156u8, 188u8, 34u8, 85u8, 208u8, 197u8,
            ]
          {
            let entry = ValidatorCount;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Minimum number of staking participants before emergency conditions are imposed."]
        pub async fn minimum_validator_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<MinimumValidatorCount>()?
          };
          if runtime_storage_hash
            == [
              82u8, 95u8, 128u8, 55u8, 136u8, 134u8, 71u8, 117u8, 135u8, 76u8, 44u8, 46u8, 174u8,
              34u8, 170u8, 228u8, 175u8, 1u8, 234u8, 162u8, 91u8, 252u8, 127u8, 68u8, 243u8, 241u8,
              13u8, 107u8, 214u8, 70u8, 87u8, 249u8,
            ]
          {
            let entry = MinimumValidatorCount;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're"]
        #[doc = " easy to initialize and the performance hit is minimal (we expect no more than four"]
        #[doc = " invulnerables) and restricted to testnets."]
        pub async fn invulnerables(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Invulnerables>()?
          };
          if runtime_storage_hash
            == [
              103u8, 93u8, 29u8, 166u8, 244u8, 19u8, 78u8, 182u8, 235u8, 37u8, 199u8, 127u8, 211u8,
              124u8, 168u8, 145u8, 111u8, 251u8, 33u8, 36u8, 167u8, 119u8, 124u8, 206u8, 205u8,
              14u8, 186u8, 68u8, 16u8, 150u8, 45u8, 158u8,
            ]
          {
            let entry = Invulnerables;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Map from all locked \"stash\" accounts to the controller account."]
        pub async fn bonded(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Bonded>()?
          };
          if runtime_storage_hash
            == [
              9u8, 214u8, 190u8, 93u8, 116u8, 143u8, 174u8, 103u8, 102u8, 25u8, 123u8, 201u8, 12u8,
              44u8, 188u8, 241u8, 74u8, 33u8, 35u8, 79u8, 210u8, 243u8, 174u8, 190u8, 46u8, 48u8,
              21u8, 10u8, 243u8, 16u8, 99u8, 48u8,
            ]
          {
            let entry = Bonded(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Map from all locked \"stash\" accounts to the controller account."]
        pub async fn bonded_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Bonded<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Bonded>()?
          };
          if runtime_storage_hash
            == [
              9u8, 214u8, 190u8, 93u8, 116u8, 143u8, 174u8, 103u8, 102u8, 25u8, 123u8, 201u8, 12u8,
              44u8, 188u8, 241u8, 74u8, 33u8, 35u8, 79u8, 210u8, 243u8, 174u8, 190u8, 46u8, 48u8,
              21u8, 10u8, 243u8, 16u8, 99u8, 48u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The minimum active bond to become and maintain the role of a nominator."]
        pub async fn min_nominator_bond(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<MinNominatorBond>()?
          };
          if runtime_storage_hash
            == [
              187u8, 66u8, 149u8, 226u8, 72u8, 219u8, 57u8, 246u8, 102u8, 47u8, 71u8, 12u8, 219u8,
              204u8, 127u8, 223u8, 58u8, 134u8, 81u8, 165u8, 200u8, 142u8, 196u8, 158u8, 26u8,
              38u8, 165u8, 19u8, 91u8, 251u8, 119u8, 84u8,
            ]
          {
            let entry = MinNominatorBond;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The minimum active bond to become and maintain the role of a validator."]
        pub async fn min_validator_bond(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<MinValidatorBond>()?
          };
          if runtime_storage_hash
            == [
              48u8, 105u8, 85u8, 178u8, 142u8, 208u8, 208u8, 19u8, 236u8, 130u8, 129u8, 169u8,
              35u8, 245u8, 66u8, 182u8, 92u8, 20u8, 22u8, 109u8, 155u8, 174u8, 87u8, 118u8, 242u8,
              216u8, 193u8, 154u8, 4u8, 5u8, 66u8, 56u8,
            ]
          {
            let entry = MinValidatorBond;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The minimum amount of commission that validators can set."]
        #[doc = ""]
        #[doc = " If set to `0`, no limit exists."]
        pub async fn min_commission(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::per_things::Perbill,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<MinCommission>()?
          };
          if runtime_storage_hash
            == [
              198u8, 29u8, 53u8, 56u8, 181u8, 170u8, 164u8, 240u8, 27u8, 171u8, 69u8, 57u8, 151u8,
              40u8, 23u8, 166u8, 157u8, 68u8, 208u8, 20u8, 2u8, 78u8, 63u8, 235u8, 166u8, 50u8,
              3u8, 246u8, 237u8, 146u8, 170u8, 91u8,
            ]
          {
            let entry = MinCommission;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."]
        pub async fn ledger(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::pallet_staking::StakingLedger>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Ledger>()?
          };
          if runtime_storage_hash
            == [
              54u8, 158u8, 148u8, 211u8, 91u8, 48u8, 159u8, 56u8, 149u8, 116u8, 43u8, 31u8, 45u8,
              102u8, 252u8, 12u8, 1u8, 176u8, 189u8, 68u8, 97u8, 88u8, 13u8, 204u8, 148u8, 12u8,
              34u8, 0u8, 180u8, 162u8, 202u8, 8u8,
            ]
          {
            let entry = Ledger(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."]
        pub async fn ledger_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Ledger<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Ledger>()?
          };
          if runtime_storage_hash
            == [
              54u8, 158u8, 148u8, 211u8, 91u8, 48u8, 159u8, 56u8, 149u8, 116u8, 43u8, 31u8, 45u8,
              102u8, 252u8, 12u8, 1u8, 176u8, 189u8, 68u8, 97u8, 88u8, 13u8, 204u8, 148u8, 12u8,
              34u8, 0u8, 180u8, 162u8, 202u8, 8u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Where the reward payment should be made. Keyed by stash."]
        pub async fn payee(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_staking::RewardDestination<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Payee>()?
          };
          if runtime_storage_hash
            == [
              108u8, 35u8, 28u8, 189u8, 146u8, 103u8, 200u8, 73u8, 220u8, 230u8, 193u8, 7u8, 66u8,
              147u8, 55u8, 34u8, 1u8, 21u8, 255u8, 100u8, 64u8, 175u8, 16u8, 106u8, 130u8, 202u8,
              103u8, 62u8, 79u8, 143u8, 115u8, 222u8,
            ]
          {
            let entry = Payee(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Where the reward payment should be made. Keyed by stash."]
        pub async fn payee_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Payee<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Payee>()?
          };
          if runtime_storage_hash
            == [
              108u8, 35u8, 28u8, 189u8, 146u8, 103u8, 200u8, 73u8, 220u8, 230u8, 193u8, 7u8, 66u8,
              147u8, 55u8, 34u8, 1u8, 21u8, 255u8, 100u8, 64u8, 175u8, 16u8, 106u8, 130u8, 202u8,
              103u8, 62u8, 79u8, 143u8, 115u8, 222u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The map from (wannabe) validator stash key to the preferences of that validator."]
        pub async fn validators(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_staking::ValidatorPrefs,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Validators>()?
          };
          if runtime_storage_hash
            == [
              45u8, 57u8, 106u8, 30u8, 123u8, 251u8, 148u8, 37u8, 52u8, 129u8, 103u8, 88u8, 54u8,
              216u8, 174u8, 181u8, 51u8, 181u8, 70u8, 6u8, 136u8, 7u8, 239u8, 44u8, 83u8, 153u8,
              124u8, 187u8, 225u8, 112u8, 23u8, 76u8,
            ]
          {
            let entry = Validators(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The map from (wannabe) validator stash key to the preferences of that validator."]
        pub async fn validators_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Validators<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Validators>()?
          };
          if runtime_storage_hash
            == [
              45u8, 57u8, 106u8, 30u8, 123u8, 251u8, 148u8, 37u8, 52u8, 129u8, 103u8, 88u8, 54u8,
              216u8, 174u8, 181u8, 51u8, 181u8, 70u8, 6u8, 136u8, 7u8, 239u8, 44u8, 83u8, 153u8,
              124u8, 187u8, 225u8, 112u8, 23u8, 76u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Counter for the related counted storage map"]
        pub async fn counter_for_validators(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CounterForValidators>()?
          };
          if runtime_storage_hash
            == [
              139u8, 25u8, 223u8, 6u8, 160u8, 239u8, 212u8, 85u8, 36u8, 185u8, 69u8, 63u8, 21u8,
              156u8, 144u8, 241u8, 112u8, 85u8, 49u8, 78u8, 88u8, 11u8, 8u8, 48u8, 118u8, 34u8,
              62u8, 159u8, 239u8, 122u8, 90u8, 45u8,
            ]
          {
            let entry = CounterForValidators;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum validator count before we stop allowing new validators to join."]
        #[doc = ""]
        #[doc = " When this value is not set, no limits are enforced."]
        pub async fn max_validators_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<MaxValidatorsCount>()?
          };
          if runtime_storage_hash
            == [
              250u8, 62u8, 16u8, 68u8, 192u8, 216u8, 236u8, 211u8, 217u8, 9u8, 213u8, 49u8, 41u8,
              37u8, 58u8, 62u8, 131u8, 112u8, 64u8, 26u8, 133u8, 7u8, 130u8, 1u8, 71u8, 158u8,
              14u8, 55u8, 169u8, 239u8, 223u8, 245u8,
            ]
          {
            let entry = MaxValidatorsCount;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The map from nominator stash key to their nomination preferences, namely the validators that"]
        #[doc = " they wish to support."]
        #[doc = ""]
        #[doc = " Note that the keys of this storage map might become non-decodable in case the"]
        #[doc = " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators"]
        #[doc = " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`"]
        #[doc = " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable"]
        #[doc = " nominators will effectively not-exist, until they re-submit their preferences such that it"]
        #[doc = " is within the bounds of the newly set `Config::MaxNominations`."]
        #[doc = ""]
        #[doc = " This implies that `::iter_keys().count()` and `::iter().count()` might return different"]
        #[doc = " values for this map. Moreover, the main `::count()` is aligned with the former, namely the"]
        #[doc = " number of keys that exist."]
        #[doc = ""]
        #[doc = " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via"]
        #[doc = " [`Call::chill_other`] dispatchable by anyone."]
        pub async fn nominators(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::pallet_staking::Nominations>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Nominators>()?
          };
          if runtime_storage_hash
            == [
              176u8, 26u8, 169u8, 68u8, 99u8, 216u8, 95u8, 198u8, 5u8, 123u8, 21u8, 83u8, 220u8,
              140u8, 122u8, 111u8, 22u8, 133u8, 9u8, 155u8, 35u8, 58u8, 232u8, 143u8, 62u8, 229u8,
              228u8, 98u8, 175u8, 114u8, 152u8, 253u8,
            ]
          {
            let entry = Nominators(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The map from nominator stash key to their nomination preferences, namely the validators that"]
        #[doc = " they wish to support."]
        #[doc = ""]
        #[doc = " Note that the keys of this storage map might become non-decodable in case the"]
        #[doc = " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators"]
        #[doc = " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`"]
        #[doc = " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable"]
        #[doc = " nominators will effectively not-exist, until they re-submit their preferences such that it"]
        #[doc = " is within the bounds of the newly set `Config::MaxNominations`."]
        #[doc = ""]
        #[doc = " This implies that `::iter_keys().count()` and `::iter().count()` might return different"]
        #[doc = " values for this map. Moreover, the main `::count()` is aligned with the former, namely the"]
        #[doc = " number of keys that exist."]
        #[doc = ""]
        #[doc = " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via"]
        #[doc = " [`Call::chill_other`] dispatchable by anyone."]
        pub async fn nominators_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Nominators<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Nominators>()?
          };
          if runtime_storage_hash
            == [
              176u8, 26u8, 169u8, 68u8, 99u8, 216u8, 95u8, 198u8, 5u8, 123u8, 21u8, 83u8, 220u8,
              140u8, 122u8, 111u8, 22u8, 133u8, 9u8, 155u8, 35u8, 58u8, 232u8, 143u8, 62u8, 229u8,
              228u8, 98u8, 175u8, 114u8, 152u8, 253u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Counter for the related counted storage map"]
        pub async fn counter_for_nominators(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CounterForNominators>()?
          };
          if runtime_storage_hash
            == [
              31u8, 94u8, 130u8, 138u8, 75u8, 8u8, 38u8, 162u8, 181u8, 5u8, 125u8, 116u8, 9u8,
              51u8, 22u8, 234u8, 40u8, 117u8, 215u8, 46u8, 82u8, 117u8, 225u8, 1u8, 9u8, 208u8,
              83u8, 63u8, 39u8, 187u8, 207u8, 191u8,
            ]
          {
            let entry = CounterForNominators;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum nominator count before we stop allowing new validators to join."]
        #[doc = ""]
        #[doc = " When this value is not set, no limits are enforced."]
        pub async fn max_nominators_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<MaxNominatorsCount>()?
          };
          if runtime_storage_hash
            == [
              180u8, 190u8, 180u8, 66u8, 235u8, 173u8, 76u8, 160u8, 197u8, 92u8, 96u8, 165u8,
              220u8, 188u8, 32u8, 119u8, 3u8, 73u8, 86u8, 49u8, 104u8, 17u8, 186u8, 98u8, 221u8,
              175u8, 109u8, 254u8, 207u8, 245u8, 125u8, 179u8,
            ]
          {
            let entry = MaxNominatorsCount;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The current era index."]
        #[doc = ""]
        #[doc = " This is the latest planned era, depending on how the Session pallet queues the validator"]
        #[doc = " set, it might be active or not."]
        pub async fn current_era(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CurrentEra>()?
          };
          if runtime_storage_hash
            == [
              105u8, 150u8, 49u8, 122u8, 4u8, 78u8, 8u8, 121u8, 34u8, 136u8, 157u8, 227u8, 59u8,
              139u8, 7u8, 253u8, 7u8, 10u8, 117u8, 71u8, 240u8, 74u8, 86u8, 36u8, 198u8, 37u8,
              153u8, 93u8, 196u8, 22u8, 192u8, 243u8,
            ]
          {
            let entry = CurrentEra;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The active era information, it holds index and start."]
        #[doc = ""]
        #[doc = " The active era is the era being currently rewarded. Validator set of this era must be"]
        #[doc = " equal to [`SessionInterface::validators`]."]
        pub async fn active_era(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::pallet_staking::ActiveEraInfo>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ActiveEra>()?
          };
          if runtime_storage_hash
            == [
              230u8, 144u8, 49u8, 201u8, 36u8, 253u8, 97u8, 135u8, 57u8, 169u8, 157u8, 138u8, 21u8,
              35u8, 14u8, 2u8, 151u8, 214u8, 176u8, 211u8, 48u8, 105u8, 38u8, 123u8, 98u8, 255u8,
              14u8, 35u8, 177u8, 247u8, 31u8, 28u8,
            ]
          {
            let entry = ActiveEra;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The session index at which the era start for the last `HISTORY_DEPTH` eras."]
        #[doc = ""]
        #[doc = " Note: This tracks the starting session (i.e. session index when era start being active)"]
        #[doc = " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."]
        pub async fn eras_start_session_index(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasStartSessionIndex>()?
          };
          if runtime_storage_hash
            == [
              92u8, 157u8, 168u8, 144u8, 132u8, 3u8, 212u8, 80u8, 230u8, 229u8, 251u8, 218u8, 97u8,
              55u8, 79u8, 100u8, 163u8, 91u8, 32u8, 246u8, 122u8, 78u8, 149u8, 214u8, 103u8, 249u8,
              119u8, 20u8, 101u8, 116u8, 110u8, 185u8,
            ]
          {
            let entry = ErasStartSessionIndex(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The session index at which the era start for the last `HISTORY_DEPTH` eras."]
        #[doc = ""]
        #[doc = " Note: This tracks the starting session (i.e. session index when era start being active)"]
        #[doc = " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."]
        pub async fn eras_start_session_index_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, ErasStartSessionIndex<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasStartSessionIndex>()?
          };
          if runtime_storage_hash
            == [
              92u8, 157u8, 168u8, 144u8, 132u8, 3u8, 212u8, 80u8, 230u8, 229u8, 251u8, 218u8, 97u8,
              55u8, 79u8, 100u8, 163u8, 91u8, 32u8, 246u8, 122u8, 78u8, 149u8, 214u8, 103u8, 249u8,
              119u8, 20u8, 101u8, 116u8, 110u8, 185u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Exposure of validator at era."]
        #[doc = ""]
        #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
        #[doc = ""]
        #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
        #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
        pub async fn eras_stakers(
          &self,
          _0: &::core::primitive::u32,
          _1: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_staking::Exposure<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u128,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasStakers>()?
          };
          if runtime_storage_hash
            == [
              176u8, 250u8, 76u8, 183u8, 219u8, 180u8, 156u8, 138u8, 111u8, 153u8, 154u8, 90u8,
              14u8, 194u8, 56u8, 133u8, 197u8, 199u8, 35u8, 20u8, 188u8, 129u8, 169u8, 38u8, 10u8,
              219u8, 186u8, 107u8, 179u8, 160u8, 244u8, 210u8,
            ]
          {
            let entry = ErasStakers(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Exposure of validator at era."]
        #[doc = ""]
        #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
        #[doc = ""]
        #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
        #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
        pub async fn eras_stakers_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, ErasStakers<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasStakers>()?
          };
          if runtime_storage_hash
            == [
              176u8, 250u8, 76u8, 183u8, 219u8, 180u8, 156u8, 138u8, 111u8, 153u8, 154u8, 90u8,
              14u8, 194u8, 56u8, 133u8, 197u8, 199u8, 35u8, 20u8, 188u8, 129u8, 169u8, 38u8, 10u8,
              219u8, 186u8, 107u8, 179u8, 160u8, 244u8, 210u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Clipped Exposure of validator at era."]
        #[doc = ""]
        #[doc = " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the"]
        #[doc = " `T::MaxNominatorRewardedPerValidator` biggest stakers."]
        #[doc = " (Note: the field `total` and `own` of the exposure remains unchanged)."]
        #[doc = " This is used to limit the i/o cost for the nominator payout."]
        #[doc = ""]
        #[doc = " This is keyed fist by the era index to allow bulk deletion and then the stash account."]
        #[doc = ""]
        #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
        #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
        pub async fn eras_stakers_clipped(
          &self,
          _0: &::core::primitive::u32,
          _1: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_staking::Exposure<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u128,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasStakersClipped>()?
          };
          if runtime_storage_hash
            == [
              91u8, 87u8, 165u8, 255u8, 253u8, 169u8, 48u8, 28u8, 254u8, 124u8, 93u8, 108u8, 252u8,
              15u8, 141u8, 139u8, 152u8, 118u8, 226u8, 122u8, 178u8, 110u8, 4u8, 242u8, 62u8, 77u8,
              157u8, 122u8, 149u8, 225u8, 201u8, 231u8,
            ]
          {
            let entry = ErasStakersClipped(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Clipped Exposure of validator at era."]
        #[doc = ""]
        #[doc = " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the"]
        #[doc = " `T::MaxNominatorRewardedPerValidator` biggest stakers."]
        #[doc = " (Note: the field `total` and `own` of the exposure remains unchanged)."]
        #[doc = " This is used to limit the i/o cost for the nominator payout."]
        #[doc = ""]
        #[doc = " This is keyed fist by the era index to allow bulk deletion and then the stash account."]
        #[doc = ""]
        #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
        #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
        pub async fn eras_stakers_clipped_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, ErasStakersClipped<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasStakersClipped>()?
          };
          if runtime_storage_hash
            == [
              91u8, 87u8, 165u8, 255u8, 253u8, 169u8, 48u8, 28u8, 254u8, 124u8, 93u8, 108u8, 252u8,
              15u8, 141u8, 139u8, 152u8, 118u8, 226u8, 122u8, 178u8, 110u8, 4u8, 242u8, 62u8, 77u8,
              157u8, 122u8, 149u8, 225u8, 201u8, 231u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Similar to `ErasStakers`, this holds the preferences of validators."]
        #[doc = ""]
        #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
        #[doc = ""]
        #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
        pub async fn eras_validator_prefs(
          &self,
          _0: &::core::primitive::u32,
          _1: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_staking::ValidatorPrefs,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasValidatorPrefs>()?
          };
          if runtime_storage_hash
            == [
              8u8, 55u8, 222u8, 216u8, 126u8, 126u8, 131u8, 18u8, 145u8, 58u8, 91u8, 123u8, 92u8,
              19u8, 178u8, 200u8, 133u8, 140u8, 3u8, 207u8, 101u8, 70u8, 204u8, 172u8, 98u8, 137u8,
              149u8, 74u8, 99u8, 141u8, 150u8, 228u8,
            ]
          {
            let entry = ErasValidatorPrefs(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Similar to `ErasStakers`, this holds the preferences of validators."]
        #[doc = ""]
        #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
        #[doc = ""]
        #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
        pub async fn eras_validator_prefs_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, ErasValidatorPrefs<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasValidatorPrefs>()?
          };
          if runtime_storage_hash
            == [
              8u8, 55u8, 222u8, 216u8, 126u8, 126u8, 131u8, 18u8, 145u8, 58u8, 91u8, 123u8, 92u8,
              19u8, 178u8, 200u8, 133u8, 140u8, 3u8, 207u8, 101u8, 70u8, 204u8, 172u8, 98u8, 137u8,
              149u8, 74u8, 99u8, 141u8, 150u8, 228u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The total validator era payout for the last `HISTORY_DEPTH` eras."]
        #[doc = ""]
        #[doc = " Eras that haven't finished yet or has been removed doesn't have reward."]
        pub async fn eras_validator_reward(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u128>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasValidatorReward>()?
          };
          if runtime_storage_hash
            == [
              87u8, 80u8, 156u8, 123u8, 107u8, 77u8, 203u8, 37u8, 231u8, 84u8, 124u8, 155u8, 227u8,
              212u8, 212u8, 179u8, 84u8, 161u8, 223u8, 255u8, 254u8, 107u8, 52u8, 89u8, 98u8,
              169u8, 136u8, 241u8, 104u8, 3u8, 244u8, 161u8,
            ]
          {
            let entry = ErasValidatorReward(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The total validator era payout for the last `HISTORY_DEPTH` eras."]
        #[doc = ""]
        #[doc = " Eras that haven't finished yet or has been removed doesn't have reward."]
        pub async fn eras_validator_reward_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, ErasValidatorReward<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasValidatorReward>()?
          };
          if runtime_storage_hash
            == [
              87u8, 80u8, 156u8, 123u8, 107u8, 77u8, 203u8, 37u8, 231u8, 84u8, 124u8, 155u8, 227u8,
              212u8, 212u8, 179u8, 84u8, 161u8, 223u8, 255u8, 254u8, 107u8, 52u8, 89u8, 98u8,
              169u8, 136u8, 241u8, 104u8, 3u8, 244u8, 161u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Rewards for the last `HISTORY_DEPTH` eras."]
        #[doc = " If reward hasn't been set or has been removed then 0 reward is returned."]
        pub async fn eras_reward_points(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_staking::EraRewardPoints<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasRewardPoints>()?
          };
          if runtime_storage_hash
            == [
              76u8, 221u8, 158u8, 62u8, 3u8, 254u8, 139u8, 170u8, 103u8, 218u8, 191u8, 103u8, 57u8,
              212u8, 208u8, 7u8, 105u8, 52u8, 117u8, 173u8, 8u8, 34u8, 82u8, 141u8, 51u8, 72u8,
              243u8, 56u8, 206u8, 206u8, 48u8, 140u8,
            ]
          {
            let entry = ErasRewardPoints(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Rewards for the last `HISTORY_DEPTH` eras."]
        #[doc = " If reward hasn't been set or has been removed then 0 reward is returned."]
        pub async fn eras_reward_points_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, ErasRewardPoints<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasRewardPoints>()?
          };
          if runtime_storage_hash
            == [
              76u8, 221u8, 158u8, 62u8, 3u8, 254u8, 139u8, 170u8, 103u8, 218u8, 191u8, 103u8, 57u8,
              212u8, 208u8, 7u8, 105u8, 52u8, 117u8, 173u8, 8u8, 34u8, 82u8, 141u8, 51u8, 72u8,
              243u8, 56u8, 206u8, 206u8, 48u8, 140u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The total amount staked for the last `HISTORY_DEPTH` eras."]
        #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
        pub async fn eras_total_stake(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasTotalStake>()?
          };
          if runtime_storage_hash
            == [
              224u8, 240u8, 168u8, 69u8, 148u8, 140u8, 249u8, 240u8, 4u8, 46u8, 77u8, 11u8, 224u8,
              65u8, 26u8, 239u8, 1u8, 110u8, 53u8, 11u8, 247u8, 235u8, 142u8, 234u8, 22u8, 43u8,
              24u8, 36u8, 37u8, 43u8, 170u8, 40u8,
            ]
          {
            let entry = ErasTotalStake(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The total amount staked for the last `HISTORY_DEPTH` eras."]
        #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
        pub async fn eras_total_stake_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, ErasTotalStake<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ErasTotalStake>()?
          };
          if runtime_storage_hash
            == [
              224u8, 240u8, 168u8, 69u8, 148u8, 140u8, 249u8, 240u8, 4u8, 46u8, 77u8, 11u8, 224u8,
              65u8, 26u8, 239u8, 1u8, 110u8, 53u8, 11u8, 247u8, 235u8, 142u8, 234u8, 22u8, 43u8,
              24u8, 36u8, 37u8, 43u8, 170u8, 40u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Mode of era forcing."]
        pub async fn force_era(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<runtime_types::pallet_staking::Forcing, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ForceEra>()?
          };
          if runtime_storage_hash
            == [
              221u8, 41u8, 71u8, 21u8, 28u8, 193u8, 65u8, 97u8, 103u8, 37u8, 145u8, 146u8, 183u8,
              194u8, 57u8, 131u8, 214u8, 136u8, 68u8, 156u8, 140u8, 194u8, 69u8, 151u8, 115u8,
              177u8, 92u8, 147u8, 29u8, 40u8, 41u8, 31u8,
            ]
          {
            let entry = ForceEra;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The percentage of the slash that is distributed to reporters."]
        #[doc = ""]
        #[doc = " The rest of the slashed value is handled by the `Slash`."]
        pub async fn slash_reward_fraction(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::per_things::Perbill,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SlashRewardFraction>()?
          };
          if runtime_storage_hash
            == [
              92u8, 55u8, 255u8, 233u8, 174u8, 125u8, 32u8, 21u8, 78u8, 237u8, 123u8, 241u8, 113u8,
              243u8, 48u8, 101u8, 190u8, 165u8, 216u8, 134u8, 35u8, 128u8, 7u8, 207u8, 48u8, 92u8,
              116u8, 179u8, 253u8, 14u8, 87u8, 176u8,
            ]
          {
            let entry = SlashRewardFraction;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The amount of currency given to reporters of a slash event which was"]
        #[doc = " canceled by extraordinary circumstances (e.g. governance)."]
        pub async fn canceled_slash_payout(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CanceledSlashPayout>()?
          };
          if runtime_storage_hash
            == [
              126u8, 218u8, 66u8, 92u8, 82u8, 124u8, 145u8, 161u8, 40u8, 176u8, 14u8, 211u8, 178u8,
              216u8, 8u8, 156u8, 83u8, 14u8, 91u8, 15u8, 200u8, 170u8, 3u8, 127u8, 141u8, 139u8,
              151u8, 98u8, 74u8, 96u8, 238u8, 29u8,
            ]
          {
            let entry = CanceledSlashPayout;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " All unapplied slashes that are queued for later."]
        pub async fn unapplied_slashes(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<
            runtime_types::pallet_staking::UnappliedSlash<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<UnappliedSlashes>()?
          };
          if runtime_storage_hash
            == [
              213u8, 28u8, 144u8, 139u8, 187u8, 184u8, 7u8, 192u8, 114u8, 57u8, 238u8, 66u8, 7u8,
              254u8, 41u8, 230u8, 189u8, 188u8, 127u8, 49u8, 201u8, 179u8, 21u8, 157u8, 177u8,
              130u8, 137u8, 151u8, 51u8, 213u8, 242u8, 236u8,
            ]
          {
            let entry = UnappliedSlashes(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " All unapplied slashes that are queued for later."]
        pub async fn unapplied_slashes_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, UnappliedSlashes<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<UnappliedSlashes>()?
          };
          if runtime_storage_hash
            == [
              213u8, 28u8, 144u8, 139u8, 187u8, 184u8, 7u8, 192u8, 114u8, 57u8, 238u8, 66u8, 7u8,
              254u8, 41u8, 230u8, 189u8, 188u8, 127u8, 49u8, 201u8, 179u8, 21u8, 157u8, 177u8,
              130u8, 137u8, 151u8, 51u8, 213u8, 242u8, 236u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " A mapping from still-bonded eras to the first session index of that era."]
        #[doc = ""]
        #[doc = " Must contains information for eras for the range:"]
        #[doc = " `[active_era - bounding_duration; active_era]`"]
        pub async fn bonded_eras(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<BondedEras>()?
          };
          if runtime_storage_hash
            == [
              243u8, 162u8, 236u8, 198u8, 122u8, 182u8, 37u8, 55u8, 171u8, 156u8, 235u8, 223u8,
              226u8, 129u8, 89u8, 206u8, 2u8, 155u8, 222u8, 154u8, 116u8, 124u8, 4u8, 119u8, 155u8,
              94u8, 248u8, 30u8, 171u8, 51u8, 78u8, 106u8,
            ]
          {
            let entry = BondedEras;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " All slashing events on validators, mapped by era to the highest slash proportion"]
        #[doc = " and slash value of the era."]
        pub async fn validator_slash_in_era(
          &self,
          _0: &::core::primitive::u32,
          _1: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<(
            runtime_types::sp_arithmetic::per_things::Perbill,
            ::core::primitive::u128,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ValidatorSlashInEra>()?
          };
          if runtime_storage_hash
            == [
              241u8, 177u8, 227u8, 239u8, 150u8, 186u8, 50u8, 97u8, 144u8, 224u8, 24u8, 149u8,
              189u8, 166u8, 71u8, 232u8, 221u8, 129u8, 122u8, 248u8, 235u8, 100u8, 130u8, 230u8,
              11u8, 96u8, 214u8, 59u8, 79u8, 40u8, 236u8, 136u8,
            ]
          {
            let entry = ValidatorSlashInEra(_0, _1);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " All slashing events on validators, mapped by era to the highest slash proportion"]
        #[doc = " and slash value of the era."]
        pub async fn validator_slash_in_era_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, ValidatorSlashInEra<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ValidatorSlashInEra>()?
          };
          if runtime_storage_hash
            == [
              241u8, 177u8, 227u8, 239u8, 150u8, 186u8, 50u8, 97u8, 144u8, 224u8, 24u8, 149u8,
              189u8, 166u8, 71u8, 232u8, 221u8, 129u8, 122u8, 248u8, 235u8, 100u8, 130u8, 230u8,
              11u8, 96u8, 214u8, 59u8, 79u8, 40u8, 236u8, 136u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " All slashing events on nominators, mapped by era to the highest slash value of the era."]
        pub async fn nominator_slash_in_era(
          &self,
          _0: &::core::primitive::u32,
          _1: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u128>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<NominatorSlashInEra>()?
          };
          if runtime_storage_hash
            == [
              149u8, 144u8, 51u8, 167u8, 71u8, 119u8, 218u8, 110u8, 25u8, 45u8, 168u8, 149u8, 62u8,
              195u8, 248u8, 50u8, 215u8, 216u8, 228u8, 4u8, 238u8, 4u8, 52u8, 211u8, 65u8, 223u8,
              84u8, 105u8, 186u8, 200u8, 73u8, 133u8,
            ]
          {
            let entry = NominatorSlashInEra(_0, _1);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " All slashing events on nominators, mapped by era to the highest slash value of the era."]
        pub async fn nominator_slash_in_era_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, NominatorSlashInEra<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<NominatorSlashInEra>()?
          };
          if runtime_storage_hash
            == [
              149u8, 144u8, 51u8, 167u8, 71u8, 119u8, 218u8, 110u8, 25u8, 45u8, 168u8, 149u8, 62u8,
              195u8, 248u8, 50u8, 215u8, 216u8, 228u8, 4u8, 238u8, 4u8, 52u8, 211u8, 65u8, 223u8,
              84u8, 105u8, 186u8, 200u8, 73u8, 133u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Slashing spans for stash accounts."]
        pub async fn slashing_spans(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::pallet_staking::slashing::SlashingSpans>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SlashingSpans>()?
          };
          if runtime_storage_hash
            == [
              22u8, 73u8, 200u8, 194u8, 106u8, 157u8, 84u8, 5u8, 119u8, 5u8, 73u8, 247u8, 125u8,
              213u8, 80u8, 37u8, 154u8, 192u8, 16u8, 2u8, 135u8, 124u8, 139u8, 26u8, 84u8, 223u8,
              254u8, 229u8, 148u8, 45u8, 194u8, 183u8,
            ]
          {
            let entry = SlashingSpans(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Slashing spans for stash accounts."]
        pub async fn slashing_spans_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, SlashingSpans<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SlashingSpans>()?
          };
          if runtime_storage_hash
            == [
              22u8, 73u8, 200u8, 194u8, 106u8, 157u8, 84u8, 5u8, 119u8, 5u8, 73u8, 247u8, 125u8,
              213u8, 80u8, 37u8, 154u8, 192u8, 16u8, 2u8, 135u8, 124u8, 139u8, 26u8, 84u8, 223u8,
              254u8, 229u8, 148u8, 45u8, 194u8, 183u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Records information about the maximum slash of a stash within a slashing span,"]
        #[doc = " as well as how much reward has been paid out."]
        pub async fn span_slash(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          _1: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_staking::slashing::SpanRecord<::core::primitive::u128>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SpanSlash>()?
          };
          if runtime_storage_hash
            == [
              95u8, 42u8, 40u8, 167u8, 201u8, 140u8, 142u8, 55u8, 69u8, 238u8, 248u8, 118u8, 209u8,
              11u8, 117u8, 132u8, 179u8, 33u8, 17u8, 156u8, 137u8, 220u8, 170u8, 144u8, 235u8,
              99u8, 248u8, 47u8, 99u8, 42u8, 247u8, 189u8,
            ]
          {
            let entry = SpanSlash(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Records information about the maximum slash of a stash within a slashing span,"]
        #[doc = " as well as how much reward has been paid out."]
        pub async fn span_slash_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, SpanSlash<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SpanSlash>()?
          };
          if runtime_storage_hash
            == [
              95u8, 42u8, 40u8, 167u8, 201u8, 140u8, 142u8, 55u8, 69u8, 238u8, 248u8, 118u8, 209u8,
              11u8, 117u8, 132u8, 179u8, 33u8, 17u8, 156u8, 137u8, 220u8, 170u8, 144u8, 235u8,
              99u8, 248u8, 47u8, 99u8, 42u8, 247u8, 189u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The earliest era for which we have a pending, unapplied slash."]
        pub async fn earliest_unapplied_slash(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<EarliestUnappliedSlash>()?
          };
          if runtime_storage_hash
            == [
              2u8, 167u8, 88u8, 76u8, 113u8, 225u8, 232u8, 80u8, 183u8, 162u8, 104u8, 28u8, 162u8,
              13u8, 120u8, 45u8, 200u8, 130u8, 147u8, 124u8, 210u8, 111u8, 30u8, 222u8, 70u8, 79u8,
              125u8, 157u8, 56u8, 252u8, 237u8, 216u8,
            ]
          {
            let entry = EarliestUnappliedSlash;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The last planned session scheduled by the session pallet."]
        #[doc = ""]
        #[doc = " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."]
        pub async fn current_planned_session(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CurrentPlannedSession>()?
          };
          if runtime_storage_hash
            == [
              38u8, 22u8, 56u8, 250u8, 17u8, 154u8, 99u8, 37u8, 155u8, 253u8, 100u8, 117u8, 5u8,
              239u8, 31u8, 190u8, 53u8, 241u8, 11u8, 185u8, 163u8, 227u8, 10u8, 77u8, 210u8, 64u8,
              156u8, 218u8, 105u8, 16u8, 1u8, 57u8,
            ]
          {
            let entry = CurrentPlannedSession;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Indices of validators that have offended in the active era and whether they are currently"]
        #[doc = " disabled."]
        #[doc = ""]
        #[doc = " This value should be a superset of disabled validators since not all offences lead to the"]
        #[doc = " validator being disabled (if there was no slash). This is needed to track the percentage of"]
        #[doc = " validators that have offended in the current era, ensuring a new era is forced if"]
        #[doc = " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find"]
        #[doc = " whether a given validator has previously offended using binary search. It gets cleared when"]
        #[doc = " the era ends."]
        pub async fn offending_validators(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::bool)>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<OffendingValidators>()?
          };
          if runtime_storage_hash
            == [
              94u8, 254u8, 0u8, 50u8, 76u8, 232u8, 51u8, 153u8, 118u8, 14u8, 70u8, 101u8, 112u8,
              215u8, 173u8, 82u8, 182u8, 104u8, 167u8, 103u8, 187u8, 168u8, 86u8, 16u8, 51u8,
              235u8, 51u8, 119u8, 38u8, 154u8, 42u8, 113u8,
            ]
          {
            let entry = OffendingValidators;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " True if network has been upgraded to this version."]
        #[doc = " Storage version of the pallet."]
        #[doc = ""]
        #[doc = " This is set to v7.0.0 for new networks."]
        pub async fn storage_version(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<runtime_types::pallet_staking::Releases, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StorageVersion>()?
          };
          if runtime_storage_hash
            == [
              156u8, 107u8, 113u8, 89u8, 107u8, 89u8, 171u8, 229u8, 13u8, 96u8, 203u8, 67u8, 119u8,
              153u8, 199u8, 158u8, 63u8, 114u8, 229u8, 113u8, 81u8, 70u8, 200u8, 9u8, 147u8, 233u8,
              6u8, 7u8, 210u8, 109u8, 149u8, 14u8,
            ]
          {
            let entry = StorageVersion;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The threshold for when users can start calling `chill_other` for other validators /"]
        #[doc = " nominators. The threshold is compared to the actual number of validators / nominators"]
        #[doc = " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."]
        pub async fn chill_threshold(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::sp_arithmetic::per_things::Percent>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ChillThreshold>()?
          };
          if runtime_storage_hash
            == [
              254u8, 131u8, 112u8, 90u8, 234u8, 72u8, 26u8, 240u8, 38u8, 14u8, 128u8, 234u8, 133u8,
              169u8, 66u8, 48u8, 234u8, 170u8, 159u8, 145u8, 75u8, 135u8, 79u8, 189u8, 54u8, 89u8,
              113u8, 144u8, 16u8, 70u8, 184u8, 43u8,
            ]
          {
            let entry = ChillThreshold;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Maximum number of nominations per nominator."]
        pub fn max_nominations(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Staking", "MaxNominations")?
            == [
              155u8, 58u8, 120u8, 225u8, 19u8, 30u8, 64u8, 6u8, 16u8, 72u8, 160u8, 120u8, 99u8,
              8u8, 170u8, 47u8, 217u8, 196u8, 184u8, 183u8, 199u8, 156u8, 76u8, 154u8, 143u8,
              172u8, 67u8, 133u8, 95u8, 36u8, 60u8, 50u8,
            ]
          {
            let pallet = metadata.pallet("Staking")?;
            let constant = pallet.constant("MaxNominations")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Number of sessions per era."]
        pub fn sessions_per_era(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Staking", "SessionsPerEra")?
            == [
              73u8, 207u8, 178u8, 212u8, 159u8, 9u8, 41u8, 31u8, 205u8, 221u8, 166u8, 159u8, 104u8,
              218u8, 113u8, 160u8, 174u8, 66u8, 95u8, 0u8, 237u8, 42u8, 120u8, 171u8, 68u8, 78u8,
              136u8, 162u8, 163u8, 225u8, 199u8, 138u8,
            ]
          {
            let pallet = metadata.pallet("Staking")?;
            let constant = pallet.constant("SessionsPerEra")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Number of eras that staked funds must remain bonded for."]
        pub fn bonding_duration(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Staking", "BondingDuration")?
            == [
              205u8, 83u8, 35u8, 244u8, 140u8, 127u8, 183u8, 152u8, 242u8, 60u8, 44u8, 77u8, 252u8,
              245u8, 35u8, 157u8, 71u8, 124u8, 99u8, 243u8, 122u8, 252u8, 104u8, 33u8, 28u8, 86u8,
              63u8, 26u8, 3u8, 22u8, 193u8, 237u8,
            ]
          {
            let pallet = metadata.pallet("Staking")?;
            let constant = pallet.constant("BondingDuration")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Number of eras that slashes are deferred by, after computation."]
        #[doc = ""]
        #[doc = " This should be less than the bonding duration. Set to 0 if slashes"]
        #[doc = " should be applied immediately, without opportunity for intervention."]
        pub fn slash_defer_duration(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Staking", "SlashDeferDuration")?
            == [
              119u8, 238u8, 165u8, 29u8, 118u8, 219u8, 225u8, 241u8, 249u8, 202u8, 99u8, 86u8,
              123u8, 152u8, 33u8, 200u8, 166u8, 24u8, 240u8, 111u8, 6u8, 56u8, 94u8, 70u8, 198u8,
              4u8, 223u8, 19u8, 39u8, 246u8, 190u8, 167u8,
            ]
          {
            let pallet = metadata.pallet("Staking")?;
            let constant = pallet.constant("SlashDeferDuration")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of nominators rewarded for each validator."]
        #[doc = ""]
        #[doc = " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can"]
        #[doc = " claim their reward. This used to limit the i/o cost for the nominator payout."]
        pub fn max_nominator_rewarded_per_validator(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Staking", "MaxNominatorRewardedPerValidator")?
            == [
              203u8, 67u8, 240u8, 15u8, 205u8, 129u8, 216u8, 42u8, 197u8, 166u8, 179u8, 175u8, 9u8,
              179u8, 182u8, 19u8, 57u8, 206u8, 237u8, 79u8, 204u8, 135u8, 76u8, 243u8, 108u8,
              191u8, 151u8, 127u8, 38u8, 154u8, 193u8, 142u8,
            ]
          {
            let pallet = metadata.pallet("Staking")?;
            let constant = pallet.constant("MaxNominatorRewardedPerValidator")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of `unlocking` chunks a [`StakingLedger`] can have. Effectively"]
        #[doc = " determines how many unique eras a staker may be unbonding in."]
        pub fn max_unlocking_chunks(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Staking", "MaxUnlockingChunks")?
            == [
              60u8, 255u8, 33u8, 12u8, 50u8, 253u8, 93u8, 203u8, 3u8, 245u8, 156u8, 201u8, 121u8,
              119u8, 72u8, 58u8, 38u8, 133u8, 127u8, 51u8, 21u8, 223u8, 40u8, 23u8, 116u8, 158u8,
              77u8, 24u8, 139u8, 219u8, 197u8, 150u8,
            ]
          {
            let pallet = metadata.pallet("Staking")?;
            let constant = pallet.constant("MaxUnlockingChunks")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod offences {
    use super::root_mod;
    use super::runtime_types;
    pub type Event = runtime_types::pallet_offences::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "There is an offence reported of the given `kind` happened at the `session_index` and"]
      #[doc = "(kind-specific) time slot. This event is not deposited for duplicate slashes."]
      #[doc = "\\[kind, timeslot\\]."]
      pub struct Offence {
        pub kind: [::core::primitive::u8; 16usize],
        pub timeslot: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Event for Offence {
        const PALLET: &'static str = "Offences";
        const EVENT: &'static str = "Offence";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Reports<'a>(pub &'a ::subxt::sp_core::H256);
      impl ::subxt::StorageEntry for Reports<'_> {
        const PALLET: &'static str = "Offences";
        const STORAGE: &'static str = "Reports";
        type Value = runtime_types::sp_staking::offence::OffenceDetails<
          ::subxt::sp_core::crypto::AccountId32,
          (
            ::subxt::sp_core::crypto::AccountId32,
            runtime_types::pallet_staking::Exposure<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            >,
          ),
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct ConcurrentReportsIndex<'a>(
        pub &'a [::core::primitive::u8; 16usize],
        pub &'a [::core::primitive::u8],
      );
      impl ::subxt::StorageEntry for ConcurrentReportsIndex<'_> {
        const PALLET: &'static str = "Offences";
        const STORAGE: &'static str = "ConcurrentReportsIndex";
        type Value = ::std::vec::Vec<::subxt::sp_core::H256>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
          ])
        }
      }
      pub struct ReportsByKindIndex<'a>(pub &'a [::core::primitive::u8; 16usize]);
      impl ::subxt::StorageEntry for ReportsByKindIndex<'_> {
        const PALLET: &'static str = "Offences";
        const STORAGE: &'static str = "ReportsByKindIndex";
        type Value = ::std::vec::Vec<::core::primitive::u8>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The primary structure that holds all offence records keyed by report identifiers."]
        pub async fn reports(
          &self,
          _0: &::subxt::sp_core::H256,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::sp_staking::offence::OffenceDetails<
              ::subxt::sp_core::crypto::AccountId32,
              (
                ::subxt::sp_core::crypto::AccountId32,
                runtime_types::pallet_staking::Exposure<
                  ::subxt::sp_core::crypto::AccountId32,
                  ::core::primitive::u128,
                >,
              ),
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Reports>()?
          };
          if runtime_storage_hash
            == [
              82u8, 209u8, 30u8, 189u8, 152u8, 16u8, 7u8, 24u8, 178u8, 140u8, 17u8, 226u8, 97u8,
              37u8, 80u8, 211u8, 252u8, 36u8, 196u8, 121u8, 113u8, 79u8, 209u8, 113u8, 236u8,
              148u8, 243u8, 100u8, 46u8, 193u8, 180u8, 83u8,
            ]
          {
            let entry = Reports(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The primary structure that holds all offence records keyed by report identifiers."]
        pub async fn reports_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Reports<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Reports>()?
          };
          if runtime_storage_hash
            == [
              82u8, 209u8, 30u8, 189u8, 152u8, 16u8, 7u8, 24u8, 178u8, 140u8, 17u8, 226u8, 97u8,
              37u8, 80u8, 211u8, 252u8, 36u8, 196u8, 121u8, 113u8, 79u8, 209u8, 113u8, 236u8,
              148u8, 243u8, 100u8, 46u8, 193u8, 180u8, 83u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " A vector of reports of the same kind that happened at the same time slot."]
        pub async fn concurrent_reports_index(
          &self,
          _0: &[::core::primitive::u8; 16usize],
          _1: &[::core::primitive::u8],
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::std::vec::Vec<::subxt::sp_core::H256>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ConcurrentReportsIndex>()?
          };
          if runtime_storage_hash
            == [
              110u8, 42u8, 178u8, 19u8, 180u8, 109u8, 26u8, 134u8, 74u8, 223u8, 19u8, 172u8, 149u8,
              194u8, 228u8, 11u8, 205u8, 189u8, 157u8, 52u8, 179u8, 177u8, 19u8, 65u8, 35u8, 176u8,
              62u8, 98u8, 108u8, 236u8, 242u8, 240u8,
            ]
          {
            let entry = ConcurrentReportsIndex(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " A vector of reports of the same kind that happened at the same time slot."]
        pub async fn concurrent_reports_index_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, ConcurrentReportsIndex<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ConcurrentReportsIndex>()?
          };
          if runtime_storage_hash
            == [
              110u8, 42u8, 178u8, 19u8, 180u8, 109u8, 26u8, 134u8, 74u8, 223u8, 19u8, 172u8, 149u8,
              194u8, 228u8, 11u8, 205u8, 189u8, 157u8, 52u8, 179u8, 177u8, 19u8, 65u8, 35u8, 176u8,
              62u8, 98u8, 108u8, 236u8, 242u8, 240u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Enumerates all reports of a kind along with the time they happened."]
        #[doc = ""]
        #[doc = " All reports are sorted by the time of offence."]
        #[doc = ""]
        #[doc = " Note that the actual type of this mapping is `Vec<u8>`, this is because values of"]
        #[doc = " different types are not supported at the moment so we are doing the manual serialization."]
        pub async fn reports_by_kind_index(
          &self,
          _0: &[::core::primitive::u8; 16usize],
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::std::vec::Vec<::core::primitive::u8>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ReportsByKindIndex>()?
          };
          if runtime_storage_hash
            == [
              162u8, 66u8, 131u8, 48u8, 250u8, 237u8, 179u8, 214u8, 36u8, 137u8, 226u8, 136u8,
              120u8, 61u8, 215u8, 43u8, 164u8, 50u8, 91u8, 164u8, 20u8, 96u8, 189u8, 100u8, 242u8,
              106u8, 21u8, 136u8, 98u8, 215u8, 180u8, 145u8,
            ]
          {
            let entry = ReportsByKindIndex(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Enumerates all reports of a kind along with the time they happened."]
        #[doc = ""]
        #[doc = " All reports are sorted by the time of offence."]
        #[doc = ""]
        #[doc = " Note that the actual type of this mapping is `Vec<u8>`, this is because values of"]
        #[doc = " different types are not supported at the moment so we are doing the manual serialization."]
        pub async fn reports_by_kind_index_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, ReportsByKindIndex<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ReportsByKindIndex>()?
          };
          if runtime_storage_hash
            == [
              162u8, 66u8, 131u8, 48u8, 250u8, 237u8, 179u8, 214u8, 36u8, 137u8, 226u8, 136u8,
              120u8, 61u8, 215u8, 43u8, 164u8, 50u8, 91u8, 164u8, 20u8, 96u8, 189u8, 100u8, 242u8,
              106u8, 21u8, 136u8, 98u8, 215u8, 180u8, 145u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod historical {
    use super::root_mod;
    use super::runtime_types;
  }
  pub mod session {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetKeys {
        pub keys: runtime_types::lagoon_runtime::SessionKeys,
        pub proof: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Call for SetKeys {
        const PALLET: &'static str = "Session";
        const FUNCTION: &'static str = "set_keys";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct PurgeKeys;
      impl ::subxt::Call for PurgeKeys {
        const PALLET: &'static str = "Session";
        const FUNCTION: &'static str = "purge_keys";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Sets the session key(s) of the function caller to `keys`."]
        #[doc = "Allows an account to set its session key prior to becoming a validator."]
        #[doc = "This doesn't take effect until the next session."]
        #[doc = ""]
        #[doc = "The dispatch origin of this function must be signed."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
        #[doc = "  `T::Keys::key_ids()` which is fixed."]
        #[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
        #[doc = "- DbWrites: `origin account`, `NextKeys`"]
        #[doc = "- DbReads per key id: `KeyOwner`"]
        #[doc = "- DbWrites per key id: `KeyOwner`"]
        #[doc = "# </weight>"]
        pub fn set_keys(
          &self,
          keys: runtime_types::lagoon_runtime::SessionKeys,
          proof: ::std::vec::Vec<::core::primitive::u8>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetKeys, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetKeys>()?
          };
          if runtime_call_hash
            == [
              159u8, 63u8, 170u8, 217u8, 61u8, 69u8, 235u8, 239u8, 98u8, 107u8, 18u8, 70u8, 115u8,
              186u8, 110u8, 117u8, 138u8, 56u8, 174u8, 171u8, 14u8, 92u8, 219u8, 133u8, 99u8,
              245u8, 53u8, 162u8, 228u8, 227u8, 18u8, 182u8,
            ]
          {
            let call = SetKeys { keys, proof };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Removes any session key(s) of the function caller."]
        #[doc = ""]
        #[doc = "This doesn't take effect until the next session."]
        #[doc = ""]
        #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
        #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
        #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
        #[doc = "usually means being a stash account)."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
        #[doc = "  of `T::Keys::key_ids()` which is fixed."]
        #[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
        #[doc = "- DbWrites: `NextKeys`, `origin account`"]
        #[doc = "- DbWrites per key id: `KeyOwner`"]
        #[doc = "# </weight>"]
        pub fn purge_keys(
          &self,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, PurgeKeys, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<PurgeKeys>()?
          };
          if runtime_call_hash
            == [
              200u8, 255u8, 4u8, 213u8, 188u8, 92u8, 99u8, 116u8, 163u8, 152u8, 29u8, 35u8, 133u8,
              119u8, 246u8, 44u8, 91u8, 31u8, 145u8, 23u8, 213u8, 64u8, 71u8, 242u8, 207u8, 239u8,
              231u8, 37u8, 61u8, 63u8, 190u8, 35u8,
            ]
          {
            let call = PurgeKeys {};
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_session::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "New session has happened. Note that the argument is the session index, not the"]
      #[doc = "block number as the type might suggest."]
      pub struct NewSession {
        pub session_index: ::core::primitive::u32,
      }
      impl ::subxt::Event for NewSession {
        const PALLET: &'static str = "Session";
        const EVENT: &'static str = "NewSession";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Validators;
      impl ::subxt::StorageEntry for Validators {
        const PALLET: &'static str = "Session";
        const STORAGE: &'static str = "Validators";
        type Value = ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct CurrentIndex;
      impl ::subxt::StorageEntry for CurrentIndex {
        const PALLET: &'static str = "Session";
        const STORAGE: &'static str = "CurrentIndex";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct QueuedChanged;
      impl ::subxt::StorageEntry for QueuedChanged {
        const PALLET: &'static str = "Session";
        const STORAGE: &'static str = "QueuedChanged";
        type Value = ::core::primitive::bool;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct QueuedKeys;
      impl ::subxt::StorageEntry for QueuedKeys {
        const PALLET: &'static str = "Session";
        const STORAGE: &'static str = "QueuedKeys";
        type Value = ::std::vec::Vec<(
          ::subxt::sp_core::crypto::AccountId32,
          runtime_types::lagoon_runtime::SessionKeys,
        )>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct DisabledValidators;
      impl ::subxt::StorageEntry for DisabledValidators {
        const PALLET: &'static str = "Session";
        const STORAGE: &'static str = "DisabledValidators";
        type Value = ::std::vec::Vec<::core::primitive::u32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct NextKeys<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for NextKeys<'_> {
        const PALLET: &'static str = "Session";
        const STORAGE: &'static str = "NextKeys";
        type Value = runtime_types::lagoon_runtime::SessionKeys;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct KeyOwner<'a>(
        pub &'a runtime_types::sp_core::crypto::KeyTypeId,
        pub &'a [::core::primitive::u8],
      );
      impl ::subxt::StorageEntry for KeyOwner<'_> {
        const PALLET: &'static str = "Session";
        const STORAGE: &'static str = "KeyOwner";
        type Value = ::subxt::sp_core::crypto::AccountId32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &(&self.0, &self.1),
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The current set of validators."]
        pub async fn validators(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Validators>()?
          };
          if runtime_storage_hash
            == [
              186u8, 248u8, 234u8, 74u8, 245u8, 141u8, 90u8, 152u8, 226u8, 220u8, 255u8, 104u8,
              174u8, 1u8, 37u8, 152u8, 23u8, 208u8, 25u8, 49u8, 33u8, 253u8, 254u8, 251u8, 141u8,
              16u8, 18u8, 175u8, 196u8, 188u8, 163u8, 209u8,
            ]
          {
            let entry = Validators;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Current index of the session."]
        pub async fn current_index(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CurrentIndex>()?
          };
          if runtime_storage_hash
            == [
              148u8, 179u8, 159u8, 15u8, 197u8, 95u8, 214u8, 30u8, 209u8, 251u8, 183u8, 231u8,
              91u8, 25u8, 181u8, 191u8, 143u8, 252u8, 227u8, 80u8, 159u8, 66u8, 194u8, 67u8, 113u8,
              74u8, 111u8, 91u8, 218u8, 187u8, 130u8, 40u8,
            ]
          {
            let entry = CurrentIndex;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " True if the underlying economic identities or weighting behind the validators"]
        #[doc = " has changed in the queued validator set."]
        pub async fn queued_changed(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::bool, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<QueuedChanged>()?
          };
          if runtime_storage_hash
            == [
              105u8, 140u8, 235u8, 218u8, 96u8, 100u8, 252u8, 10u8, 58u8, 221u8, 244u8, 251u8,
              67u8, 91u8, 80u8, 202u8, 152u8, 42u8, 50u8, 113u8, 200u8, 247u8, 59u8, 213u8, 77u8,
              195u8, 1u8, 150u8, 220u8, 18u8, 245u8, 46u8,
            ]
          {
            let entry = QueuedChanged;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The queued keys for the next session. When the next session begins, these keys"]
        #[doc = " will be used to determine the validator's session keys."]
        pub async fn queued_keys(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<(
            ::subxt::sp_core::crypto::AccountId32,
            runtime_types::lagoon_runtime::SessionKeys,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<QueuedKeys>()?
          };
          if runtime_storage_hash
            == [
              4u8, 141u8, 43u8, 244u8, 212u8, 32u8, 46u8, 252u8, 104u8, 245u8, 200u8, 243u8, 21u8,
              132u8, 177u8, 66u8, 228u8, 141u8, 26u8, 245u8, 9u8, 6u8, 111u8, 244u8, 86u8, 28u8,
              178u8, 56u8, 93u8, 135u8, 217u8, 15u8,
            ]
          {
            let entry = QueuedKeys;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Indices of disabled validators."]
        #[doc = ""]
        #[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
        #[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
        #[doc = " a new set of identities."]
        pub async fn disabled_validators(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::std::vec::Vec<::core::primitive::u32>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<DisabledValidators>()?
          };
          if runtime_storage_hash
            == [
              135u8, 22u8, 22u8, 97u8, 82u8, 217u8, 144u8, 141u8, 121u8, 240u8, 189u8, 16u8, 176u8,
              88u8, 177u8, 31u8, 20u8, 242u8, 73u8, 104u8, 11u8, 110u8, 214u8, 34u8, 52u8, 217u8,
              106u8, 33u8, 174u8, 174u8, 198u8, 84u8,
            ]
          {
            let entry = DisabledValidators;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The next session keys for a validator."]
        pub async fn next_keys(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::lagoon_runtime::SessionKeys>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<NextKeys>()?
          };
          if runtime_storage_hash
            == [
              12u8, 86u8, 103u8, 231u8, 0u8, 69u8, 40u8, 44u8, 241u8, 127u8, 71u8, 165u8, 114u8,
              228u8, 159u8, 104u8, 109u8, 41u8, 163u8, 174u8, 166u8, 9u8, 119u8, 226u8, 21u8, 63u8,
              92u8, 9u8, 251u8, 180u8, 106u8, 144u8,
            ]
          {
            let entry = NextKeys(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The next session keys for a validator."]
        pub async fn next_keys_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, NextKeys<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<NextKeys>()?
          };
          if runtime_storage_hash
            == [
              12u8, 86u8, 103u8, 231u8, 0u8, 69u8, 40u8, 44u8, 241u8, 127u8, 71u8, 165u8, 114u8,
              228u8, 159u8, 104u8, 109u8, 41u8, 163u8, 174u8, 166u8, 9u8, 119u8, 226u8, 21u8, 63u8,
              92u8, 9u8, 251u8, 180u8, 106u8, 144u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
        pub async fn key_owner(
          &self,
          _0: &runtime_types::sp_core::crypto::KeyTypeId,
          _1: &[::core::primitive::u8],
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<KeyOwner>()?
          };
          if runtime_storage_hash
            == [
              49u8, 245u8, 212u8, 141u8, 211u8, 208u8, 109u8, 102u8, 249u8, 161u8, 41u8, 93u8,
              220u8, 230u8, 14u8, 59u8, 251u8, 176u8, 33u8, 127u8, 93u8, 149u8, 205u8, 229u8,
              113u8, 129u8, 162u8, 177u8, 155u8, 216u8, 151u8, 57u8,
            ]
          {
            let entry = KeyOwner(_0, _1);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
        pub async fn key_owner_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, KeyOwner<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<KeyOwner>()?
          };
          if runtime_storage_hash
            == [
              49u8, 245u8, 212u8, 141u8, 211u8, 208u8, 109u8, 102u8, 249u8, 161u8, 41u8, 93u8,
              220u8, 230u8, 14u8, 59u8, 251u8, 176u8, 33u8, 127u8, 93u8, 149u8, 205u8, 229u8,
              113u8, 129u8, 162u8, 177u8, 155u8, 216u8, 151u8, 57u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod grandpa {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ReportEquivocation {
        pub equivocation_proof: ::std::boxed::Box<
          runtime_types::sp_finality_grandpa::EquivocationProof<
            ::subxt::sp_core::H256,
            ::core::primitive::u32,
          >,
        >,
        pub key_owner_proof: runtime_types::sp_session::MembershipProof,
      }
      impl ::subxt::Call for ReportEquivocation {
        const PALLET: &'static str = "Grandpa";
        const FUNCTION: &'static str = "report_equivocation";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ReportEquivocationUnsigned {
        pub equivocation_proof: ::std::boxed::Box<
          runtime_types::sp_finality_grandpa::EquivocationProof<
            ::subxt::sp_core::H256,
            ::core::primitive::u32,
          >,
        >,
        pub key_owner_proof: runtime_types::sp_session::MembershipProof,
      }
      impl ::subxt::Call for ReportEquivocationUnsigned {
        const PALLET: &'static str = "Grandpa";
        const FUNCTION: &'static str = "report_equivocation_unsigned";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct NoteStalled {
        pub delay: ::core::primitive::u32,
        pub best_finalized_block_number: ::core::primitive::u32,
      }
      impl ::subxt::Call for NoteStalled {
        const PALLET: &'static str = "Grandpa";
        const FUNCTION: &'static str = "note_stalled";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
        #[doc = "equivocation proof and validate the given key ownership proof"]
        #[doc = "against the extracted offender. If both are valid, the offence"]
        #[doc = "will be reported."]
        pub fn report_equivocation(
          &self,
          equivocation_proof: runtime_types::sp_finality_grandpa::EquivocationProof<
            ::subxt::sp_core::H256,
            ::core::primitive::u32,
          >,
          key_owner_proof: runtime_types::sp_session::MembershipProof,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ReportEquivocation,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ReportEquivocation>()?
          };
          if runtime_call_hash
            == [
              230u8, 252u8, 24u8, 207u8, 164u8, 127u8, 177u8, 30u8, 113u8, 175u8, 207u8, 252u8,
              230u8, 225u8, 181u8, 190u8, 236u8, 110u8, 145u8, 168u8, 200u8, 134u8, 88u8, 234u8,
              231u8, 45u8, 149u8, 169u8, 155u8, 114u8, 62u8, 65u8,
            ]
          {
            let call = ReportEquivocation {
              equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
              key_owner_proof,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
        #[doc = "equivocation proof and validate the given key ownership proof"]
        #[doc = "against the extracted offender. If both are valid, the offence"]
        #[doc = "will be reported."]
        #[doc = ""]
        #[doc = "This extrinsic must be called unsigned and it is expected that only"]
        #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
        #[doc = "if the block author is defined it will be defined as the equivocation"]
        #[doc = "reporter."]
        pub fn report_equivocation_unsigned(
          &self,
          equivocation_proof: runtime_types::sp_finality_grandpa::EquivocationProof<
            ::subxt::sp_core::H256,
            ::core::primitive::u32,
          >,
          key_owner_proof: runtime_types::sp_session::MembershipProof,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ReportEquivocationUnsigned,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ReportEquivocationUnsigned>()?
          };
          if runtime_call_hash
            == [
              141u8, 235u8, 27u8, 135u8, 124u8, 124u8, 234u8, 51u8, 100u8, 105u8, 188u8, 248u8,
              133u8, 10u8, 84u8, 14u8, 40u8, 235u8, 14u8, 107u8, 63u8, 148u8, 107u8, 172u8, 136u8,
              159u8, 86u8, 23u8, 145u8, 221u8, 93u8, 206u8,
            ]
          {
            let call = ReportEquivocationUnsigned {
              equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
              key_owner_proof,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Note that the current authority set of the GRANDPA finality gadget has"]
        #[doc = "stalled. This will trigger a forced authority set change at the beginning"]
        #[doc = "of the next session, to be enacted `delay` blocks after that. The delay"]
        #[doc = "should be high enough to safely assume that the block signalling the"]
        #[doc = "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters"]
        #[doc = "will start the new authority set using the given finalized block as base."]
        #[doc = "Only callable by root."]
        pub fn note_stalled(
          &self,
          delay: ::core::primitive::u32,
          best_finalized_block_number: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, NoteStalled, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<NoteStalled>()?
          };
          if runtime_call_hash
            == [
              227u8, 98u8, 249u8, 158u8, 96u8, 124u8, 72u8, 188u8, 27u8, 215u8, 73u8, 62u8, 103u8,
              79u8, 38u8, 48u8, 212u8, 88u8, 233u8, 187u8, 11u8, 95u8, 39u8, 247u8, 55u8, 184u8,
              228u8, 102u8, 13u8, 251u8, 52u8, 206u8,
            ]
          {
            let call = NoteStalled {
              delay,
              best_finalized_block_number,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_grandpa::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "New authority set has been applied."]
      pub struct NewAuthorities {
        pub authority_set: ::std::vec::Vec<(
          runtime_types::sp_finality_grandpa::app::Public,
          ::core::primitive::u64,
        )>,
      }
      impl ::subxt::Event for NewAuthorities {
        const PALLET: &'static str = "Grandpa";
        const EVENT: &'static str = "NewAuthorities";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Current authority set has been paused."]
      pub struct Paused;
      impl ::subxt::Event for Paused {
        const PALLET: &'static str = "Grandpa";
        const EVENT: &'static str = "Paused";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Current authority set has been resumed."]
      pub struct Resumed;
      impl ::subxt::Event for Resumed {
        const PALLET: &'static str = "Grandpa";
        const EVENT: &'static str = "Resumed";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct State;
      impl ::subxt::StorageEntry for State {
        const PALLET: &'static str = "Grandpa";
        const STORAGE: &'static str = "State";
        type Value = runtime_types::pallet_grandpa::StoredState<::core::primitive::u32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct PendingChange;
      impl ::subxt::StorageEntry for PendingChange {
        const PALLET: &'static str = "Grandpa";
        const STORAGE: &'static str = "PendingChange";
        type Value = runtime_types::pallet_grandpa::StoredPendingChange<::core::primitive::u32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct NextForced;
      impl ::subxt::StorageEntry for NextForced {
        const PALLET: &'static str = "Grandpa";
        const STORAGE: &'static str = "NextForced";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Stalled;
      impl ::subxt::StorageEntry for Stalled {
        const PALLET: &'static str = "Grandpa";
        const STORAGE: &'static str = "Stalled";
        type Value = (::core::primitive::u32, ::core::primitive::u32);
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct CurrentSetId;
      impl ::subxt::StorageEntry for CurrentSetId {
        const PALLET: &'static str = "Grandpa";
        const STORAGE: &'static str = "CurrentSetId";
        type Value = ::core::primitive::u64;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct SetIdSession<'a>(pub &'a ::core::primitive::u64);
      impl ::subxt::StorageEntry for SetIdSession<'_> {
        const PALLET: &'static str = "Grandpa";
        const STORAGE: &'static str = "SetIdSession";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " State of the current authority set."]
        pub async fn state(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_grandpa::StoredState<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<State>()?
          };
          if runtime_storage_hash
            == [
              159u8, 75u8, 78u8, 23u8, 98u8, 89u8, 239u8, 230u8, 192u8, 67u8, 139u8, 222u8, 151u8,
              237u8, 216u8, 20u8, 235u8, 247u8, 180u8, 24u8, 64u8, 160u8, 58u8, 15u8, 205u8, 191u8,
              120u8, 68u8, 32u8, 5u8, 161u8, 106u8,
            ]
          {
            let entry = State;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Pending change: (signaled at, scheduled change)."]
        pub async fn pending_change(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_grandpa::StoredPendingChange<::core::primitive::u32>,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<PendingChange>()?
          };
          if runtime_storage_hash
            == [
              128u8, 176u8, 209u8, 41u8, 231u8, 111u8, 205u8, 198u8, 154u8, 44u8, 228u8, 231u8,
              44u8, 110u8, 74u8, 9u8, 31u8, 86u8, 128u8, 244u8, 112u8, 21u8, 120u8, 176u8, 50u8,
              213u8, 122u8, 46u8, 85u8, 255u8, 40u8, 173u8,
            ]
          {
            let entry = PendingChange;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " next block number where we can force a change."]
        pub async fn next_forced(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<NextForced>()?
          };
          if runtime_storage_hash
            == [
              99u8, 43u8, 245u8, 201u8, 60u8, 9u8, 122u8, 99u8, 188u8, 29u8, 67u8, 6u8, 193u8,
              133u8, 179u8, 67u8, 202u8, 208u8, 62u8, 179u8, 19u8, 169u8, 196u8, 119u8, 107u8,
              75u8, 100u8, 3u8, 121u8, 18u8, 80u8, 156u8,
            ]
          {
            let entry = NextForced;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " `true` if we are currently stalled."]
        pub async fn stalled(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Stalled>()?
          };
          if runtime_storage_hash
            == [
              219u8, 8u8, 37u8, 78u8, 150u8, 55u8, 0u8, 57u8, 201u8, 170u8, 186u8, 189u8, 56u8,
              161u8, 44u8, 15u8, 53u8, 178u8, 224u8, 208u8, 231u8, 109u8, 14u8, 209u8, 57u8, 205u8,
              237u8, 153u8, 231u8, 156u8, 24u8, 185u8,
            ]
          {
            let entry = Stalled;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The number of changes (both in terms of keys and underlying economic responsibilities)"]
        #[doc = " in the \"set\" of Grandpa validators from genesis."]
        pub async fn current_set_id(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CurrentSetId>()?
          };
          if runtime_storage_hash
            == [
              129u8, 7u8, 62u8, 101u8, 199u8, 60u8, 56u8, 33u8, 54u8, 158u8, 20u8, 178u8, 244u8,
              145u8, 189u8, 197u8, 157u8, 163u8, 116u8, 36u8, 105u8, 52u8, 149u8, 244u8, 108u8,
              94u8, 109u8, 111u8, 244u8, 137u8, 7u8, 108u8,
            ]
          {
            let entry = CurrentSetId;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
        #[doc = " members were responsible."]
        #[doc = ""]
        #[doc = " TWOX-NOTE: `SetId` is not under user control."]
        pub async fn set_id_session(
          &self,
          _0: &::core::primitive::u64,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SetIdSession>()?
          };
          if runtime_storage_hash
            == [
              91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8, 166u8, 169u8,
              103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8, 108u8, 13u8, 88u8, 115u8,
              254u8, 9u8, 145u8, 199u8, 102u8, 47u8, 53u8, 134u8,
            ]
          {
            let entry = SetIdSession(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
        #[doc = " members were responsible."]
        #[doc = ""]
        #[doc = " TWOX-NOTE: `SetId` is not under user control."]
        pub async fn set_id_session_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, SetIdSession<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SetIdSession>()?
          };
          if runtime_storage_hash
            == [
              91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8, 166u8, 169u8,
              103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8, 108u8, 13u8, 88u8, 115u8,
              254u8, 9u8, 145u8, 199u8, 102u8, 47u8, 53u8, 134u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Max Authorities in use"]
        pub fn max_authorities(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Grandpa", "MaxAuthorities")?
            == [
              248u8, 195u8, 131u8, 166u8, 10u8, 50u8, 71u8, 223u8, 41u8, 49u8, 43u8, 99u8, 251u8,
              113u8, 75u8, 193u8, 159u8, 15u8, 77u8, 217u8, 147u8, 205u8, 165u8, 50u8, 6u8, 166u8,
              77u8, 189u8, 102u8, 22u8, 201u8, 19u8,
            ]
          {
            let pallet = metadata.pallet("Grandpa")?;
            let constant = pallet.constant("MaxAuthorities")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod im_online {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Heartbeat {
        pub heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
        pub signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
      }
      impl ::subxt::Call for Heartbeat {
        const PALLET: &'static str = "ImOnline";
        const FUNCTION: &'static str = "heartbeat";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "# <weight>"]
        #[doc = "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is"]
        #[doc = "  length of `heartbeat.network_state.external_address`"]
        #[doc = "  - `O(K)`: decoding of length `K`"]
        #[doc = "  - `O(E)`: decoding/encoding of length `E`"]
        #[doc = "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,"]
        #[doc = "  `ReceivedHeartbeats`"]
        #[doc = "- DbWrites: `ReceivedHeartbeats`"]
        #[doc = "# </weight>"]
        pub fn heartbeat(
          &self,
          heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
          signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Heartbeat, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Heartbeat>()?
          };
          if runtime_call_hash
            == [
              246u8, 83u8, 28u8, 233u8, 69u8, 55u8, 28u8, 178u8, 82u8, 159u8, 56u8, 241u8, 111u8,
              78u8, 194u8, 15u8, 14u8, 250u8, 172u8, 148u8, 208u8, 52u8, 33u8, 106u8, 159u8, 210u8,
              196u8, 79u8, 138u8, 194u8, 150u8, 201u8,
            ]
          {
            let call = Heartbeat {
              heartbeat,
              signature,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_im_online::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A new heartbeat was received from `AuthorityId`."]
      pub struct HeartbeatReceived {
        pub authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
      }
      impl ::subxt::Event for HeartbeatReceived {
        const PALLET: &'static str = "ImOnline";
        const EVENT: &'static str = "HeartbeatReceived";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "At the end of the session, no offence was committed."]
      pub struct AllGood;
      impl ::subxt::Event for AllGood {
        const PALLET: &'static str = "ImOnline";
        const EVENT: &'static str = "AllGood";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "At the end of the session, at least one validator was found to be offline."]
      pub struct SomeOffline {
        pub offline: ::std::vec::Vec<(
          ::subxt::sp_core::crypto::AccountId32,
          runtime_types::pallet_staking::Exposure<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u128,
          >,
        )>,
      }
      impl ::subxt::Event for SomeOffline {
        const PALLET: &'static str = "ImOnline";
        const EVENT: &'static str = "SomeOffline";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct HeartbeatAfter;
      impl ::subxt::StorageEntry for HeartbeatAfter {
        const PALLET: &'static str = "ImOnline";
        const STORAGE: &'static str = "HeartbeatAfter";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Keys;
      impl ::subxt::StorageEntry for Keys {
        const PALLET: &'static str = "ImOnline";
        const STORAGE: &'static str = "Keys";
        type Value = runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
          runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ReceivedHeartbeats<'a>(
        pub &'a ::core::primitive::u32,
        pub &'a ::core::primitive::u32,
      );
      impl ::subxt::StorageEntry for ReceivedHeartbeats<'_> {
        const PALLET: &'static str = "ImOnline";
        const STORAGE: &'static str = "ReceivedHeartbeats";
        type Value = runtime_types::frame_support::traits::misc::WrapperOpaque<
          runtime_types::pallet_im_online::BoundedOpaqueNetworkState,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
          ])
        }
      }
      pub struct AuthoredBlocks<'a>(
        pub &'a ::core::primitive::u32,
        pub &'a ::subxt::sp_core::crypto::AccountId32,
      );
      impl ::subxt::StorageEntry for AuthoredBlocks<'_> {
        const PALLET: &'static str = "ImOnline";
        const STORAGE: &'static str = "AuthoredBlocks";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
          ])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The block number after which it's ok to send heartbeats in the current"]
        #[doc = " session."]
        #[doc = ""]
        #[doc = " At the beginning of each session we set this to a value that should fall"]
        #[doc = " roughly in the middle of the session duration. The idea is to first wait for"]
        #[doc = " the validators to produce a block in the current session, so that the"]
        #[doc = " heartbeat later on will not be necessary."]
        #[doc = ""]
        #[doc = " This value will only be used as a fallback if we fail to get a proper session"]
        #[doc = " progress estimate from `NextSessionRotation`, as those estimates should be"]
        #[doc = " more accurate then the value we calculate for `HeartbeatAfter`."]
        pub async fn heartbeat_after(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<HeartbeatAfter>()?
          };
          if runtime_storage_hash
            == [
              108u8, 100u8, 85u8, 198u8, 226u8, 122u8, 94u8, 225u8, 97u8, 154u8, 135u8, 95u8,
              106u8, 28u8, 185u8, 78u8, 192u8, 196u8, 35u8, 191u8, 12u8, 19u8, 163u8, 46u8, 232u8,
              235u8, 193u8, 81u8, 126u8, 204u8, 25u8, 228u8,
            ]
          {
            let entry = HeartbeatAfter;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The current set of keys that may issue a heartbeat."]
        pub async fn keys(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
            runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Keys>()?
          };
          if runtime_storage_hash
            == [
              105u8, 250u8, 99u8, 106u8, 9u8, 29u8, 73u8, 176u8, 158u8, 247u8, 28u8, 171u8, 95u8,
              1u8, 109u8, 11u8, 231u8, 52u8, 54u8, 102u8, 142u8, 105u8, 209u8, 31u8, 132u8, 60u8,
              89u8, 181u8, 89u8, 193u8, 241u8, 130u8,
            ]
          {
            let entry = Keys;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to"]
        #[doc = " `WrapperOpaque<BoundedOpaqueNetworkState>`."]
        pub async fn received_heartbeats(
          &self,
          _0: &::core::primitive::u32,
          _1: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::frame_support::traits::misc::WrapperOpaque<
              runtime_types::pallet_im_online::BoundedOpaqueNetworkState,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ReceivedHeartbeats>()?
          };
          if runtime_storage_hash
            == [
              29u8, 40u8, 67u8, 222u8, 59u8, 104u8, 24u8, 193u8, 249u8, 200u8, 152u8, 225u8, 72u8,
              243u8, 140u8, 114u8, 121u8, 216u8, 54u8, 145u8, 205u8, 82u8, 133u8, 128u8, 109u8,
              54u8, 153u8, 118u8, 66u8, 147u8, 251u8, 148u8,
            ]
          {
            let entry = ReceivedHeartbeats(_0, _1);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to"]
        #[doc = " `WrapperOpaque<BoundedOpaqueNetworkState>`."]
        pub async fn received_heartbeats_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, ReceivedHeartbeats<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ReceivedHeartbeats>()?
          };
          if runtime_storage_hash
            == [
              29u8, 40u8, 67u8, 222u8, 59u8, 104u8, 24u8, 193u8, 249u8, 200u8, 152u8, 225u8, 72u8,
              243u8, 140u8, 114u8, 121u8, 216u8, 54u8, 145u8, 205u8, 82u8, 133u8, 128u8, 109u8,
              54u8, 153u8, 118u8, 66u8, 147u8, 251u8, 148u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " For each session index, we keep a mapping of `ValidatorId<T>` to the"]
        #[doc = " number of blocks authored by the given authority."]
        pub async fn authored_blocks(
          &self,
          _0: &::core::primitive::u32,
          _1: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AuthoredBlocks>()?
          };
          if runtime_storage_hash
            == [
              94u8, 193u8, 107u8, 126u8, 3u8, 13u8, 28u8, 151u8, 197u8, 226u8, 224u8, 48u8, 138u8,
              113u8, 31u8, 57u8, 111u8, 184u8, 218u8, 215u8, 185u8, 83u8, 209u8, 139u8, 114u8,
              241u8, 68u8, 110u8, 157u8, 208u8, 16u8, 22u8,
            ]
          {
            let entry = AuthoredBlocks(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " For each session index, we keep a mapping of `ValidatorId<T>` to the"]
        #[doc = " number of blocks authored by the given authority."]
        pub async fn authored_blocks_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, AuthoredBlocks<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AuthoredBlocks>()?
          };
          if runtime_storage_hash
            == [
              94u8, 193u8, 107u8, 126u8, 3u8, 13u8, 28u8, 151u8, 197u8, 226u8, 224u8, 48u8, 138u8,
              113u8, 31u8, 57u8, 111u8, 184u8, 218u8, 215u8, 185u8, 83u8, 209u8, 139u8, 114u8,
              241u8, 68u8, 110u8, 157u8, 208u8, 16u8, 22u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " A configuration for base priority of unsigned transactions."]
        #[doc = ""]
        #[doc = " This is exposed so that it can be tuned for particular runtime, when"]
        #[doc = " multiple pallets send unsigned transactions."]
        pub fn unsigned_priority(
          &self,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ImOnline", "UnsignedPriority")?
            == [
              78u8, 226u8, 84u8, 70u8, 162u8, 23u8, 167u8, 100u8, 156u8, 228u8, 119u8, 16u8, 28u8,
              202u8, 21u8, 71u8, 72u8, 244u8, 3u8, 255u8, 243u8, 55u8, 109u8, 238u8, 26u8, 180u8,
              207u8, 175u8, 221u8, 27u8, 213u8, 217u8,
            ]
          {
            let pallet = metadata.pallet("ImOnline")?;
            let constant = pallet.constant("UnsignedPriority")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod authority_discovery {
    use super::root_mod;
    use super::runtime_types;
  }
  pub mod council {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetMembers {
        pub new_members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        pub prime: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
        pub old_count: ::core::primitive::u32,
      }
      impl ::subxt::Call for SetMembers {
        const PALLET: &'static str = "Council";
        const FUNCTION: &'static str = "set_members";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Execute {
        pub proposal: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
        #[codec(compact)]
        pub length_bound: ::core::primitive::u32,
      }
      impl ::subxt::Call for Execute {
        const PALLET: &'static str = "Council";
        const FUNCTION: &'static str = "execute";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Propose {
        #[codec(compact)]
        pub threshold: ::core::primitive::u32,
        pub proposal: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
        #[codec(compact)]
        pub length_bound: ::core::primitive::u32,
      }
      impl ::subxt::Call for Propose {
        const PALLET: &'static str = "Council";
        const FUNCTION: &'static str = "propose";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Vote {
        pub proposal: ::subxt::sp_core::H256,
        #[codec(compact)]
        pub index: ::core::primitive::u32,
        pub approve: ::core::primitive::bool,
      }
      impl ::subxt::Call for Vote {
        const PALLET: &'static str = "Council";
        const FUNCTION: &'static str = "vote";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Close {
        pub proposal_hash: ::subxt::sp_core::H256,
        #[codec(compact)]
        pub index: ::core::primitive::u32,
        #[codec(compact)]
        pub proposal_weight_bound: ::core::primitive::u64,
        #[codec(compact)]
        pub length_bound: ::core::primitive::u32,
      }
      impl ::subxt::Call for Close {
        const PALLET: &'static str = "Council";
        const FUNCTION: &'static str = "close";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct DisapproveProposal {
        pub proposal_hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for DisapproveProposal {
        const PALLET: &'static str = "Council";
        const FUNCTION: &'static str = "disapprove_proposal";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Set the collective's membership."]
        #[doc = ""]
        #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
        #[doc = "- `prime`: The prime member whose vote sets the default."]
        #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
        #[doc = "  weight estimation."]
        #[doc = ""]
        #[doc = "Requires root origin."]
        #[doc = ""]
        #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
        #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
        #[doc = ""]
        #[doc = "# WARNING:"]
        #[doc = ""]
        #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
        #[doc = "implementation of the trait [`ChangeMembers`]."]
        #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
        #[doc = "with other logic managing the member set."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "## Weight"]
        #[doc = "- `O(MP + N)` where:"]
        #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
        #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
        #[doc = "  - `P` proposals-count (code-bounded)"]
        #[doc = "- DB:"]
        #[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
        #[doc = "    members"]
        #[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
        #[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
        #[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
        #[doc = "# </weight>"]
        pub fn set_members(
          &self,
          new_members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          prime: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          old_count: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetMembers, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetMembers>()?
          };
          if runtime_call_hash
            == [
              228u8, 186u8, 17u8, 12u8, 231u8, 231u8, 139u8, 15u8, 96u8, 200u8, 68u8, 27u8, 61u8,
              106u8, 245u8, 199u8, 120u8, 141u8, 95u8, 215u8, 36u8, 49u8, 0u8, 163u8, 172u8, 252u8,
              221u8, 9u8, 1u8, 222u8, 44u8, 214u8,
            ]
          {
            let call = SetMembers {
              new_members,
              prime,
              old_count,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Dispatch a proposal from a member using the `Member` origin."]
        #[doc = ""]
        #[doc = "Origin must be a member of the collective."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "## Weight"]
        #[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
        #[doc = "  `proposal`"]
        #[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
        #[doc = "- 1 event"]
        #[doc = "# </weight>"]
        pub fn execute(
          &self,
          proposal: runtime_types::lagoon_runtime::Call,
          length_bound: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Execute, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Execute>()?
          };
          if runtime_call_hash
            == [
              216u8, 4u8, 156u8, 208u8, 47u8, 18u8, 88u8, 160u8, 75u8, 36u8, 106u8, 179u8, 160u8,
              74u8, 133u8, 4u8, 145u8, 246u8, 96u8, 246u8, 86u8, 11u8, 178u8, 178u8, 109u8, 72u8,
              45u8, 152u8, 169u8, 12u8, 157u8, 249u8,
            ]
          {
            let call = Execute {
              proposal: ::std::boxed::Box::new(proposal),
              length_bound,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Add a new proposal to either be voted on or executed directly."]
        #[doc = ""]
        #[doc = "Requires the sender to be member."]
        #[doc = ""]
        #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
        #[doc = "or put up for voting."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "## Weight"]
        #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
        #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
        #[doc = "  - `M` is members-count (code- and governance-bounded)"]
        #[doc = "  - branching is influenced by `threshold` where:"]
        #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
        #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
        #[doc = "- DB:"]
        #[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
        #[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
        #[doc = "  - DB accesses influenced by `threshold`:"]
        #[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
        #[doc = "    - OR proposal insertion (`threshold <= 2`)"]
        #[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
        #[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
        #[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
        #[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
        #[doc = "  - 1 event"]
        #[doc = "# </weight>"]
        pub fn propose(
          &self,
          threshold: ::core::primitive::u32,
          proposal: runtime_types::lagoon_runtime::Call,
          length_bound: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Propose, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Propose>()?
          };
          if runtime_call_hash
            == [
              138u8, 182u8, 211u8, 174u8, 21u8, 187u8, 70u8, 217u8, 130u8, 87u8, 187u8, 152u8,
              220u8, 229u8, 249u8, 29u8, 65u8, 106u8, 1u8, 183u8, 132u8, 162u8, 25u8, 163u8, 195u8,
              234u8, 84u8, 101u8, 144u8, 1u8, 66u8, 187u8,
            ]
          {
            let call = Propose {
              threshold,
              proposal: ::std::boxed::Box::new(proposal),
              length_bound,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Add an aye or nay vote for the sender to the given proposal."]
        #[doc = ""]
        #[doc = "Requires the sender to be a member."]
        #[doc = ""]
        #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
        #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
        #[doc = "fee."]
        #[doc = "# <weight>"]
        #[doc = "## Weight"]
        #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
        #[doc = "- DB:"]
        #[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
        #[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
        #[doc = "- 1 event"]
        #[doc = "# </weight>"]
        pub fn vote(
          &self,
          proposal: ::subxt::sp_core::H256,
          index: ::core::primitive::u32,
          approve: ::core::primitive::bool,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Vote, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Vote>()?
          };
          if runtime_call_hash
            == [
              184u8, 236u8, 80u8, 133u8, 26u8, 207u8, 3u8, 2u8, 120u8, 27u8, 38u8, 135u8, 195u8,
              86u8, 169u8, 229u8, 125u8, 253u8, 220u8, 120u8, 231u8, 181u8, 101u8, 84u8, 151u8,
              161u8, 39u8, 154u8, 183u8, 142u8, 165u8, 161u8,
            ]
          {
            let call = Vote {
              proposal,
              index,
              approve,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
        #[doc = ""]
        #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
        #[doc = ""]
        #[doc = "If called before the end of the voting period it will only close the vote if it is"]
        #[doc = "has enough votes to be approved or disapproved."]
        #[doc = ""]
        #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
        #[doc = "unless there is a prime member set and the prime member cast an approval."]
        #[doc = ""]
        #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
        #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
        #[doc = ""]
        #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
        #[doc = "proposal."]
        #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
        #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "## Weight"]
        #[doc = "- `O(B + M + P1 + P2)` where:"]
        #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
        #[doc = "  - `M` is members-count (code- and governance-bounded)"]
        #[doc = "  - `P1` is the complexity of `proposal` preimage."]
        #[doc = "  - `P2` is proposal-count (code-bounded)"]
        #[doc = "- DB:"]
        #[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
        #[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
        #[doc = "   `O(P2)`)"]
        #[doc = " - any mutations done while executing `proposal` (`P1`)"]
        #[doc = "- up to 3 events"]
        #[doc = "# </weight>"]
        pub fn close(
          &self,
          proposal_hash: ::subxt::sp_core::H256,
          index: ::core::primitive::u32,
          proposal_weight_bound: ::core::primitive::u64,
          length_bound: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Close, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Close>()?
          };
          if runtime_call_hash
            == [
              242u8, 208u8, 108u8, 202u8, 24u8, 139u8, 8u8, 150u8, 108u8, 217u8, 30u8, 209u8,
              178u8, 1u8, 80u8, 25u8, 154u8, 146u8, 173u8, 172u8, 227u8, 4u8, 140u8, 228u8, 58u8,
              221u8, 189u8, 135u8, 203u8, 69u8, 105u8, 47u8,
            ]
          {
            let call = Close {
              proposal_hash,
              index,
              proposal_weight_bound,
              length_bound,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
        #[doc = "state."]
        #[doc = ""]
        #[doc = "Must be called by the Root origin."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Complexity: O(P) where P is the number of max proposals"]
        #[doc = "DB Weight:"]
        #[doc = "* Reads: Proposals"]
        #[doc = "* Writes: Voting, Proposals, ProposalOf"]
        #[doc = "# </weight>"]
        pub fn disapprove_proposal(
          &self,
          proposal_hash: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            DisapproveProposal,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<DisapproveProposal>()?
          };
          if runtime_call_hash
            == [
              199u8, 113u8, 221u8, 167u8, 60u8, 241u8, 77u8, 166u8, 205u8, 191u8, 183u8, 121u8,
              191u8, 206u8, 230u8, 212u8, 215u8, 219u8, 30u8, 51u8, 123u8, 18u8, 17u8, 218u8, 77u8,
              227u8, 197u8, 95u8, 232u8, 59u8, 169u8, 133u8,
            ]
          {
            let call = DisapproveProposal { proposal_hash };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_collective::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
      #[doc = "`MemberCount`)."]
      pub struct Proposed {
        pub account: ::subxt::sp_core::crypto::AccountId32,
        pub proposal_index: ::core::primitive::u32,
        pub proposal_hash: ::subxt::sp_core::H256,
        pub threshold: ::core::primitive::u32,
      }
      impl ::subxt::Event for Proposed {
        const PALLET: &'static str = "Council";
        const EVENT: &'static str = "Proposed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A motion (given hash) has been voted on by given account, leaving"]
      #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
      pub struct Voted {
        pub account: ::subxt::sp_core::crypto::AccountId32,
        pub proposal_hash: ::subxt::sp_core::H256,
        pub voted: ::core::primitive::bool,
        pub yes: ::core::primitive::u32,
        pub no: ::core::primitive::u32,
      }
      impl ::subxt::Event for Voted {
        const PALLET: &'static str = "Council";
        const EVENT: &'static str = "Voted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A motion was approved by the required threshold."]
      pub struct Approved {
        pub proposal_hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for Approved {
        const PALLET: &'static str = "Council";
        const EVENT: &'static str = "Approved";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A motion was not approved by the required threshold."]
      pub struct Disapproved {
        pub proposal_hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for Disapproved {
        const PALLET: &'static str = "Council";
        const EVENT: &'static str = "Disapproved";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
      pub struct Executed {
        pub proposal_hash: ::subxt::sp_core::H256,
        pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
      }
      impl ::subxt::Event for Executed {
        const PALLET: &'static str = "Council";
        const EVENT: &'static str = "Executed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
      pub struct MemberExecuted {
        pub proposal_hash: ::subxt::sp_core::H256,
        pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
      }
      impl ::subxt::Event for MemberExecuted {
        const PALLET: &'static str = "Council";
        const EVENT: &'static str = "MemberExecuted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
      pub struct Closed {
        pub proposal_hash: ::subxt::sp_core::H256,
        pub yes: ::core::primitive::u32,
        pub no: ::core::primitive::u32,
      }
      impl ::subxt::Event for Closed {
        const PALLET: &'static str = "Council";
        const EVENT: &'static str = "Closed";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Proposals;
      impl ::subxt::StorageEntry for Proposals {
        const PALLET: &'static str = "Council";
        const STORAGE: &'static str = "Proposals";
        type Value =
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::subxt::sp_core::H256>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ProposalOf<'a>(pub &'a ::subxt::sp_core::H256);
      impl ::subxt::StorageEntry for ProposalOf<'_> {
        const PALLET: &'static str = "Council";
        const STORAGE: &'static str = "ProposalOf";
        type Value = runtime_types::lagoon_runtime::Call;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Identity,
          )])
        }
      }
      pub struct Voting<'a>(pub &'a ::subxt::sp_core::H256);
      impl ::subxt::StorageEntry for Voting<'_> {
        const PALLET: &'static str = "Council";
        const STORAGE: &'static str = "Voting";
        type Value = runtime_types::pallet_collective::Votes<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Identity,
          )])
        }
      }
      pub struct ProposalCount;
      impl ::subxt::StorageEntry for ProposalCount {
        const PALLET: &'static str = "Council";
        const STORAGE: &'static str = "ProposalCount";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Members;
      impl ::subxt::StorageEntry for Members {
        const PALLET: &'static str = "Council";
        const STORAGE: &'static str = "Members";
        type Value = ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Prime;
      impl ::subxt::StorageEntry for Prime {
        const PALLET: &'static str = "Council";
        const STORAGE: &'static str = "Prime";
        type Value = ::subxt::sp_core::crypto::AccountId32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The hashes of the active proposals."]
        pub async fn proposals(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::subxt::sp_core::H256>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Proposals>()?
          };
          if runtime_storage_hash
            == [
              174u8, 75u8, 108u8, 245u8, 86u8, 50u8, 107u8, 212u8, 244u8, 113u8, 232u8, 168u8,
              194u8, 33u8, 247u8, 97u8, 54u8, 115u8, 236u8, 189u8, 59u8, 2u8, 252u8, 84u8, 199u8,
              127u8, 197u8, 72u8, 23u8, 1u8, 118u8, 95u8,
            ]
          {
            let entry = Proposals;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Actual proposal for a given hash, if it's current."]
        pub async fn proposal_of(
          &self,
          _0: &::subxt::sp_core::H256,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::lagoon_runtime::Call>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ProposalOf>()?
          };
          if runtime_storage_hash
            == [
              200u8, 172u8, 37u8, 142u8, 57u8, 119u8, 96u8, 17u8, 59u8, 54u8, 220u8, 6u8, 11u8,
              204u8, 252u8, 241u8, 37u8, 174u8, 60u8, 46u8, 185u8, 224u8, 142u8, 133u8, 245u8,
              157u8, 77u8, 76u8, 79u8, 130u8, 57u8, 6u8,
            ]
          {
            let entry = ProposalOf(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Actual proposal for a given hash, if it's current."]
        pub async fn proposal_of_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, ProposalOf<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ProposalOf>()?
          };
          if runtime_storage_hash
            == [
              200u8, 172u8, 37u8, 142u8, 57u8, 119u8, 96u8, 17u8, 59u8, 54u8, 220u8, 6u8, 11u8,
              204u8, 252u8, 241u8, 37u8, 174u8, 60u8, 46u8, 185u8, 224u8, 142u8, 133u8, 245u8,
              157u8, 77u8, 76u8, 79u8, 130u8, 57u8, 6u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Votes on a given proposal, if it is ongoing."]
        pub async fn voting(
          &self,
          _0: &::subxt::sp_core::H256,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_collective::Votes<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Voting>()?
          };
          if runtime_storage_hash
            == [
              145u8, 223u8, 203u8, 2u8, 137u8, 33u8, 22u8, 239u8, 175u8, 149u8, 254u8, 185u8, 0u8,
              139u8, 71u8, 134u8, 109u8, 95u8, 45u8, 75u8, 33u8, 228u8, 127u8, 67u8, 53u8, 119u8,
              188u8, 198u8, 11u8, 92u8, 4u8, 177u8,
            ]
          {
            let entry = Voting(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Votes on a given proposal, if it is ongoing."]
        pub async fn voting_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Voting<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Voting>()?
          };
          if runtime_storage_hash
            == [
              145u8, 223u8, 203u8, 2u8, 137u8, 33u8, 22u8, 239u8, 175u8, 149u8, 254u8, 185u8, 0u8,
              139u8, 71u8, 134u8, 109u8, 95u8, 45u8, 75u8, 33u8, 228u8, 127u8, 67u8, 53u8, 119u8,
              188u8, 198u8, 11u8, 92u8, 4u8, 177u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Proposals so far."]
        pub async fn proposal_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ProposalCount>()?
          };
          if runtime_storage_hash
            == [
              132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8, 140u8, 99u8, 124u8,
              208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8, 24u8, 149u8, 109u8, 105u8, 30u8, 83u8,
              39u8, 177u8, 127u8, 160u8, 34u8, 70u8,
            ]
          {
            let entry = ProposalCount;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The current members of the collective. This is stored sorted (just by value)."]
        pub async fn members(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Members>()?
          };
          if runtime_storage_hash
            == [
              136u8, 91u8, 140u8, 173u8, 238u8, 221u8, 4u8, 132u8, 238u8, 99u8, 195u8, 142u8, 10u8,
              35u8, 210u8, 227u8, 22u8, 72u8, 218u8, 222u8, 227u8, 51u8, 55u8, 31u8, 252u8, 78u8,
              195u8, 11u8, 195u8, 242u8, 171u8, 75u8,
            ]
          {
            let entry = Members;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
        pub async fn prime(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Prime>()?
          };
          if runtime_storage_hash
            == [
              70u8, 101u8, 20u8, 160u8, 173u8, 87u8, 190u8, 85u8, 60u8, 249u8, 144u8, 77u8, 175u8,
              195u8, 51u8, 196u8, 234u8, 62u8, 243u8, 199u8, 126u8, 12u8, 88u8, 252u8, 1u8, 210u8,
              65u8, 210u8, 33u8, 19u8, 222u8, 11u8,
            ]
          {
            let entry = Prime;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod technical_committee {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetMembers {
        pub new_members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        pub prime: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
        pub old_count: ::core::primitive::u32,
      }
      impl ::subxt::Call for SetMembers {
        const PALLET: &'static str = "TechnicalCommittee";
        const FUNCTION: &'static str = "set_members";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Execute {
        pub proposal: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
        #[codec(compact)]
        pub length_bound: ::core::primitive::u32,
      }
      impl ::subxt::Call for Execute {
        const PALLET: &'static str = "TechnicalCommittee";
        const FUNCTION: &'static str = "execute";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Propose {
        #[codec(compact)]
        pub threshold: ::core::primitive::u32,
        pub proposal: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
        #[codec(compact)]
        pub length_bound: ::core::primitive::u32,
      }
      impl ::subxt::Call for Propose {
        const PALLET: &'static str = "TechnicalCommittee";
        const FUNCTION: &'static str = "propose";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Vote {
        pub proposal: ::subxt::sp_core::H256,
        #[codec(compact)]
        pub index: ::core::primitive::u32,
        pub approve: ::core::primitive::bool,
      }
      impl ::subxt::Call for Vote {
        const PALLET: &'static str = "TechnicalCommittee";
        const FUNCTION: &'static str = "vote";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Close {
        pub proposal_hash: ::subxt::sp_core::H256,
        #[codec(compact)]
        pub index: ::core::primitive::u32,
        #[codec(compact)]
        pub proposal_weight_bound: ::core::primitive::u64,
        #[codec(compact)]
        pub length_bound: ::core::primitive::u32,
      }
      impl ::subxt::Call for Close {
        const PALLET: &'static str = "TechnicalCommittee";
        const FUNCTION: &'static str = "close";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct DisapproveProposal {
        pub proposal_hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for DisapproveProposal {
        const PALLET: &'static str = "TechnicalCommittee";
        const FUNCTION: &'static str = "disapprove_proposal";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Set the collective's membership."]
        #[doc = ""]
        #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
        #[doc = "- `prime`: The prime member whose vote sets the default."]
        #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
        #[doc = "  weight estimation."]
        #[doc = ""]
        #[doc = "Requires root origin."]
        #[doc = ""]
        #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
        #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
        #[doc = ""]
        #[doc = "# WARNING:"]
        #[doc = ""]
        #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
        #[doc = "implementation of the trait [`ChangeMembers`]."]
        #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
        #[doc = "with other logic managing the member set."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "## Weight"]
        #[doc = "- `O(MP + N)` where:"]
        #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
        #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
        #[doc = "  - `P` proposals-count (code-bounded)"]
        #[doc = "- DB:"]
        #[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
        #[doc = "    members"]
        #[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
        #[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
        #[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
        #[doc = "# </weight>"]
        pub fn set_members(
          &self,
          new_members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          prime: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          old_count: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetMembers, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetMembers>()?
          };
          if runtime_call_hash
            == [
              228u8, 186u8, 17u8, 12u8, 231u8, 231u8, 139u8, 15u8, 96u8, 200u8, 68u8, 27u8, 61u8,
              106u8, 245u8, 199u8, 120u8, 141u8, 95u8, 215u8, 36u8, 49u8, 0u8, 163u8, 172u8, 252u8,
              221u8, 9u8, 1u8, 222u8, 44u8, 214u8,
            ]
          {
            let call = SetMembers {
              new_members,
              prime,
              old_count,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Dispatch a proposal from a member using the `Member` origin."]
        #[doc = ""]
        #[doc = "Origin must be a member of the collective."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "## Weight"]
        #[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
        #[doc = "  `proposal`"]
        #[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
        #[doc = "- 1 event"]
        #[doc = "# </weight>"]
        pub fn execute(
          &self,
          proposal: runtime_types::lagoon_runtime::Call,
          length_bound: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Execute, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Execute>()?
          };
          if runtime_call_hash
            == [
              216u8, 4u8, 156u8, 208u8, 47u8, 18u8, 88u8, 160u8, 75u8, 36u8, 106u8, 179u8, 160u8,
              74u8, 133u8, 4u8, 145u8, 246u8, 96u8, 246u8, 86u8, 11u8, 178u8, 178u8, 109u8, 72u8,
              45u8, 152u8, 169u8, 12u8, 157u8, 249u8,
            ]
          {
            let call = Execute {
              proposal: ::std::boxed::Box::new(proposal),
              length_bound,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Add a new proposal to either be voted on or executed directly."]
        #[doc = ""]
        #[doc = "Requires the sender to be member."]
        #[doc = ""]
        #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
        #[doc = "or put up for voting."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "## Weight"]
        #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
        #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
        #[doc = "  - `M` is members-count (code- and governance-bounded)"]
        #[doc = "  - branching is influenced by `threshold` where:"]
        #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
        #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
        #[doc = "- DB:"]
        #[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
        #[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
        #[doc = "  - DB accesses influenced by `threshold`:"]
        #[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
        #[doc = "    - OR proposal insertion (`threshold <= 2`)"]
        #[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
        #[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
        #[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
        #[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
        #[doc = "  - 1 event"]
        #[doc = "# </weight>"]
        pub fn propose(
          &self,
          threshold: ::core::primitive::u32,
          proposal: runtime_types::lagoon_runtime::Call,
          length_bound: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Propose, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Propose>()?
          };
          if runtime_call_hash
            == [
              138u8, 182u8, 211u8, 174u8, 21u8, 187u8, 70u8, 217u8, 130u8, 87u8, 187u8, 152u8,
              220u8, 229u8, 249u8, 29u8, 65u8, 106u8, 1u8, 183u8, 132u8, 162u8, 25u8, 163u8, 195u8,
              234u8, 84u8, 101u8, 144u8, 1u8, 66u8, 187u8,
            ]
          {
            let call = Propose {
              threshold,
              proposal: ::std::boxed::Box::new(proposal),
              length_bound,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Add an aye or nay vote for the sender to the given proposal."]
        #[doc = ""]
        #[doc = "Requires the sender to be a member."]
        #[doc = ""]
        #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
        #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
        #[doc = "fee."]
        #[doc = "# <weight>"]
        #[doc = "## Weight"]
        #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
        #[doc = "- DB:"]
        #[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
        #[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
        #[doc = "- 1 event"]
        #[doc = "# </weight>"]
        pub fn vote(
          &self,
          proposal: ::subxt::sp_core::H256,
          index: ::core::primitive::u32,
          approve: ::core::primitive::bool,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Vote, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Vote>()?
          };
          if runtime_call_hash
            == [
              184u8, 236u8, 80u8, 133u8, 26u8, 207u8, 3u8, 2u8, 120u8, 27u8, 38u8, 135u8, 195u8,
              86u8, 169u8, 229u8, 125u8, 253u8, 220u8, 120u8, 231u8, 181u8, 101u8, 84u8, 151u8,
              161u8, 39u8, 154u8, 183u8, 142u8, 165u8, 161u8,
            ]
          {
            let call = Vote {
              proposal,
              index,
              approve,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
        #[doc = ""]
        #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
        #[doc = ""]
        #[doc = "If called before the end of the voting period it will only close the vote if it is"]
        #[doc = "has enough votes to be approved or disapproved."]
        #[doc = ""]
        #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
        #[doc = "unless there is a prime member set and the prime member cast an approval."]
        #[doc = ""]
        #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
        #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
        #[doc = ""]
        #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
        #[doc = "proposal."]
        #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
        #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "## Weight"]
        #[doc = "- `O(B + M + P1 + P2)` where:"]
        #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
        #[doc = "  - `M` is members-count (code- and governance-bounded)"]
        #[doc = "  - `P1` is the complexity of `proposal` preimage."]
        #[doc = "  - `P2` is proposal-count (code-bounded)"]
        #[doc = "- DB:"]
        #[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
        #[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
        #[doc = "   `O(P2)`)"]
        #[doc = " - any mutations done while executing `proposal` (`P1`)"]
        #[doc = "- up to 3 events"]
        #[doc = "# </weight>"]
        pub fn close(
          &self,
          proposal_hash: ::subxt::sp_core::H256,
          index: ::core::primitive::u32,
          proposal_weight_bound: ::core::primitive::u64,
          length_bound: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Close, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Close>()?
          };
          if runtime_call_hash
            == [
              242u8, 208u8, 108u8, 202u8, 24u8, 139u8, 8u8, 150u8, 108u8, 217u8, 30u8, 209u8,
              178u8, 1u8, 80u8, 25u8, 154u8, 146u8, 173u8, 172u8, 227u8, 4u8, 140u8, 228u8, 58u8,
              221u8, 189u8, 135u8, 203u8, 69u8, 105u8, 47u8,
            ]
          {
            let call = Close {
              proposal_hash,
              index,
              proposal_weight_bound,
              length_bound,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
        #[doc = "state."]
        #[doc = ""]
        #[doc = "Must be called by the Root origin."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Complexity: O(P) where P is the number of max proposals"]
        #[doc = "DB Weight:"]
        #[doc = "* Reads: Proposals"]
        #[doc = "* Writes: Voting, Proposals, ProposalOf"]
        #[doc = "# </weight>"]
        pub fn disapprove_proposal(
          &self,
          proposal_hash: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            DisapproveProposal,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<DisapproveProposal>()?
          };
          if runtime_call_hash
            == [
              199u8, 113u8, 221u8, 167u8, 60u8, 241u8, 77u8, 166u8, 205u8, 191u8, 183u8, 121u8,
              191u8, 206u8, 230u8, 212u8, 215u8, 219u8, 30u8, 51u8, 123u8, 18u8, 17u8, 218u8, 77u8,
              227u8, 197u8, 95u8, 232u8, 59u8, 169u8, 133u8,
            ]
          {
            let call = DisapproveProposal { proposal_hash };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_collective::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
      #[doc = "`MemberCount`)."]
      pub struct Proposed {
        pub account: ::subxt::sp_core::crypto::AccountId32,
        pub proposal_index: ::core::primitive::u32,
        pub proposal_hash: ::subxt::sp_core::H256,
        pub threshold: ::core::primitive::u32,
      }
      impl ::subxt::Event for Proposed {
        const PALLET: &'static str = "TechnicalCommittee";
        const EVENT: &'static str = "Proposed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A motion (given hash) has been voted on by given account, leaving"]
      #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
      pub struct Voted {
        pub account: ::subxt::sp_core::crypto::AccountId32,
        pub proposal_hash: ::subxt::sp_core::H256,
        pub voted: ::core::primitive::bool,
        pub yes: ::core::primitive::u32,
        pub no: ::core::primitive::u32,
      }
      impl ::subxt::Event for Voted {
        const PALLET: &'static str = "TechnicalCommittee";
        const EVENT: &'static str = "Voted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A motion was approved by the required threshold."]
      pub struct Approved {
        pub proposal_hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for Approved {
        const PALLET: &'static str = "TechnicalCommittee";
        const EVENT: &'static str = "Approved";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A motion was not approved by the required threshold."]
      pub struct Disapproved {
        pub proposal_hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for Disapproved {
        const PALLET: &'static str = "TechnicalCommittee";
        const EVENT: &'static str = "Disapproved";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
      pub struct Executed {
        pub proposal_hash: ::subxt::sp_core::H256,
        pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
      }
      impl ::subxt::Event for Executed {
        const PALLET: &'static str = "TechnicalCommittee";
        const EVENT: &'static str = "Executed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
      pub struct MemberExecuted {
        pub proposal_hash: ::subxt::sp_core::H256,
        pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
      }
      impl ::subxt::Event for MemberExecuted {
        const PALLET: &'static str = "TechnicalCommittee";
        const EVENT: &'static str = "MemberExecuted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
      pub struct Closed {
        pub proposal_hash: ::subxt::sp_core::H256,
        pub yes: ::core::primitive::u32,
        pub no: ::core::primitive::u32,
      }
      impl ::subxt::Event for Closed {
        const PALLET: &'static str = "TechnicalCommittee";
        const EVENT: &'static str = "Closed";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Proposals;
      impl ::subxt::StorageEntry for Proposals {
        const PALLET: &'static str = "TechnicalCommittee";
        const STORAGE: &'static str = "Proposals";
        type Value =
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::subxt::sp_core::H256>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ProposalOf<'a>(pub &'a ::subxt::sp_core::H256);
      impl ::subxt::StorageEntry for ProposalOf<'_> {
        const PALLET: &'static str = "TechnicalCommittee";
        const STORAGE: &'static str = "ProposalOf";
        type Value = runtime_types::lagoon_runtime::Call;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Identity,
          )])
        }
      }
      pub struct Voting<'a>(pub &'a ::subxt::sp_core::H256);
      impl ::subxt::StorageEntry for Voting<'_> {
        const PALLET: &'static str = "TechnicalCommittee";
        const STORAGE: &'static str = "Voting";
        type Value = runtime_types::pallet_collective::Votes<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Identity,
          )])
        }
      }
      pub struct ProposalCount;
      impl ::subxt::StorageEntry for ProposalCount {
        const PALLET: &'static str = "TechnicalCommittee";
        const STORAGE: &'static str = "ProposalCount";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Members;
      impl ::subxt::StorageEntry for Members {
        const PALLET: &'static str = "TechnicalCommittee";
        const STORAGE: &'static str = "Members";
        type Value = ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Prime;
      impl ::subxt::StorageEntry for Prime {
        const PALLET: &'static str = "TechnicalCommittee";
        const STORAGE: &'static str = "Prime";
        type Value = ::subxt::sp_core::crypto::AccountId32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The hashes of the active proposals."]
        pub async fn proposals(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::subxt::sp_core::H256>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Proposals>()?
          };
          if runtime_storage_hash
            == [
              174u8, 75u8, 108u8, 245u8, 86u8, 50u8, 107u8, 212u8, 244u8, 113u8, 232u8, 168u8,
              194u8, 33u8, 247u8, 97u8, 54u8, 115u8, 236u8, 189u8, 59u8, 2u8, 252u8, 84u8, 199u8,
              127u8, 197u8, 72u8, 23u8, 1u8, 118u8, 95u8,
            ]
          {
            let entry = Proposals;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Actual proposal for a given hash, if it's current."]
        pub async fn proposal_of(
          &self,
          _0: &::subxt::sp_core::H256,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::lagoon_runtime::Call>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ProposalOf>()?
          };
          if runtime_storage_hash
            == [
              200u8, 172u8, 37u8, 142u8, 57u8, 119u8, 96u8, 17u8, 59u8, 54u8, 220u8, 6u8, 11u8,
              204u8, 252u8, 241u8, 37u8, 174u8, 60u8, 46u8, 185u8, 224u8, 142u8, 133u8, 245u8,
              157u8, 77u8, 76u8, 79u8, 130u8, 57u8, 6u8,
            ]
          {
            let entry = ProposalOf(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Actual proposal for a given hash, if it's current."]
        pub async fn proposal_of_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, ProposalOf<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ProposalOf>()?
          };
          if runtime_storage_hash
            == [
              200u8, 172u8, 37u8, 142u8, 57u8, 119u8, 96u8, 17u8, 59u8, 54u8, 220u8, 6u8, 11u8,
              204u8, 252u8, 241u8, 37u8, 174u8, 60u8, 46u8, 185u8, 224u8, 142u8, 133u8, 245u8,
              157u8, 77u8, 76u8, 79u8, 130u8, 57u8, 6u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Votes on a given proposal, if it is ongoing."]
        pub async fn voting(
          &self,
          _0: &::subxt::sp_core::H256,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_collective::Votes<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Voting>()?
          };
          if runtime_storage_hash
            == [
              145u8, 223u8, 203u8, 2u8, 137u8, 33u8, 22u8, 239u8, 175u8, 149u8, 254u8, 185u8, 0u8,
              139u8, 71u8, 134u8, 109u8, 95u8, 45u8, 75u8, 33u8, 228u8, 127u8, 67u8, 53u8, 119u8,
              188u8, 198u8, 11u8, 92u8, 4u8, 177u8,
            ]
          {
            let entry = Voting(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Votes on a given proposal, if it is ongoing."]
        pub async fn voting_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Voting<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Voting>()?
          };
          if runtime_storage_hash
            == [
              145u8, 223u8, 203u8, 2u8, 137u8, 33u8, 22u8, 239u8, 175u8, 149u8, 254u8, 185u8, 0u8,
              139u8, 71u8, 134u8, 109u8, 95u8, 45u8, 75u8, 33u8, 228u8, 127u8, 67u8, 53u8, 119u8,
              188u8, 198u8, 11u8, 92u8, 4u8, 177u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Proposals so far."]
        pub async fn proposal_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ProposalCount>()?
          };
          if runtime_storage_hash
            == [
              132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8, 140u8, 99u8, 124u8,
              208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8, 24u8, 149u8, 109u8, 105u8, 30u8, 83u8,
              39u8, 177u8, 127u8, 160u8, 34u8, 70u8,
            ]
          {
            let entry = ProposalCount;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The current members of the collective. This is stored sorted (just by value)."]
        pub async fn members(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Members>()?
          };
          if runtime_storage_hash
            == [
              136u8, 91u8, 140u8, 173u8, 238u8, 221u8, 4u8, 132u8, 238u8, 99u8, 195u8, 142u8, 10u8,
              35u8, 210u8, 227u8, 22u8, 72u8, 218u8, 222u8, 227u8, 51u8, 55u8, 31u8, 252u8, 78u8,
              195u8, 11u8, 195u8, 242u8, 171u8, 75u8,
            ]
          {
            let entry = Members;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
        pub async fn prime(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Prime>()?
          };
          if runtime_storage_hash
            == [
              70u8, 101u8, 20u8, 160u8, 173u8, 87u8, 190u8, 85u8, 60u8, 249u8, 144u8, 77u8, 175u8,
              195u8, 51u8, 196u8, 234u8, 62u8, 243u8, 199u8, 126u8, 12u8, 88u8, 252u8, 1u8, 210u8,
              65u8, 210u8, 33u8, 19u8, 222u8, 11u8,
            ]
          {
            let entry = Prime;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod elections {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Vote {
        pub votes: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        #[codec(compact)]
        pub value: ::core::primitive::u128,
      }
      impl ::subxt::Call for Vote {
        const PALLET: &'static str = "Elections";
        const FUNCTION: &'static str = "vote";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RemoveVoter;
      impl ::subxt::Call for RemoveVoter {
        const PALLET: &'static str = "Elections";
        const FUNCTION: &'static str = "remove_voter";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SubmitCandidacy {
        #[codec(compact)]
        pub candidate_count: ::core::primitive::u32,
      }
      impl ::subxt::Call for SubmitCandidacy {
        const PALLET: &'static str = "Elections";
        const FUNCTION: &'static str = "submit_candidacy";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RenounceCandidacy {
        pub renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
      }
      impl ::subxt::Call for RenounceCandidacy {
        const PALLET: &'static str = "Elections";
        const FUNCTION: &'static str = "renounce_candidacy";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RemoveMember {
        pub who: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub has_replacement: ::core::primitive::bool,
      }
      impl ::subxt::Call for RemoveMember {
        const PALLET: &'static str = "Elections";
        const FUNCTION: &'static str = "remove_member";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct CleanDefunctVoters {
        pub num_voters: ::core::primitive::u32,
        pub num_defunct: ::core::primitive::u32,
      }
      impl ::subxt::Call for CleanDefunctVoters {
        const PALLET: &'static str = "Elections";
        const FUNCTION: &'static str = "clean_defunct_voters";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Vote for a set of candidates for the upcoming round of election. This can be called to"]
        #[doc = "set the initial votes, or update already existing votes."]
        #[doc = ""]
        #[doc = "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is"]
        #[doc = "reserved. The deposit is based on the number of votes and can be updated over time."]
        #[doc = ""]
        #[doc = "The `votes` should:"]
        #[doc = "  - not be empty."]
        #[doc = "  - be less than the number of possible candidates. Note that all current members and"]
        #[doc = "    runners-up are also automatically candidates for the next round."]
        #[doc = ""]
        #[doc = "If `value` is more than `who`'s free balance, then the maximum of the two is used."]
        #[doc = ""]
        #[doc = "The dispatch origin of this call must be signed."]
        #[doc = ""]
        #[doc = "### Warning"]
        #[doc = ""]
        #[doc = "It is the responsibility of the caller to **NOT** place all of their balance into the"]
        #[doc = "lock and keep some for further operations."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less."]
        #[doc = "# </weight>"]
        pub fn vote(
          &self,
          votes: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          value: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Vote, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Vote>()?
          };
          if runtime_call_hash
            == [
              245u8, 122u8, 160u8, 64u8, 234u8, 121u8, 191u8, 224u8, 12u8, 16u8, 153u8, 70u8, 41u8,
              236u8, 211u8, 145u8, 238u8, 112u8, 11u8, 94u8, 92u8, 160u8, 67u8, 176u8, 126u8,
              232u8, 63u8, 226u8, 207u8, 205u8, 90u8, 61u8,
            ]
          {
            let call = Vote { votes, value };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove `origin` as a voter."]
        #[doc = ""]
        #[doc = "This removes the lock and returns the deposit."]
        #[doc = ""]
        #[doc = "The dispatch origin of this call must be signed and be a voter."]
        pub fn remove_voter(
          &self,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RemoveVoter, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RemoveVoter>()?
          };
          if runtime_call_hash
            == [
              254u8, 46u8, 140u8, 4u8, 218u8, 45u8, 150u8, 72u8, 67u8, 131u8, 108u8, 201u8, 46u8,
              157u8, 104u8, 161u8, 53u8, 155u8, 130u8, 50u8, 88u8, 149u8, 255u8, 12u8, 17u8, 85u8,
              95u8, 69u8, 153u8, 130u8, 221u8, 1u8,
            ]
          {
            let call = RemoveVoter {};
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Submit oneself for candidacy. A fixed amount of deposit is recorded."]
        #[doc = ""]
        #[doc = "All candidates are wiped at the end of the term. They either become a member/runner-up,"]
        #[doc = "or leave the system while their deposit is slashed."]
        #[doc = ""]
        #[doc = "The dispatch origin of this call must be signed."]
        #[doc = ""]
        #[doc = "### Warning"]
        #[doc = ""]
        #[doc = "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]"]
        #[doc = "to get their deposit back. Losing the spot in an election will always lead to a slash."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "The number of current candidates must be provided as witness data."]
        #[doc = "# </weight>"]
        pub fn submit_candidacy(
          &self,
          candidate_count: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SubmitCandidacy, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SubmitCandidacy>()?
          };
          if runtime_call_hash
            == [
              100u8, 38u8, 146u8, 5u8, 234u8, 101u8, 193u8, 9u8, 245u8, 237u8, 220u8, 21u8, 36u8,
              64u8, 205u8, 103u8, 11u8, 194u8, 18u8, 96u8, 44u8, 231u8, 125u8, 82u8, 63u8, 51u8,
              51u8, 183u8, 28u8, 33u8, 121u8, 89u8,
            ]
          {
            let call = SubmitCandidacy { candidate_count };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Renounce one's intention to be a candidate for the next election round. 3 potential"]
        #[doc = "outcomes exist:"]
        #[doc = ""]
        #[doc = "- `origin` is a candidate and not elected in any set. In this case, the deposit is"]
        #[doc = "  unreserved, returned and origin is removed as a candidate."]
        #[doc = "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and"]
        #[doc = "  origin is removed as a runner-up."]
        #[doc = "- `origin` is a current member. In this case, the deposit is unreserved and origin is"]
        #[doc = "  removed as a member, consequently not being a candidate for the next round anymore."]
        #[doc = "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they"]
        #[doc = "  are immediately used. If the prime is renouncing, then no prime will exist until the"]
        #[doc = "  next round."]
        #[doc = ""]
        #[doc = "The dispatch origin of this call must be signed, and have one of the above roles."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "The type of renouncing must be provided as witness data."]
        #[doc = "# </weight>"]
        pub fn renounce_candidacy(
          &self,
          renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            RenounceCandidacy,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RenounceCandidacy>()?
          };
          if runtime_call_hash
            == [
              184u8, 45u8, 220u8, 198u8, 21u8, 54u8, 15u8, 235u8, 192u8, 78u8, 96u8, 172u8, 12u8,
              152u8, 147u8, 183u8, 172u8, 85u8, 26u8, 243u8, 250u8, 248u8, 104u8, 76u8, 88u8,
              150u8, 197u8, 130u8, 221u8, 234u8, 53u8, 174u8,
            ]
          {
            let call = RenounceCandidacy { renouncing };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove a particular member from the set. This is effective immediately and the bond of"]
        #[doc = "the outgoing member is slashed."]
        #[doc = ""]
        #[doc = "If a runner-up is available, then the best runner-up will be removed and replaces the"]
        #[doc = "outgoing member. Otherwise, a new phragmen election is started."]
        #[doc = ""]
        #[doc = "The dispatch origin of this call must be root."]
        #[doc = ""]
        #[doc = "Note that this does not affect the designated block number of the next election."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "If we have a replacement, we use a small weight. Else, since this is a root call and"]
        #[doc = "will go into phragmen, we assume full block for now."]
        #[doc = "# </weight>"]
        pub fn remove_member(
          &self,
          who: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          has_replacement: ::core::primitive::bool,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RemoveMember, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RemoveMember>()?
          };
          if runtime_call_hash
            == [
              59u8, 246u8, 128u8, 178u8, 45u8, 235u8, 111u8, 84u8, 111u8, 45u8, 207u8, 168u8,
              247u8, 13u8, 181u8, 209u8, 94u8, 224u8, 186u8, 92u8, 217u8, 7u8, 252u8, 131u8, 12u8,
              197u8, 43u8, 216u8, 60u8, 103u8, 43u8, 110u8,
            ]
          {
            let call = RemoveMember {
              who,
              has_replacement,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The"]
        #[doc = "deposit of the removed voters are returned."]
        #[doc = ""]
        #[doc = "This is an root function to be used only for cleaning the state."]
        #[doc = ""]
        #[doc = "The dispatch origin of this call must be root."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "The total number of voters and those that are defunct must be provided as witness data."]
        #[doc = "# </weight>"]
        pub fn clean_defunct_voters(
          &self,
          num_voters: ::core::primitive::u32,
          num_defunct: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            CleanDefunctVoters,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CleanDefunctVoters>()?
          };
          if runtime_call_hash
            == [
              80u8, 248u8, 122u8, 6u8, 88u8, 255u8, 17u8, 206u8, 104u8, 208u8, 66u8, 191u8, 118u8,
              163u8, 154u8, 9u8, 37u8, 106u8, 232u8, 178u8, 17u8, 177u8, 225u8, 101u8, 76u8, 207u8,
              175u8, 117u8, 21u8, 203u8, 229u8, 140u8,
            ]
          {
            let call = CleanDefunctVoters {
              num_voters,
              num_defunct,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_elections_phragmen::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A new term with new_members. This indicates that enough candidates existed to run"]
      #[doc = "the election, not that enough have has been elected. The inner value must be examined"]
      #[doc = "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond"]
      #[doc = "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to"]
      #[doc = "begin with."]
      pub struct NewTerm {
        pub new_members: ::std::vec::Vec<(
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
        )>,
      }
      impl ::subxt::Event for NewTerm {
        const PALLET: &'static str = "Elections";
        const EVENT: &'static str = "NewTerm";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "No (or not enough) candidates existed for this round. This is different from"]
      #[doc = "`NewTerm(\\[\\])`. See the description of `NewTerm`."]
      pub struct EmptyTerm;
      impl ::subxt::Event for EmptyTerm {
        const PALLET: &'static str = "Elections";
        const EVENT: &'static str = "EmptyTerm";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Internal error happened while trying to perform election."]
      pub struct ElectionError;
      impl ::subxt::Event for ElectionError {
        const PALLET: &'static str = "Elections";
        const EVENT: &'static str = "ElectionError";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A member has been removed. This should always be followed by either `NewTerm` or"]
      #[doc = "`EmptyTerm`."]
      pub struct MemberKicked {
        pub member: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for MemberKicked {
        const PALLET: &'static str = "Elections";
        const EVENT: &'static str = "MemberKicked";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Someone has renounced their candidacy."]
      pub struct Renounced {
        pub candidate: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for Renounced {
        const PALLET: &'static str = "Elections";
        const EVENT: &'static str = "Renounced";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A candidate was slashed by amount due to failing to obtain a seat as member or"]
      #[doc = "runner-up."]
      #[doc = ""]
      #[doc = "Note that old members and runners-up are also candidates."]
      pub struct CandidateSlashed {
        pub candidate: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for CandidateSlashed {
        const PALLET: &'static str = "Elections";
        const EVENT: &'static str = "CandidateSlashed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A seat holder was slashed by amount by being forcefully removed from the set."]
      pub struct SeatHolderSlashed {
        pub seat_holder: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for SeatHolderSlashed {
        const PALLET: &'static str = "Elections";
        const EVENT: &'static str = "SeatHolderSlashed";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Members;
      impl ::subxt::StorageEntry for Members {
        const PALLET: &'static str = "Elections";
        const STORAGE: &'static str = "Members";
        type Value = ::std::vec::Vec<
          runtime_types::pallet_elections_phragmen::SeatHolder<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u128,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct RunnersUp;
      impl ::subxt::StorageEntry for RunnersUp {
        const PALLET: &'static str = "Elections";
        const STORAGE: &'static str = "RunnersUp";
        type Value = ::std::vec::Vec<
          runtime_types::pallet_elections_phragmen::SeatHolder<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u128,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Candidates;
      impl ::subxt::StorageEntry for Candidates {
        const PALLET: &'static str = "Elections";
        const STORAGE: &'static str = "Candidates";
        type Value = ::std::vec::Vec<(
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
        )>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ElectionRounds;
      impl ::subxt::StorageEntry for ElectionRounds {
        const PALLET: &'static str = "Elections";
        const STORAGE: &'static str = "ElectionRounds";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Voting<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Voting<'_> {
        const PALLET: &'static str = "Elections";
        const STORAGE: &'static str = "Voting";
        type Value = runtime_types::pallet_elections_phragmen::Voter<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The current elected members."]
        #[doc = ""]
        #[doc = " Invariant: Always sorted based on account id."]
        pub async fn members(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<
            runtime_types::pallet_elections_phragmen::SeatHolder<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Members>()?
          };
          if runtime_storage_hash
            == [
              193u8, 166u8, 79u8, 96u8, 31u8, 4u8, 133u8, 133u8, 115u8, 236u8, 253u8, 177u8, 176u8,
              10u8, 50u8, 97u8, 254u8, 234u8, 169u8, 236u8, 77u8, 243u8, 173u8, 187u8, 129u8,
              122u8, 160u8, 73u8, 25u8, 150u8, 140u8, 56u8,
            ]
          {
            let entry = Members;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The current reserved runners-up."]
        #[doc = ""]
        #[doc = " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the"]
        #[doc = " last (i.e. _best_) runner-up will be replaced."]
        pub async fn runners_up(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<
            runtime_types::pallet_elections_phragmen::SeatHolder<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<RunnersUp>()?
          };
          if runtime_storage_hash
            == [
              59u8, 65u8, 218u8, 225u8, 49u8, 140u8, 168u8, 143u8, 195u8, 106u8, 207u8, 181u8,
              157u8, 129u8, 140u8, 122u8, 145u8, 207u8, 179u8, 144u8, 146u8, 206u8, 204u8, 245u8,
              6u8, 201u8, 192u8, 232u8, 84u8, 108u8, 86u8, 187u8,
            ]
          {
            let entry = RunnersUp;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The present candidate list. A current member or runner-up can never enter this vector"]
        #[doc = " and is always implicitly assumed to be a candidate."]
        #[doc = ""]
        #[doc = " Second element is the deposit."]
        #[doc = ""]
        #[doc = " Invariant: Always sorted based on account id."]
        pub async fn candidates(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<(
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u128,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Candidates>()?
          };
          if runtime_storage_hash
            == [
              172u8, 196u8, 249u8, 114u8, 195u8, 161u8, 43u8, 219u8, 208u8, 127u8, 144u8, 87u8,
              13u8, 253u8, 114u8, 209u8, 199u8, 65u8, 77u8, 7u8, 131u8, 166u8, 212u8, 94u8, 253u8,
              166u8, 234u8, 42u8, 36u8, 175u8, 100u8, 14u8,
            ]
          {
            let entry = Candidates;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The total number of vote rounds that have happened, excluding the upcoming one."]
        pub async fn election_rounds(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ElectionRounds>()?
          };
          if runtime_storage_hash
            == [
              144u8, 146u8, 10u8, 32u8, 149u8, 147u8, 59u8, 205u8, 61u8, 246u8, 28u8, 169u8, 130u8,
              136u8, 143u8, 104u8, 253u8, 86u8, 228u8, 68u8, 19u8, 184u8, 166u8, 214u8, 58u8,
              103u8, 176u8, 160u8, 240u8, 249u8, 117u8, 115u8,
            ]
          {
            let entry = ElectionRounds;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Votes and locked stake of a particular voter."]
        #[doc = ""]
        #[doc = " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."]
        pub async fn voting(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_elections_phragmen::Voter<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u128,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Voting>()?
          };
          if runtime_storage_hash
            == [
              107u8, 14u8, 228u8, 167u8, 43u8, 105u8, 221u8, 70u8, 234u8, 157u8, 36u8, 16u8, 63u8,
              225u8, 89u8, 111u8, 201u8, 172u8, 98u8, 169u8, 232u8, 175u8, 172u8, 20u8, 223u8,
              80u8, 107u8, 183u8, 252u8, 175u8, 50u8, 171u8,
            ]
          {
            let entry = Voting(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Votes and locked stake of a particular voter."]
        #[doc = ""]
        #[doc = " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."]
        pub async fn voting_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Voting<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Voting>()?
          };
          if runtime_storage_hash
            == [
              107u8, 14u8, 228u8, 167u8, 43u8, 105u8, 221u8, 70u8, 234u8, 157u8, 36u8, 16u8, 63u8,
              225u8, 89u8, 111u8, 201u8, 172u8, 98u8, 169u8, 232u8, 175u8, 172u8, 20u8, 223u8,
              80u8, 107u8, 183u8, 252u8, 175u8, 50u8, 171u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Identifier for the elections-phragmen pallet's lock"]
        pub fn pallet_id(
          &self,
        ) -> ::core::result::Result<[::core::primitive::u8; 8usize], ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Elections", "PalletId")?
            == [
              95u8, 63u8, 229u8, 200u8, 231u8, 11u8, 95u8, 106u8, 62u8, 240u8, 37u8, 146u8, 230u8,
              74u8, 169u8, 185u8, 160u8, 90u8, 136u8, 209u8, 127u8, 221u8, 173u8, 200u8, 243u8,
              198u8, 18u8, 226u8, 144u8, 188u8, 105u8, 230u8,
            ]
          {
            let pallet = metadata.pallet("Elections")?;
            let constant = pallet.constant("PalletId")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " How much should be locked up in order to submit one's candidacy."]
        pub fn candidacy_bond(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Elections", "CandidacyBond")?
            == [
              122u8, 97u8, 224u8, 48u8, 80u8, 63u8, 234u8, 219u8, 254u8, 180u8, 52u8, 125u8, 76u8,
              142u8, 9u8, 153u8, 238u8, 43u8, 188u8, 60u8, 233u8, 25u8, 155u8, 174u8, 42u8, 94u8,
              125u8, 2u8, 197u8, 114u8, 18u8, 8u8,
            ]
          {
            let pallet = metadata.pallet("Elections")?;
            let constant = pallet.constant("CandidacyBond")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Base deposit associated with voting."]
        #[doc = ""]
        #[doc = " This should be sensibly high to economically ensure the pallet cannot be attacked by"]
        #[doc = " creating a gigantic number of votes."]
        pub fn voting_bond_base(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Elections", "VotingBondBase")?
            == [
              166u8, 36u8, 134u8, 217u8, 10u8, 92u8, 149u8, 151u8, 220u8, 253u8, 150u8, 40u8, 91u8,
              118u8, 166u8, 125u8, 212u8, 42u8, 53u8, 31u8, 137u8, 195u8, 98u8, 106u8, 38u8, 200u8,
              145u8, 92u8, 171u8, 193u8, 105u8, 176u8,
            ]
          {
            let pallet = metadata.pallet("Elections")?;
            let constant = pallet.constant("VotingBondBase")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The amount of bond that need to be locked for each vote (32 bytes)."]
        pub fn voting_bond_factor(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Elections", "VotingBondFactor")?
            == [
              151u8, 160u8, 118u8, 76u8, 123u8, 227u8, 127u8, 13u8, 168u8, 119u8, 38u8, 146u8,
              223u8, 36u8, 200u8, 104u8, 168u8, 113u8, 69u8, 25u8, 119u8, 230u8, 242u8, 176u8,
              191u8, 188u8, 1u8, 216u8, 25u8, 242u8, 234u8, 190u8,
            ]
          {
            let pallet = metadata.pallet("Elections")?;
            let constant = pallet.constant("VotingBondFactor")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Number of members to elect."]
        pub fn desired_members(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Elections", "DesiredMembers")?
            == [
              202u8, 93u8, 82u8, 184u8, 101u8, 152u8, 110u8, 247u8, 155u8, 43u8, 205u8, 219u8,
              41u8, 184u8, 141u8, 32u8, 33u8, 30u8, 129u8, 33u8, 132u8, 18u8, 172u8, 114u8, 226u8,
              81u8, 21u8, 55u8, 197u8, 42u8, 65u8, 162u8,
            ]
          {
            let pallet = metadata.pallet("Elections")?;
            let constant = pallet.constant("DesiredMembers")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Number of runners_up to keep."]
        pub fn desired_runners_up(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Elections", "DesiredRunnersUp")?
            == [
              126u8, 79u8, 206u8, 94u8, 16u8, 223u8, 112u8, 34u8, 160u8, 227u8, 74u8, 26u8, 14u8,
              191u8, 98u8, 119u8, 230u8, 187u8, 18u8, 37u8, 13u8, 143u8, 128u8, 62u8, 131u8, 158u8,
              138u8, 110u8, 16u8, 216u8, 42u8, 113u8,
            ]
          {
            let pallet = metadata.pallet("Elections")?;
            let constant = pallet.constant("DesiredRunnersUp")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " How long each seat is kept. This defines the next block number at which an election"]
        #[doc = " round will happen. If set to zero, no elections are ever triggered and the module will"]
        #[doc = " be in passive mode."]
        pub fn term_duration(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Elections", "TermDuration")?
            == [
              193u8, 236u8, 82u8, 251u8, 38u8, 164u8, 72u8, 149u8, 65u8, 240u8, 45u8, 82u8, 210u8,
              168u8, 68u8, 219u8, 11u8, 241u8, 118u8, 117u8, 248u8, 9u8, 1u8, 187u8, 98u8, 189u8,
              18u8, 119u8, 255u8, 89u8, 192u8, 231u8,
            ]
          {
            let pallet = metadata.pallet("Elections")?;
            let constant = pallet.constant("TermDuration")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod technical_membership {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AddMember {
        pub who: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for AddMember {
        const PALLET: &'static str = "TechnicalMembership";
        const FUNCTION: &'static str = "add_member";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RemoveMember {
        pub who: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for RemoveMember {
        const PALLET: &'static str = "TechnicalMembership";
        const FUNCTION: &'static str = "remove_member";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SwapMember {
        pub remove: ::subxt::sp_core::crypto::AccountId32,
        pub add: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for SwapMember {
        const PALLET: &'static str = "TechnicalMembership";
        const FUNCTION: &'static str = "swap_member";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ResetMembers {
        pub members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
      }
      impl ::subxt::Call for ResetMembers {
        const PALLET: &'static str = "TechnicalMembership";
        const FUNCTION: &'static str = "reset_members";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ChangeKey {
        pub new: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for ChangeKey {
        const PALLET: &'static str = "TechnicalMembership";
        const FUNCTION: &'static str = "change_key";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetPrime {
        pub who: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for SetPrime {
        const PALLET: &'static str = "TechnicalMembership";
        const FUNCTION: &'static str = "set_prime";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ClearPrime;
      impl ::subxt::Call for ClearPrime {
        const PALLET: &'static str = "TechnicalMembership";
        const FUNCTION: &'static str = "clear_prime";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Add a member `who` to the set."]
        #[doc = ""]
        #[doc = "May only be called from `T::AddOrigin`."]
        pub fn add_member(
          &self,
          who: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, AddMember, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AddMember>()?
          };
          if runtime_call_hash
            == [
              1u8, 149u8, 115u8, 222u8, 93u8, 9u8, 208u8, 58u8, 22u8, 148u8, 215u8, 141u8, 204u8,
              48u8, 107u8, 210u8, 202u8, 165u8, 43u8, 159u8, 45u8, 161u8, 255u8, 127u8, 225u8,
              100u8, 161u8, 195u8, 197u8, 206u8, 57u8, 166u8,
            ]
          {
            let call = AddMember { who };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove a member `who` from the set."]
        #[doc = ""]
        #[doc = "May only be called from `T::RemoveOrigin`."]
        pub fn remove_member(
          &self,
          who: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RemoveMember, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RemoveMember>()?
          };
          if runtime_call_hash
            == [
              137u8, 249u8, 148u8, 139u8, 147u8, 47u8, 226u8, 228u8, 139u8, 219u8, 109u8, 128u8,
              254u8, 51u8, 227u8, 154u8, 105u8, 91u8, 229u8, 69u8, 217u8, 241u8, 107u8, 229u8,
              41u8, 202u8, 228u8, 227u8, 160u8, 162u8, 45u8, 211u8,
            ]
          {
            let call = RemoveMember { who };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Swap out one member `remove` for another `add`."]
        #[doc = ""]
        #[doc = "May only be called from `T::SwapOrigin`."]
        #[doc = ""]
        #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
        pub fn swap_member(
          &self,
          remove: ::subxt::sp_core::crypto::AccountId32,
          add: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SwapMember, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SwapMember>()?
          };
          if runtime_call_hash
            == [
              159u8, 62u8, 254u8, 117u8, 56u8, 185u8, 99u8, 29u8, 146u8, 210u8, 40u8, 77u8, 169u8,
              224u8, 215u8, 34u8, 106u8, 95u8, 204u8, 109u8, 72u8, 67u8, 11u8, 183u8, 33u8, 84u8,
              133u8, 4u8, 5u8, 13u8, 188u8, 123u8,
            ]
          {
            let call = SwapMember { remove, add };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
        #[doc = "pass `members` pre-sorted."]
        #[doc = ""]
        #[doc = "May only be called from `T::ResetOrigin`."]
        pub fn reset_members(
          &self,
          members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ResetMembers, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ResetMembers>()?
          };
          if runtime_call_hash
            == [
              246u8, 84u8, 91u8, 191u8, 61u8, 245u8, 171u8, 80u8, 18u8, 120u8, 61u8, 86u8, 23u8,
              115u8, 161u8, 203u8, 128u8, 34u8, 166u8, 128u8, 33u8, 28u8, 229u8, 81u8, 103u8,
              217u8, 173u8, 151u8, 31u8, 118u8, 151u8, 217u8,
            ]
          {
            let call = ResetMembers { members };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Swap out the sending member for some other key `new`."]
        #[doc = ""]
        #[doc = "May only be called from `Signed` origin of a current member."]
        #[doc = ""]
        #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
        pub fn change_key(
          &self,
          new: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ChangeKey, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ChangeKey>()?
          };
          if runtime_call_hash
            == [
              198u8, 93u8, 41u8, 52u8, 241u8, 11u8, 225u8, 82u8, 30u8, 114u8, 111u8, 204u8, 13u8,
              31u8, 34u8, 82u8, 171u8, 58u8, 180u8, 65u8, 3u8, 246u8, 33u8, 167u8, 200u8, 23u8,
              150u8, 235u8, 130u8, 172u8, 202u8, 216u8,
            ]
          {
            let call = ChangeKey { new };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set the prime member. Must be a current member."]
        #[doc = ""]
        #[doc = "May only be called from `T::PrimeOrigin`."]
        pub fn set_prime(
          &self,
          who: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetPrime, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetPrime>()?
          };
          if runtime_call_hash
            == [
              185u8, 53u8, 61u8, 154u8, 234u8, 77u8, 195u8, 126u8, 19u8, 39u8, 78u8, 205u8, 109u8,
              210u8, 137u8, 245u8, 128u8, 110u8, 2u8, 201u8, 20u8, 153u8, 146u8, 177u8, 4u8, 144u8,
              229u8, 125u8, 91u8, 131u8, 199u8, 15u8,
            ]
          {
            let call = SetPrime { who };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove the prime member if it exists."]
        #[doc = ""]
        #[doc = "May only be called from `T::PrimeOrigin`."]
        pub fn clear_prime(
          &self,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ClearPrime, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ClearPrime>()?
          };
          if runtime_call_hash
            == [
              186u8, 182u8, 225u8, 90u8, 71u8, 124u8, 69u8, 100u8, 234u8, 25u8, 53u8, 23u8, 182u8,
              32u8, 176u8, 81u8, 54u8, 140u8, 235u8, 126u8, 247u8, 7u8, 155u8, 62u8, 35u8, 135u8,
              48u8, 61u8, 88u8, 160u8, 183u8, 72u8,
            ]
          {
            let call = ClearPrime {};
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_membership::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The given member was added; see the transaction for who."]
      pub struct MemberAdded;
      impl ::subxt::Event for MemberAdded {
        const PALLET: &'static str = "TechnicalMembership";
        const EVENT: &'static str = "MemberAdded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The given member was removed; see the transaction for who."]
      pub struct MemberRemoved;
      impl ::subxt::Event for MemberRemoved {
        const PALLET: &'static str = "TechnicalMembership";
        const EVENT: &'static str = "MemberRemoved";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Two members were swapped; see the transaction for who."]
      pub struct MembersSwapped;
      impl ::subxt::Event for MembersSwapped {
        const PALLET: &'static str = "TechnicalMembership";
        const EVENT: &'static str = "MembersSwapped";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The membership was reset; see the transaction for who the new set is."]
      pub struct MembersReset;
      impl ::subxt::Event for MembersReset {
        const PALLET: &'static str = "TechnicalMembership";
        const EVENT: &'static str = "MembersReset";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "One of the members' keys changed."]
      pub struct KeyChanged;
      impl ::subxt::Event for KeyChanged {
        const PALLET: &'static str = "TechnicalMembership";
        const EVENT: &'static str = "KeyChanged";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Phantom member, never used."]
      pub struct Dummy;
      impl ::subxt::Event for Dummy {
        const PALLET: &'static str = "TechnicalMembership";
        const EVENT: &'static str = "Dummy";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Members;
      impl ::subxt::StorageEntry for Members {
        const PALLET: &'static str = "TechnicalMembership";
        const STORAGE: &'static str = "Members";
        type Value = ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Prime;
      impl ::subxt::StorageEntry for Prime {
        const PALLET: &'static str = "TechnicalMembership";
        const STORAGE: &'static str = "Prime";
        type Value = ::subxt::sp_core::crypto::AccountId32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The current membership, stored as an ordered Vec."]
        pub async fn members(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Members>()?
          };
          if runtime_storage_hash
            == [
              136u8, 91u8, 140u8, 173u8, 238u8, 221u8, 4u8, 132u8, 238u8, 99u8, 195u8, 142u8, 10u8,
              35u8, 210u8, 227u8, 22u8, 72u8, 218u8, 222u8, 227u8, 51u8, 55u8, 31u8, 252u8, 78u8,
              195u8, 11u8, 195u8, 242u8, 171u8, 75u8,
            ]
          {
            let entry = Members;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The current prime member, if one exists."]
        pub async fn prime(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Prime>()?
          };
          if runtime_storage_hash
            == [
              70u8, 101u8, 20u8, 160u8, 173u8, 87u8, 190u8, 85u8, 60u8, 249u8, 144u8, 77u8, 175u8,
              195u8, 51u8, 196u8, 234u8, 62u8, 243u8, 199u8, 126u8, 12u8, 88u8, 252u8, 1u8, 210u8,
              65u8, 210u8, 33u8, 19u8, 222u8, 11u8,
            ]
          {
            let entry = Prime;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod treasury {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ProposeSpend {
        #[codec(compact)]
        pub value: ::core::primitive::u128,
        pub beneficiary: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for ProposeSpend {
        const PALLET: &'static str = "Treasury";
        const FUNCTION: &'static str = "propose_spend";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RejectProposal {
        #[codec(compact)]
        pub proposal_id: ::core::primitive::u32,
      }
      impl ::subxt::Call for RejectProposal {
        const PALLET: &'static str = "Treasury";
        const FUNCTION: &'static str = "reject_proposal";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ApproveProposal {
        #[codec(compact)]
        pub proposal_id: ::core::primitive::u32,
      }
      impl ::subxt::Call for ApproveProposal {
        const PALLET: &'static str = "Treasury";
        const FUNCTION: &'static str = "approve_proposal";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RemoveApproval {
        #[codec(compact)]
        pub proposal_id: ::core::primitive::u32,
      }
      impl ::subxt::Call for RemoveApproval {
        const PALLET: &'static str = "Treasury";
        const FUNCTION: &'static str = "remove_approval";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
        #[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
        #[doc = "proposal is awarded."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Complexity: O(1)"]
        #[doc = "- DbReads: `ProposalCount`, `origin account`"]
        #[doc = "- DbWrites: `ProposalCount`, `Proposals`, `origin account`"]
        #[doc = "# </weight>"]
        pub fn propose_spend(
          &self,
          value: ::core::primitive::u128,
          beneficiary: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ProposeSpend, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ProposeSpend>()?
          };
          if runtime_call_hash
            == [
              28u8, 133u8, 252u8, 219u8, 50u8, 86u8, 29u8, 221u8, 188u8, 4u8, 33u8, 236u8, 171u8,
              116u8, 77u8, 164u8, 7u8, 55u8, 138u8, 37u8, 51u8, 213u8, 224u8, 6u8, 25u8, 245u8,
              137u8, 136u8, 196u8, 86u8, 28u8, 154u8,
            ]
          {
            let call = ProposeSpend { value, beneficiary };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Reject a proposed spend. The original deposit will be slashed."]
        #[doc = ""]
        #[doc = "May only be called from `T::RejectOrigin`."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Complexity: O(1)"]
        #[doc = "- DbReads: `Proposals`, `rejected proposer account`"]
        #[doc = "- DbWrites: `Proposals`, `rejected proposer account`"]
        #[doc = "# </weight>"]
        pub fn reject_proposal(
          &self,
          proposal_id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RejectProposal, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RejectProposal>()?
          };
          if runtime_call_hash
            == [
              153u8, 238u8, 223u8, 212u8, 86u8, 178u8, 184u8, 150u8, 117u8, 91u8, 69u8, 30u8,
              196u8, 134u8, 56u8, 54u8, 236u8, 145u8, 202u8, 139u8, 135u8, 254u8, 80u8, 189u8,
              40u8, 56u8, 148u8, 108u8, 42u8, 118u8, 74u8, 242u8,
            ]
          {
            let call = RejectProposal { proposal_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
        #[doc = "and the original deposit will be returned."]
        #[doc = ""]
        #[doc = "May only be called from `T::ApproveOrigin`."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Complexity: O(1)."]
        #[doc = "- DbReads: `Proposals`, `Approvals`"]
        #[doc = "- DbWrite: `Approvals`"]
        #[doc = "# </weight>"]
        pub fn approve_proposal(
          &self,
          proposal_id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ApproveProposal, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ApproveProposal>()?
          };
          if runtime_call_hash
            == [
              191u8, 81u8, 78u8, 230u8, 230u8, 192u8, 144u8, 232u8, 81u8, 70u8, 227u8, 212u8,
              194u8, 228u8, 231u8, 147u8, 57u8, 222u8, 156u8, 77u8, 173u8, 60u8, 92u8, 84u8, 255u8,
              64u8, 240u8, 45u8, 131u8, 200u8, 206u8, 231u8,
            ]
          {
            let call = ApproveProposal { proposal_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Force a previously approved proposal to be removed from the approval queue."]
        #[doc = "The original deposit will no longer be returned."]
        #[doc = ""]
        #[doc = "May only be called from `T::RejectOrigin`."]
        #[doc = "- `proposal_id`: The index of a proposal"]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Complexity: O(A) where `A` is the number of approvals"]
        #[doc = "- Db reads and writes: `Approvals`"]
        #[doc = "# </weight>"]
        #[doc = ""]
        #[doc = "Errors:"]
        #[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
        #[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
        #[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
        pub fn remove_approval(
          &self,
          proposal_id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RemoveApproval, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RemoveApproval>()?
          };
          if runtime_call_hash
            == [
              235u8, 199u8, 214u8, 142u8, 168u8, 99u8, 226u8, 70u8, 161u8, 36u8, 122u8, 95u8,
              242u8, 2u8, 191u8, 163u8, 192u8, 26u8, 185u8, 75u8, 47u8, 155u8, 80u8, 175u8, 88u8,
              85u8, 83u8, 8u8, 138u8, 130u8, 12u8, 228u8,
            ]
          {
            let call = RemoveApproval { proposal_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_treasury::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "New proposal."]
      pub struct Proposed {
        pub proposal_index: ::core::primitive::u32,
      }
      impl ::subxt::Event for Proposed {
        const PALLET: &'static str = "Treasury";
        const EVENT: &'static str = "Proposed";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "We have ended a spend period and will now allocate funds."]
      pub struct Spending {
        pub budget_remaining: ::core::primitive::u128,
      }
      impl ::subxt::Event for Spending {
        const PALLET: &'static str = "Treasury";
        const EVENT: &'static str = "Spending";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some funds have been allocated."]
      pub struct Awarded {
        pub proposal_index: ::core::primitive::u32,
        pub award: ::core::primitive::u128,
        pub account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for Awarded {
        const PALLET: &'static str = "Treasury";
        const EVENT: &'static str = "Awarded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A proposal was rejected; funds were slashed."]
      pub struct Rejected {
        pub proposal_index: ::core::primitive::u32,
        pub slashed: ::core::primitive::u128,
      }
      impl ::subxt::Event for Rejected {
        const PALLET: &'static str = "Treasury";
        const EVENT: &'static str = "Rejected";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "Some of our funds have been burnt."]
      pub struct Burnt {
        pub burnt_funds: ::core::primitive::u128,
      }
      impl ::subxt::Event for Burnt {
        const PALLET: &'static str = "Treasury";
        const EVENT: &'static str = "Burnt";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
      pub struct Rollover {
        pub rollover_balance: ::core::primitive::u128,
      }
      impl ::subxt::Event for Rollover {
        const PALLET: &'static str = "Treasury";
        const EVENT: &'static str = "Rollover";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "Some funds have been deposited."]
      pub struct Deposit {
        pub value: ::core::primitive::u128,
      }
      impl ::subxt::Event for Deposit {
        const PALLET: &'static str = "Treasury";
        const EVENT: &'static str = "Deposit";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct ProposalCount;
      impl ::subxt::StorageEntry for ProposalCount {
        const PALLET: &'static str = "Treasury";
        const STORAGE: &'static str = "ProposalCount";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Proposals<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for Proposals<'_> {
        const PALLET: &'static str = "Treasury";
        const STORAGE: &'static str = "Proposals";
        type Value = runtime_types::pallet_treasury::Proposal<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct Approvals;
      impl ::subxt::StorageEntry for Approvals {
        const PALLET: &'static str = "Treasury";
        const STORAGE: &'static str = "Approvals";
        type Value =
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Number of proposals that have been made."]
        pub async fn proposal_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ProposalCount>()?
          };
          if runtime_storage_hash
            == [
              132u8, 145u8, 78u8, 218u8, 51u8, 189u8, 55u8, 172u8, 143u8, 33u8, 140u8, 99u8, 124u8,
              208u8, 57u8, 232u8, 154u8, 110u8, 32u8, 142u8, 24u8, 149u8, 109u8, 105u8, 30u8, 83u8,
              39u8, 177u8, 127u8, 160u8, 34u8, 70u8,
            ]
          {
            let entry = ProposalCount;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Proposals that have been made."]
        pub async fn proposals(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_treasury::Proposal<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Proposals>()?
          };
          if runtime_storage_hash
            == [
              46u8, 242u8, 203u8, 56u8, 166u8, 200u8, 95u8, 110u8, 47u8, 71u8, 71u8, 45u8, 12u8,
              93u8, 222u8, 120u8, 40u8, 130u8, 29u8, 236u8, 189u8, 49u8, 115u8, 238u8, 135u8, 64u8,
              252u8, 171u8, 29u8, 229u8, 63u8, 31u8,
            ]
          {
            let entry = Proposals(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Proposals that have been made."]
        pub async fn proposals_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Proposals<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Proposals>()?
          };
          if runtime_storage_hash
            == [
              46u8, 242u8, 203u8, 56u8, 166u8, 200u8, 95u8, 110u8, 47u8, 71u8, 71u8, 45u8, 12u8,
              93u8, 222u8, 120u8, 40u8, 130u8, 29u8, 236u8, 189u8, 49u8, 115u8, 238u8, 135u8, 64u8,
              252u8, 171u8, 29u8, 229u8, 63u8, 31u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Proposal indices that have been approved but not yet awarded."]
        pub async fn approvals(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Approvals>()?
          };
          if runtime_storage_hash
            == [
              152u8, 185u8, 127u8, 54u8, 169u8, 155u8, 124u8, 22u8, 142u8, 132u8, 254u8, 197u8,
              162u8, 152u8, 15u8, 18u8, 192u8, 138u8, 196u8, 231u8, 234u8, 178u8, 111u8, 181u8,
              20u8, 131u8, 149u8, 36u8, 222u8, 4u8, 119u8, 135u8,
            ]
          {
            let entry = Approvals;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Fraction of a proposal's value that should be bonded in order to place the proposal."]
        #[doc = " An accepted proposal gets these back. A rejected proposal does not."]
        pub fn proposal_bond(
          &self,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::per_things::Permill,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Treasury", "ProposalBond")?
            == [
              254u8, 112u8, 56u8, 108u8, 71u8, 90u8, 128u8, 114u8, 54u8, 239u8, 87u8, 235u8, 71u8,
              56u8, 11u8, 132u8, 179u8, 134u8, 115u8, 139u8, 109u8, 136u8, 59u8, 69u8, 108u8,
              160u8, 18u8, 120u8, 34u8, 213u8, 166u8, 13u8,
            ]
          {
            let pallet = metadata.pallet("Treasury")?;
            let constant = pallet.constant("ProposalBond")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
        pub fn proposal_bond_minimum(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Treasury", "ProposalBondMinimum")?
            == [
              108u8, 126u8, 133u8, 208u8, 175u8, 179u8, 116u8, 159u8, 11u8, 209u8, 88u8, 51u8,
              93u8, 166u8, 108u8, 119u8, 161u8, 171u8, 185u8, 222u8, 54u8, 98u8, 16u8, 43u8, 41u8,
              161u8, 157u8, 62u8, 154u8, 134u8, 33u8, 45u8,
            ]
          {
            let pallet = metadata.pallet("Treasury")?;
            let constant = pallet.constant("ProposalBondMinimum")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
        pub fn proposal_bond_maximum(
          &self,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u128>,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Treasury", "ProposalBondMaximum")?
            == [
              114u8, 103u8, 159u8, 88u8, 128u8, 1u8, 111u8, 41u8, 34u8, 158u8, 187u8, 20u8, 100u8,
              76u8, 69u8, 88u8, 43u8, 155u8, 226u8, 161u8, 63u8, 71u8, 65u8, 241u8, 175u8, 110u8,
              76u8, 206u8, 68u8, 103u8, 200u8, 165u8,
            ]
          {
            let pallet = metadata.pallet("Treasury")?;
            let constant = pallet.constant("ProposalBondMaximum")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Period between successive spends."]
        pub fn spend_period(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Treasury", "SpendPeriod")?
            == [
              71u8, 58u8, 201u8, 70u8, 240u8, 191u8, 67u8, 71u8, 12u8, 146u8, 142u8, 91u8, 114u8,
              44u8, 213u8, 89u8, 113u8, 124u8, 210u8, 82u8, 61u8, 48u8, 9u8, 121u8, 236u8, 143u8,
              99u8, 246u8, 5u8, 195u8, 15u8, 247u8,
            ]
          {
            let pallet = metadata.pallet("Treasury")?;
            let constant = pallet.constant("SpendPeriod")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Percentage of spare funds (if any) that are burnt per spend period."]
        pub fn burn(
          &self,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::per_things::Permill,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Treasury", "Burn")?
            == [
              179u8, 112u8, 148u8, 197u8, 209u8, 103u8, 231u8, 44u8, 227u8, 103u8, 105u8, 229u8,
              107u8, 183u8, 25u8, 151u8, 112u8, 20u8, 24u8, 1u8, 72u8, 183u8, 179u8, 243u8, 0u8,
              136u8, 204u8, 139u8, 164u8, 52u8, 22u8, 168u8,
            ]
          {
            let pallet = metadata.pallet("Treasury")?;
            let constant = pallet.constant("Burn")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
        pub fn pallet_id(
          &self,
        ) -> ::core::result::Result<runtime_types::frame_support::PalletId, ::subxt::BasicError>
        {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Treasury", "PalletId")?
            == [
              65u8, 140u8, 92u8, 164u8, 174u8, 209u8, 169u8, 31u8, 29u8, 55u8, 10u8, 151u8, 10u8,
              165u8, 68u8, 7u8, 110u8, 108u8, 233u8, 42u8, 19u8, 211u8, 98u8, 108u8, 73u8, 14u8,
              235u8, 97u8, 23u8, 118u8, 211u8, 21u8,
            ]
          {
            let pallet = metadata.pallet("Treasury")?;
            let constant = pallet.constant("PalletId")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of approvals that can wait in the spending queue."]
        #[doc = ""]
        #[doc = " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."]
        pub fn max_approvals(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Treasury", "MaxApprovals")?
            == [
              90u8, 101u8, 189u8, 20u8, 137u8, 178u8, 7u8, 81u8, 148u8, 6u8, 59u8, 229u8, 228u8,
              66u8, 13u8, 179u8, 199u8, 159u8, 168u8, 227u8, 3u8, 76u8, 124u8, 35u8, 199u8, 142u8,
              79u8, 78u8, 254u8, 63u8, 2u8, 175u8,
            ]
          {
            let pallet = metadata.pallet("Treasury")?;
            let constant = pallet.constant("MaxApprovals")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod utility {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Batch {
        pub calls: ::std::vec::Vec<runtime_types::lagoon_runtime::Call>,
      }
      impl ::subxt::Call for Batch {
        const PALLET: &'static str = "Utility";
        const FUNCTION: &'static str = "batch";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AsDerivative {
        pub index: ::core::primitive::u16,
        pub call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
      }
      impl ::subxt::Call for AsDerivative {
        const PALLET: &'static str = "Utility";
        const FUNCTION: &'static str = "as_derivative";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct BatchAll {
        pub calls: ::std::vec::Vec<runtime_types::lagoon_runtime::Call>,
      }
      impl ::subxt::Call for BatchAll {
        const PALLET: &'static str = "Utility";
        const FUNCTION: &'static str = "batch_all";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct DispatchAs {
        pub as_origin: ::std::boxed::Box<runtime_types::lagoon_runtime::OriginCaller>,
        pub call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
      }
      impl ::subxt::Call for DispatchAs {
        const PALLET: &'static str = "Utility";
        const FUNCTION: &'static str = "dispatch_as";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceBatch {
        pub calls: ::std::vec::Vec<runtime_types::lagoon_runtime::Call>,
      }
      impl ::subxt::Call for ForceBatch {
        const PALLET: &'static str = "Utility";
        const FUNCTION: &'static str = "force_batch";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Send a batch of dispatch calls."]
        #[doc = ""]
        #[doc = "May be called from any origin."]
        #[doc = ""]
        #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
        #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
        #[doc = ""]
        #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
        #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
        #[doc = "# </weight>"]
        #[doc = ""]
        #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
        #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
        #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
        #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
        #[doc = "event is deposited."]
        pub fn batch(
          &self,
          calls: ::std::vec::Vec<runtime_types::lagoon_runtime::Call>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Batch, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Batch>()?
          };
          if runtime_call_hash
            == [
              62u8, 120u8, 223u8, 224u8, 130u8, 137u8, 9u8, 71u8, 50u8, 89u8, 178u8, 1u8, 149u8,
              207u8, 108u8, 175u8, 245u8, 22u8, 161u8, 81u8, 93u8, 213u8, 107u8, 195u8, 10u8,
              130u8, 127u8, 82u8, 203u8, 107u8, 45u8, 130u8,
            ]
          {
            let call = Batch { calls };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Send a call through an indexed pseudonym of the sender."]
        #[doc = ""]
        #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
        #[doc = "use the same filter as the origin of this call."]
        #[doc = ""]
        #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
        #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
        #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
        #[doc = "in the Multisig pallet instead."]
        #[doc = ""]
        #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        pub fn as_derivative(
          &self,
          index: ::core::primitive::u16,
          call: runtime_types::lagoon_runtime::Call,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, AsDerivative, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AsDerivative>()?
          };
          if runtime_call_hash
            == [
              49u8, 129u8, 45u8, 71u8, 143u8, 237u8, 227u8, 171u8, 124u8, 186u8, 77u8, 17u8, 113u8,
              43u8, 227u8, 241u8, 246u8, 69u8, 245u8, 179u8, 217u8, 140u8, 58u8, 32u8, 1u8, 221u8,
              206u8, 250u8, 17u8, 223u8, 127u8, 227u8,
            ]
          {
            let call = AsDerivative {
              index,
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Send a batch of dispatch calls and atomically execute them."]
        #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
        #[doc = ""]
        #[doc = "May be called from any origin."]
        #[doc = ""]
        #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
        #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
        #[doc = ""]
        #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
        #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
        #[doc = "# </weight>"]
        pub fn batch_all(
          &self,
          calls: ::std::vec::Vec<runtime_types::lagoon_runtime::Call>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, BatchAll, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<BatchAll>()?
          };
          if runtime_call_hash
            == [
              28u8, 148u8, 100u8, 169u8, 48u8, 76u8, 117u8, 208u8, 240u8, 25u8, 160u8, 100u8, 96u8,
              21u8, 235u8, 161u8, 139u8, 209u8, 40u8, 82u8, 57u8, 176u8, 234u8, 119u8, 11u8, 157u8,
              232u8, 242u8, 252u8, 18u8, 250u8, 132u8,
            ]
          {
            let call = BatchAll { calls };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Dispatches a function call with a provided origin."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Root_."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "- Limited storage reads."]
        #[doc = "- One DB write (event)."]
        #[doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."]
        #[doc = "# </weight>"]
        pub fn dispatch_as(
          &self,
          as_origin: runtime_types::lagoon_runtime::OriginCaller,
          call: runtime_types::lagoon_runtime::Call,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, DispatchAs, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<DispatchAs>()?
          };
          if runtime_call_hash
            == [
              135u8, 2u8, 184u8, 150u8, 30u8, 172u8, 49u8, 198u8, 67u8, 22u8, 198u8, 156u8, 48u8,
              238u8, 63u8, 139u8, 217u8, 218u8, 118u8, 206u8, 35u8, 84u8, 226u8, 88u8, 5u8, 194u8,
              98u8, 4u8, 245u8, 249u8, 184u8, 108u8,
            ]
          {
            let call = DispatchAs {
              as_origin: ::std::boxed::Box::new(as_origin),
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Send a batch of dispatch calls."]
        #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
        #[doc = ""]
        #[doc = "May be called from any origin."]
        #[doc = ""]
        #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
        #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
        #[doc = ""]
        #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
        #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
        #[doc = "# </weight>"]
        pub fn force_batch(
          &self,
          calls: ::std::vec::Vec<runtime_types::lagoon_runtime::Call>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ForceBatch, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceBatch>()?
          };
          if runtime_call_hash
            == [
              172u8, 106u8, 105u8, 88u8, 101u8, 110u8, 203u8, 148u8, 165u8, 72u8, 6u8, 127u8,
              224u8, 28u8, 231u8, 209u8, 109u8, 149u8, 59u8, 224u8, 237u8, 240u8, 150u8, 229u8,
              144u8, 221u8, 237u8, 226u8, 117u8, 157u8, 173u8, 90u8,
            ]
          {
            let call = ForceBatch { calls };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_utility::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
      #[doc = "well as the error."]
      pub struct BatchInterrupted {
        pub index: ::core::primitive::u32,
        pub error: runtime_types::sp_runtime::DispatchError,
      }
      impl ::subxt::Event for BatchInterrupted {
        const PALLET: &'static str = "Utility";
        const EVENT: &'static str = "BatchInterrupted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Batch of dispatches completed fully with no error."]
      pub struct BatchCompleted;
      impl ::subxt::Event for BatchCompleted {
        const PALLET: &'static str = "Utility";
        const EVENT: &'static str = "BatchCompleted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Batch of dispatches completed but has errors."]
      pub struct BatchCompletedWithErrors;
      impl ::subxt::Event for BatchCompletedWithErrors {
        const PALLET: &'static str = "Utility";
        const EVENT: &'static str = "BatchCompletedWithErrors";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A single item within a Batch of dispatches has completed with no error."]
      pub struct ItemCompleted;
      impl ::subxt::Event for ItemCompleted {
        const PALLET: &'static str = "Utility";
        const EVENT: &'static str = "ItemCompleted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A single item within a Batch of dispatches has completed with error."]
      pub struct ItemFailed {
        pub error: runtime_types::sp_runtime::DispatchError,
      }
      impl ::subxt::Event for ItemFailed {
        const PALLET: &'static str = "Utility";
        const EVENT: &'static str = "ItemFailed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A call was dispatched."]
      pub struct DispatchedAs {
        pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
      }
      impl ::subxt::Event for DispatchedAs {
        const PALLET: &'static str = "Utility";
        const EVENT: &'static str = "DispatchedAs";
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The limit on the number of batched calls."]
        pub fn batched_calls_limit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Utility", "batched_calls_limit")?
            == [
              230u8, 161u8, 6u8, 191u8, 162u8, 108u8, 149u8, 245u8, 68u8, 101u8, 120u8, 129u8,
              140u8, 51u8, 77u8, 97u8, 30u8, 155u8, 115u8, 70u8, 72u8, 235u8, 251u8, 192u8, 5u8,
              8u8, 188u8, 72u8, 132u8, 227u8, 44u8, 2u8,
            ]
          {
            let pallet = metadata.pallet("Utility")?;
            let constant = pallet.constant("batched_calls_limit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod identity {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AddRegistrar {
        pub account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for AddRegistrar {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "add_registrar";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetIdentity {
        pub info: ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
      }
      impl ::subxt::Call for SetIdentity {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "set_identity";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetSubs {
        pub subs: ::std::vec::Vec<(
          ::subxt::sp_core::crypto::AccountId32,
          runtime_types::pallet_identity::types::Data,
        )>,
      }
      impl ::subxt::Call for SetSubs {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "set_subs";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ClearIdentity;
      impl ::subxt::Call for ClearIdentity {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "clear_identity";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RequestJudgement {
        #[codec(compact)]
        pub reg_index: ::core::primitive::u32,
        #[codec(compact)]
        pub max_fee: ::core::primitive::u128,
      }
      impl ::subxt::Call for RequestJudgement {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "request_judgement";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      pub struct CancelRequest {
        pub reg_index: ::core::primitive::u32,
      }
      impl ::subxt::Call for CancelRequest {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "cancel_request";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetFee {
        #[codec(compact)]
        pub index: ::core::primitive::u32,
        #[codec(compact)]
        pub fee: ::core::primitive::u128,
      }
      impl ::subxt::Call for SetFee {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "set_fee";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetAccountId {
        #[codec(compact)]
        pub index: ::core::primitive::u32,
        pub new: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for SetAccountId {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "set_account_id";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetFields {
        #[codec(compact)]
        pub index: ::core::primitive::u32,
        pub fields: runtime_types::pallet_identity::types::BitFlags<
          runtime_types::pallet_identity::types::IdentityField,
        >,
      }
      impl ::subxt::Call for SetFields {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "set_fields";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ProvideJudgement {
        #[codec(compact)]
        pub reg_index: ::core::primitive::u32,
        pub target: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub judgement: runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>,
      }
      impl ::subxt::Call for ProvideJudgement {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "provide_judgement";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct KillIdentity {
        pub target: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for KillIdentity {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "kill_identity";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AddSub {
        pub sub: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub data: runtime_types::pallet_identity::types::Data,
      }
      impl ::subxt::Call for AddSub {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "add_sub";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RenameSub {
        pub sub: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub data: runtime_types::pallet_identity::types::Data,
      }
      impl ::subxt::Call for RenameSub {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "rename_sub";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RemoveSub {
        pub sub: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for RemoveSub {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "remove_sub";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct QuitSub;
      impl ::subxt::Call for QuitSub {
        const PALLET: &'static str = "Identity";
        const FUNCTION: &'static str = "quit_sub";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Add a registrar to the system."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
        #[doc = ""]
        #[doc = "- `account`: the account of the registrar."]
        #[doc = ""]
        #[doc = "Emits `RegistrarAdded` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."]
        #[doc = "- One storage mutation (codec `O(R)`)."]
        #[doc = "- One event."]
        #[doc = "# </weight>"]
        pub fn add_registrar(
          &self,
          account: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, AddRegistrar, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AddRegistrar>()?
          };
          if runtime_call_hash
            == [
              252u8, 233u8, 148u8, 186u8, 42u8, 127u8, 183u8, 107u8, 205u8, 34u8, 63u8, 170u8,
              82u8, 218u8, 141u8, 136u8, 174u8, 45u8, 3u8, 226u8, 175u8, 22u8, 18u8, 120u8, 70u8,
              4u8, 164u8, 147u8, 228u8, 52u8, 199u8, 196u8,
            ]
          {
            let call = AddRegistrar { account };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set an account's identity information and reserve the appropriate deposit."]
        #[doc = ""]
        #[doc = "If the account already has identity information, the deposit is taken as part payment"]
        #[doc = "for the new deposit."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "- `info`: The identity information."]
        #[doc = ""]
        #[doc = "Emits `IdentitySet` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(X + X' + R)`"]
        #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)"]
        #[doc = "  - where `R` judgements-count (registrar-count-bounded)"]
        #[doc = "- One balance reserve operation."]
        #[doc = "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`)."]
        #[doc = "- One event."]
        #[doc = "# </weight>"]
        pub fn set_identity(
          &self,
          info: runtime_types::pallet_identity::types::IdentityInfo,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetIdentity, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetIdentity>()?
          };
          if runtime_call_hash
            == [
              174u8, 5u8, 84u8, 201u8, 219u8, 147u8, 45u8, 241u8, 46u8, 192u8, 221u8, 20u8, 233u8,
              128u8, 206u8, 1u8, 71u8, 244u8, 153u8, 167u8, 150u8, 164u8, 16u8, 58u8, 51u8, 168u8,
              58u8, 184u8, 204u8, 229u8, 135u8, 91u8,
            ]
          {
            let call = SetIdentity {
              info: ::std::boxed::Box::new(info),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set the sub-accounts of the sender."]
        #[doc = ""]
        #[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
        #[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
        #[doc = "identity."]
        #[doc = ""]
        #[doc = "- `subs`: The identity's (new) sub-accounts."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(P + S)`"]
        #[doc = "  - where `P` old-subs-count (hard- and deposit-bounded)."]
        #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
        #[doc = "- At most one balance operations."]
        #[doc = "- DB:"]
        #[doc = "  - `P + S` storage mutations (codec complexity `O(1)`)"]
        #[doc = "  - One storage read (codec complexity `O(P)`)."]
        #[doc = "  - One storage write (codec complexity `O(S)`)."]
        #[doc = "  - One storage-exists (`IdentityOf::contains_key`)."]
        #[doc = "# </weight>"]
        pub fn set_subs(
          &self,
          subs: ::std::vec::Vec<(
            ::subxt::sp_core::crypto::AccountId32,
            runtime_types::pallet_identity::types::Data,
          )>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetSubs, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetSubs>()?
          };
          if runtime_call_hash
            == [
              157u8, 141u8, 52u8, 45u8, 109u8, 252u8, 84u8, 0u8, 38u8, 209u8, 193u8, 212u8, 177u8,
              47u8, 219u8, 132u8, 254u8, 234u8, 43u8, 200u8, 104u8, 149u8, 250u8, 169u8, 119u8,
              208u8, 111u8, 184u8, 70u8, 161u8, 245u8, 33u8,
            ]
          {
            let call = SetSubs { subs };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
        #[doc = ""]
        #[doc = "Payment: All reserved balances on the account are returned."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
        #[doc = "identity."]
        #[doc = ""]
        #[doc = "Emits `IdentityCleared` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(R + S + X)`"]
        #[doc = "  - where `R` registrar-count (governance-bounded)."]
        #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
        #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
        #[doc = "- One balance-unreserve operation."]
        #[doc = "- `2` storage reads and `S + 2` storage deletions."]
        #[doc = "- One event."]
        #[doc = "# </weight>"]
        pub fn clear_identity(
          &self,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ClearIdentity, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ClearIdentity>()?
          };
          if runtime_call_hash
            == [
              75u8, 44u8, 74u8, 122u8, 149u8, 202u8, 114u8, 230u8, 0u8, 255u8, 140u8, 122u8, 14u8,
              196u8, 205u8, 249u8, 220u8, 94u8, 216u8, 34u8, 63u8, 14u8, 8u8, 205u8, 74u8, 23u8,
              181u8, 129u8, 252u8, 110u8, 231u8, 114u8,
            ]
          {
            let call = ClearIdentity {};
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Request a judgement from a registrar."]
        #[doc = ""]
        #[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
        #[doc = "given."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
        #[doc = "registered identity."]
        #[doc = ""]
        #[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
        #[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
        #[doc = ""]
        #[doc = "```nocompile"]
        #[doc = "Self::registrars().get(reg_index).unwrap().fee"]
        #[doc = "```"]
        #[doc = ""]
        #[doc = "Emits `JudgementRequested` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(R + X)`."]
        #[doc = "- One balance-reserve operation."]
        #[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`."]
        #[doc = "- One event."]
        #[doc = "# </weight>"]
        pub fn request_judgement(
          &self,
          reg_index: ::core::primitive::u32,
          max_fee: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RequestJudgement, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RequestJudgement>()?
          };
          if runtime_call_hash
            == [
              90u8, 137u8, 162u8, 2u8, 124u8, 245u8, 7u8, 200u8, 235u8, 138u8, 217u8, 247u8, 77u8,
              87u8, 152u8, 2u8, 13u8, 175u8, 106u8, 202u8, 204u8, 113u8, 24u8, 127u8, 105u8, 136u8,
              191u8, 133u8, 212u8, 138u8, 22u8, 173u8,
            ]
          {
            let call = RequestJudgement { reg_index, max_fee };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Cancel a previous request."]
        #[doc = ""]
        #[doc = "Payment: A previously reserved deposit is returned on success."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
        #[doc = "registered identity."]
        #[doc = ""]
        #[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
        #[doc = ""]
        #[doc = "Emits `JudgementUnrequested` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(R + X)`."]
        #[doc = "- One balance-reserve operation."]
        #[doc = "- One storage mutation `O(R + X)`."]
        #[doc = "- One event"]
        #[doc = "# </weight>"]
        pub fn cancel_request(
          &self,
          reg_index: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, CancelRequest, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CancelRequest>()?
          };
          if runtime_call_hash
            == [
              153u8, 44u8, 7u8, 70u8, 91u8, 44u8, 138u8, 219u8, 118u8, 67u8, 166u8, 133u8, 90u8,
              234u8, 248u8, 42u8, 108u8, 51u8, 229u8, 196u8, 74u8, 167u8, 40u8, 229u8, 168u8,
              159u8, 2u8, 231u8, 236u8, 58u8, 109u8, 32u8,
            ]
          {
            let call = CancelRequest { reg_index };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set the fee required for a judgement to be requested from a registrar."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
        #[doc = "of the registrar whose index is `index`."]
        #[doc = ""]
        #[doc = "- `index`: the index of the registrar whose fee is to be set."]
        #[doc = "- `fee`: the new fee."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(R)`."]
        #[doc = "- One storage mutation `O(R)`."]
        #[doc = "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)"]
        #[doc = "# </weight>"]
        pub fn set_fee(
          &self,
          index: ::core::primitive::u32,
          fee: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetFee, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetFee>()?
          };
          if runtime_call_hash
            == [
              222u8, 115u8, 155u8, 44u8, 68u8, 179u8, 201u8, 247u8, 141u8, 226u8, 124u8, 20u8,
              188u8, 47u8, 190u8, 21u8, 212u8, 192u8, 213u8, 76u8, 241u8, 75u8, 87u8, 142u8, 157u8,
              229u8, 136u8, 254u8, 250u8, 28u8, 69u8, 218u8,
            ]
          {
            let call = SetFee { index, fee };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Change the account associated with a registrar."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
        #[doc = "of the registrar whose index is `index`."]
        #[doc = ""]
        #[doc = "- `index`: the index of the registrar whose fee is to be set."]
        #[doc = "- `new`: the new account ID."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(R)`."]
        #[doc = "- One storage mutation `O(R)`."]
        #[doc = "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)"]
        #[doc = "# </weight>"]
        pub fn set_account_id(
          &self,
          index: ::core::primitive::u32,
          new: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetAccountId, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetAccountId>()?
          };
          if runtime_call_hash
            == [
              191u8, 243u8, 30u8, 116u8, 109u8, 235u8, 23u8, 106u8, 24u8, 23u8, 80u8, 203u8, 68u8,
              40u8, 116u8, 38u8, 68u8, 161u8, 219u8, 64u8, 249u8, 179u8, 203u8, 113u8, 55u8, 7u8,
              180u8, 161u8, 37u8, 66u8, 6u8, 90u8,
            ]
          {
            let call = SetAccountId { index, new };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set the field information for a registrar."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
        #[doc = "of the registrar whose index is `index`."]
        #[doc = ""]
        #[doc = "- `index`: the index of the registrar whose fee is to be set."]
        #[doc = "- `fields`: the fields that the registrar concerns themselves with."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(R)`."]
        #[doc = "- One storage mutation `O(R)`."]
        #[doc = "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)"]
        #[doc = "# </weight>"]
        pub fn set_fields(
          &self,
          index: ::core::primitive::u32,
          fields: runtime_types::pallet_identity::types::BitFlags<
            runtime_types::pallet_identity::types::IdentityField,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetFields, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetFields>()?
          };
          if runtime_call_hash
            == [
              253u8, 43u8, 154u8, 17u8, 161u8, 187u8, 72u8, 96u8, 20u8, 240u8, 97u8, 43u8, 242u8,
              79u8, 115u8, 38u8, 130u8, 243u8, 176u8, 46u8, 16u8, 126u8, 191u8, 32u8, 106u8, 200u8,
              134u8, 72u8, 244u8, 189u8, 165u8, 125u8,
            ]
          {
            let call = SetFields { index, fields };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Provide a judgement for an account's identity."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
        #[doc = "of the registrar whose index is `reg_index`."]
        #[doc = ""]
        #[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
        #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
        #[doc = "  with a registered identity."]
        #[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
        #[doc = ""]
        #[doc = "Emits `JudgementGiven` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(R + X)`."]
        #[doc = "- One balance-transfer operation."]
        #[doc = "- Up to one account-lookup operation."]
        #[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`."]
        #[doc = "- One event."]
        #[doc = "# </weight>"]
        pub fn provide_judgement(
          &self,
          reg_index: ::core::primitive::u32,
          target: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          judgement: runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ProvideJudgement, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ProvideJudgement>()?
          };
          if runtime_call_hash
            == [
              212u8, 112u8, 44u8, 40u8, 54u8, 193u8, 162u8, 6u8, 65u8, 155u8, 136u8, 154u8, 138u8,
              42u8, 207u8, 177u8, 237u8, 105u8, 173u8, 128u8, 206u8, 40u8, 2u8, 243u8, 53u8, 76u8,
              104u8, 69u8, 37u8, 100u8, 86u8, 238u8,
            ]
          {
            let call = ProvideJudgement {
              reg_index,
              target,
              judgement,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove an account's identity and sub-account information and slash the deposits."]
        #[doc = ""]
        #[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
        #[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
        #[doc = "manually using `cancel_request`."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
        #[doc = ""]
        #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
        #[doc = "  with a registered identity."]
        #[doc = ""]
        #[doc = "Emits `IdentityKilled` if successful."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(R + S + X)`."]
        #[doc = "- One balance-reserve operation."]
        #[doc = "- `S + 2` storage mutations."]
        #[doc = "- One event."]
        #[doc = "# </weight>"]
        pub fn kill_identity(
          &self,
          target: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, KillIdentity, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<KillIdentity>()?
          };
          if runtime_call_hash
            == [
              115u8, 146u8, 51u8, 149u8, 116u8, 66u8, 97u8, 195u8, 125u8, 83u8, 247u8, 65u8, 247u8,
              229u8, 125u8, 108u8, 166u8, 31u8, 244u8, 12u8, 244u8, 232u8, 16u8, 182u8, 158u8,
              50u8, 19u8, 156u8, 69u8, 37u8, 209u8, 155u8,
            ]
          {
            let call = KillIdentity { target };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Add the given account to the sender's subs."]
        #[doc = ""]
        #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
        #[doc = "to the sender."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
        #[doc = "sub identity of `sub`."]
        pub fn add_sub(
          &self,
          sub: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          data: runtime_types::pallet_identity::types::Data,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, AddSub, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AddSub>()?
          };
          if runtime_call_hash
            == [
              193u8, 3u8, 191u8, 61u8, 212u8, 241u8, 217u8, 103u8, 157u8, 91u8, 230u8, 102u8, 88u8,
              180u8, 62u8, 103u8, 120u8, 42u8, 174u8, 81u8, 230u8, 178u8, 136u8, 158u8, 24u8,
              139u8, 56u8, 22u8, 187u8, 84u8, 173u8, 184u8,
            ]
          {
            let call = AddSub { sub, data };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Alter the associated name of the given sub-account."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
        #[doc = "sub identity of `sub`."]
        pub fn rename_sub(
          &self,
          sub: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          data: runtime_types::pallet_identity::types::Data,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RenameSub, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RenameSub>()?
          };
          if runtime_call_hash
            == [
              40u8, 195u8, 42u8, 204u8, 68u8, 188u8, 133u8, 45u8, 31u8, 161u8, 135u8, 167u8, 204u8,
              31u8, 247u8, 237u8, 66u8, 140u8, 60u8, 230u8, 123u8, 157u8, 17u8, 97u8, 4u8, 159u8,
              127u8, 173u8, 141u8, 204u8, 176u8, 22u8,
            ]
          {
            let call = RenameSub { sub, data };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove the given account from the sender's subs."]
        #[doc = ""]
        #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
        #[doc = "to the sender."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
        #[doc = "sub identity of `sub`."]
        pub fn remove_sub(
          &self,
          sub: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RemoveSub, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RemoveSub>()?
          };
          if runtime_call_hash
            == [
              77u8, 21u8, 44u8, 30u8, 175u8, 255u8, 127u8, 34u8, 74u8, 239u8, 52u8, 210u8, 153u8,
              164u8, 17u8, 66u8, 42u8, 124u8, 98u8, 221u8, 209u8, 126u8, 255u8, 0u8, 241u8, 173u8,
              86u8, 141u8, 224u8, 222u8, 13u8, 47u8,
            ]
          {
            let call = RemoveSub { sub };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove the sender as a sub-account."]
        #[doc = ""]
        #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
        #[doc = "to the sender (*not* the original depositor)."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
        #[doc = "super-identity."]
        #[doc = ""]
        #[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
        #[doc = "controller of an account is maliciously registered as a sub-account."]
        pub fn quit_sub(
          &self,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, QuitSub, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<QuitSub>()?
          };
          if runtime_call_hash
            == [
              62u8, 57u8, 73u8, 72u8, 119u8, 216u8, 250u8, 155u8, 57u8, 169u8, 157u8, 44u8, 87u8,
              51u8, 63u8, 231u8, 77u8, 7u8, 0u8, 119u8, 244u8, 42u8, 179u8, 51u8, 254u8, 240u8,
              55u8, 25u8, 142u8, 38u8, 87u8, 44u8,
            ]
          {
            let call = QuitSub {};
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_identity::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A name was set or reset (which will remove all judgements)."]
      pub struct IdentitySet {
        pub who: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for IdentitySet {
        const PALLET: &'static str = "Identity";
        const EVENT: &'static str = "IdentitySet";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A name was cleared, and the given balance returned."]
      pub struct IdentityCleared {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub deposit: ::core::primitive::u128,
      }
      impl ::subxt::Event for IdentityCleared {
        const PALLET: &'static str = "Identity";
        const EVENT: &'static str = "IdentityCleared";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A name was removed and the given balance slashed."]
      pub struct IdentityKilled {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub deposit: ::core::primitive::u128,
      }
      impl ::subxt::Event for IdentityKilled {
        const PALLET: &'static str = "Identity";
        const EVENT: &'static str = "IdentityKilled";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A judgement was asked from a registrar."]
      pub struct JudgementRequested {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub registrar_index: ::core::primitive::u32,
      }
      impl ::subxt::Event for JudgementRequested {
        const PALLET: &'static str = "Identity";
        const EVENT: &'static str = "JudgementRequested";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A judgement request was retracted."]
      pub struct JudgementUnrequested {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub registrar_index: ::core::primitive::u32,
      }
      impl ::subxt::Event for JudgementUnrequested {
        const PALLET: &'static str = "Identity";
        const EVENT: &'static str = "JudgementUnrequested";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A judgement was given by a registrar."]
      pub struct JudgementGiven {
        pub target: ::subxt::sp_core::crypto::AccountId32,
        pub registrar_index: ::core::primitive::u32,
      }
      impl ::subxt::Event for JudgementGiven {
        const PALLET: &'static str = "Identity";
        const EVENT: &'static str = "JudgementGiven";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "A registrar was added."]
      pub struct RegistrarAdded {
        pub registrar_index: ::core::primitive::u32,
      }
      impl ::subxt::Event for RegistrarAdded {
        const PALLET: &'static str = "Identity";
        const EVENT: &'static str = "RegistrarAdded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A sub-identity was added to an identity and the deposit paid."]
      pub struct SubIdentityAdded {
        pub sub: ::subxt::sp_core::crypto::AccountId32,
        pub main: ::subxt::sp_core::crypto::AccountId32,
        pub deposit: ::core::primitive::u128,
      }
      impl ::subxt::Event for SubIdentityAdded {
        const PALLET: &'static str = "Identity";
        const EVENT: &'static str = "SubIdentityAdded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A sub-identity was removed from an identity and the deposit freed."]
      pub struct SubIdentityRemoved {
        pub sub: ::subxt::sp_core::crypto::AccountId32,
        pub main: ::subxt::sp_core::crypto::AccountId32,
        pub deposit: ::core::primitive::u128,
      }
      impl ::subxt::Event for SubIdentityRemoved {
        const PALLET: &'static str = "Identity";
        const EVENT: &'static str = "SubIdentityRemoved";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
      #[doc = "main identity account to the sub-identity account."]
      pub struct SubIdentityRevoked {
        pub sub: ::subxt::sp_core::crypto::AccountId32,
        pub main: ::subxt::sp_core::crypto::AccountId32,
        pub deposit: ::core::primitive::u128,
      }
      impl ::subxt::Event for SubIdentityRevoked {
        const PALLET: &'static str = "Identity";
        const EVENT: &'static str = "SubIdentityRevoked";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct IdentityOf<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for IdentityOf<'_> {
        const PALLET: &'static str = "Identity";
        const STORAGE: &'static str = "IdentityOf";
        type Value = runtime_types::pallet_identity::types::Registration<::core::primitive::u128>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct SuperOf<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for SuperOf<'_> {
        const PALLET: &'static str = "Identity";
        const STORAGE: &'static str = "SuperOf";
        type Value = (
          ::subxt::sp_core::crypto::AccountId32,
          runtime_types::pallet_identity::types::Data,
        );
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct SubsOf<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for SubsOf<'_> {
        const PALLET: &'static str = "Identity";
        const STORAGE: &'static str = "SubsOf";
        type Value = (
          ::core::primitive::u128,
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            ::subxt::sp_core::crypto::AccountId32,
          >,
        );
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct Registrars;
      impl ::subxt::StorageEntry for Registrars {
        const PALLET: &'static str = "Identity";
        const STORAGE: &'static str = "Registrars";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
          ::core::option::Option<
            runtime_types::pallet_identity::types::RegistrarInfo<
              ::core::primitive::u128,
              ::subxt::sp_core::crypto::AccountId32,
            >,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Information that is pertinent to identify the entity behind an account."]
        #[doc = ""]
        #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
        pub async fn identity_of(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_identity::types::Registration<::core::primitive::u128>,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<IdentityOf>()?
          };
          if runtime_storage_hash
            == [
              225u8, 101u8, 83u8, 137u8, 207u8, 77u8, 139u8, 227u8, 36u8, 100u8, 14u8, 30u8, 197u8,
              65u8, 248u8, 227u8, 175u8, 19u8, 189u8, 86u8, 189u8, 244u8, 144u8, 137u8, 17u8,
              249u8, 223u8, 200u8, 115u8, 190u8, 225u8, 30u8,
            ]
          {
            let entry = IdentityOf(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Information that is pertinent to identify the entity behind an account."]
        #[doc = ""]
        #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
        pub async fn identity_of_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, IdentityOf<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<IdentityOf>()?
          };
          if runtime_storage_hash
            == [
              225u8, 101u8, 83u8, 137u8, 207u8, 77u8, 139u8, 227u8, 36u8, 100u8, 14u8, 30u8, 197u8,
              65u8, 248u8, 227u8, 175u8, 19u8, 189u8, 86u8, 189u8, 244u8, 144u8, 137u8, 17u8,
              249u8, 223u8, 200u8, 115u8, 190u8, 225u8, 30u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
        #[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
        pub async fn super_of(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<(
            ::subxt::sp_core::crypto::AccountId32,
            runtime_types::pallet_identity::types::Data,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SuperOf>()?
          };
          if runtime_storage_hash
            == [
              128u8, 234u8, 82u8, 152u8, 41u8, 4u8, 220u8, 41u8, 179u8, 131u8, 72u8, 121u8, 131u8,
              17u8, 40u8, 87u8, 186u8, 159u8, 209u8, 33u8, 97u8, 28u8, 236u8, 196u8, 217u8, 15u8,
              126u8, 197u8, 32u8, 165u8, 78u8, 28u8,
            ]
          {
            let entry = SuperOf(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
        #[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
        pub async fn super_of_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, SuperOf<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SuperOf>()?
          };
          if runtime_storage_hash
            == [
              128u8, 234u8, 82u8, 152u8, 41u8, 4u8, 220u8, 41u8, 179u8, 131u8, 72u8, 121u8, 131u8,
              17u8, 40u8, 87u8, 186u8, 159u8, 209u8, 33u8, 97u8, 28u8, 236u8, 196u8, 217u8, 15u8,
              126u8, 197u8, 32u8, 165u8, 78u8, 28u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Alternative \"sub\" identities of this account."]
        #[doc = ""]
        #[doc = " The first item is the deposit, the second is a vector of the accounts."]
        #[doc = ""]
        #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
        pub async fn subs_of(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          (
            ::core::primitive::u128,
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<
              ::subxt::sp_core::crypto::AccountId32,
            >,
          ),
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SubsOf>()?
          };
          if runtime_storage_hash
            == [
              136u8, 240u8, 238u8, 121u8, 194u8, 242u8, 139u8, 155u8, 32u8, 201u8, 123u8, 76u8,
              116u8, 219u8, 193u8, 45u8, 251u8, 212u8, 46u8, 194u8, 93u8, 30u8, 174u8, 133u8,
              218u8, 147u8, 175u8, 38u8, 200u8, 109u8, 104u8, 52u8,
            ]
          {
            let entry = SubsOf(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Alternative \"sub\" identities of this account."]
        #[doc = ""]
        #[doc = " The first item is the deposit, the second is a vector of the accounts."]
        #[doc = ""]
        #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
        pub async fn subs_of_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, SubsOf<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SubsOf>()?
          };
          if runtime_storage_hash
            == [
              136u8, 240u8, 238u8, 121u8, 194u8, 242u8, 139u8, 155u8, 32u8, 201u8, 123u8, 76u8,
              116u8, 219u8, 193u8, 45u8, 251u8, 212u8, 46u8, 194u8, 93u8, 30u8, 174u8, 133u8,
              218u8, 147u8, 175u8, 38u8, 200u8, 109u8, 104u8, 52u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The set of registrars. Not expected to get very big as can only be added through a"]
        #[doc = " special origin (likely a council motion)."]
        #[doc = ""]
        #[doc = " The index into this can be cast to `RegistrarIndex` to get a valid value."]
        pub async fn registrars(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            ::core::option::Option<
              runtime_types::pallet_identity::types::RegistrarInfo<
                ::core::primitive::u128,
                ::subxt::sp_core::crypto::AccountId32,
              >,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Registrars>()?
          };
          if runtime_storage_hash
            == [
              92u8, 161u8, 80u8, 77u8, 121u8, 65u8, 69u8, 26u8, 171u8, 158u8, 66u8, 36u8, 81u8,
              1u8, 79u8, 144u8, 188u8, 236u8, 88u8, 158u8, 84u8, 100u8, 71u8, 86u8, 20u8, 68u8,
              178u8, 164u8, 157u8, 105u8, 58u8, 7u8,
            ]
          {
            let entry = Registrars;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The amount held on deposit for a registered identity"]
        pub fn basic_deposit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Identity", "BasicDeposit")?
            == [
              44u8, 149u8, 62u8, 127u8, 92u8, 126u8, 105u8, 16u8, 121u8, 205u8, 102u8, 72u8, 58u8,
              169u8, 37u8, 202u8, 123u8, 113u8, 140u8, 158u8, 102u8, 185u8, 74u8, 143u8, 129u8,
              106u8, 189u8, 175u8, 27u8, 238u8, 248u8, 115u8,
            ]
          {
            let pallet = metadata.pallet("Identity")?;
            let constant = pallet.constant("BasicDeposit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The amount held on deposit per additional field for a registered identity."]
        pub fn field_deposit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Identity", "FieldDeposit")?
            == [
              78u8, 139u8, 164u8, 76u8, 163u8, 107u8, 86u8, 111u8, 203u8, 20u8, 43u8, 74u8, 68u8,
              161u8, 21u8, 207u8, 185u8, 27u8, 44u8, 71u8, 198u8, 145u8, 215u8, 243u8, 76u8, 128u8,
              71u8, 163u8, 244u8, 67u8, 23u8, 111u8,
            ]
          {
            let pallet = metadata.pallet("Identity")?;
            let constant = pallet.constant("FieldDeposit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The amount held on deposit for a registered subaccount. This should account for the fact"]
        #[doc = " that one storage item's value will increase by the size of an account ID, and there will"]
        #[doc = " be another trie item whose value is the size of an account ID plus 32 bytes."]
        pub fn sub_account_deposit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Identity", "SubAccountDeposit")?
            == [
              141u8, 204u8, 34u8, 34u8, 12u8, 5u8, 24u8, 58u8, 183u8, 149u8, 80u8, 205u8, 49u8,
              196u8, 230u8, 73u8, 62u8, 138u8, 163u8, 250u8, 31u8, 77u8, 95u8, 31u8, 210u8, 121u8,
              14u8, 86u8, 69u8, 7u8, 251u8, 33u8,
            ]
          {
            let pallet = metadata.pallet("Identity")?;
            let constant = pallet.constant("SubAccountDeposit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of sub-accounts allowed per identified account."]
        pub fn max_sub_accounts(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Identity", "MaxSubAccounts")?
            == [
              75u8, 1u8, 223u8, 132u8, 121u8, 0u8, 145u8, 246u8, 118u8, 222u8, 108u8, 45u8, 1u8,
              1u8, 238u8, 13u8, 162u8, 100u8, 2u8, 24u8, 108u8, 168u8, 44u8, 133u8, 240u8, 3u8,
              244u8, 76u8, 150u8, 248u8, 153u8, 144u8,
            ]
          {
            let pallet = metadata.pallet("Identity")?;
            let constant = pallet.constant("MaxSubAccounts")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O"]
        #[doc = " required to access an identity, but can be pretty high."]
        pub fn max_additional_fields(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Identity", "MaxAdditionalFields")?
            == [
              52u8, 246u8, 245u8, 172u8, 242u8, 40u8, 79u8, 11u8, 106u8, 28u8, 59u8, 171u8, 135u8,
              210u8, 67u8, 174u8, 63u8, 72u8, 28u8, 214u8, 124u8, 140u8, 172u8, 255u8, 36u8, 40u8,
              51u8, 46u8, 207u8, 202u8, 248u8, 125u8,
            ]
          {
            let pallet = metadata.pallet("Identity")?;
            let constant = pallet.constant("MaxAdditionalFields")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Maxmimum number of registrars allowed in the system. Needed to bound the complexity"]
        #[doc = " of, e.g., updating judgements."]
        pub fn max_registrars(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Identity", "MaxRegistrars")?
            == [
              172u8, 101u8, 183u8, 243u8, 249u8, 249u8, 95u8, 104u8, 100u8, 120u8, 13u8, 188u8,
              132u8, 255u8, 115u8, 90u8, 19u8, 111u8, 100u8, 17u8, 147u8, 179u8, 209u8, 41u8, 37u8,
              25u8, 180u8, 206u8, 120u8, 211u8, 188u8, 184u8,
            ]
          {
            let pallet = metadata.pallet("Identity")?;
            let constant = pallet.constant("MaxRegistrars")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod election_provider_multi_phase {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SubmitUnsigned {
        pub raw_solution: ::std::boxed::Box<
          runtime_types::pallet_election_provider_multi_phase::RawSolution<
            runtime_types::lagoon_runtime::config::consensus::NposCompactSolution16,
          >,
        >,
        pub witness: runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
      }
      impl ::subxt::Call for SubmitUnsigned {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const FUNCTION: &'static str = "submit_unsigned";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetMinimumUntrustedScore {
        pub maybe_next_score:
          ::core::option::Option<runtime_types::sp_npos_elections::ElectionScore>,
      }
      impl ::subxt::Call for SetMinimumUntrustedScore {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const FUNCTION: &'static str = "set_minimum_untrusted_score";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetEmergencyElectionResult {
        pub supports: ::std::vec::Vec<(
          ::subxt::sp_core::crypto::AccountId32,
          runtime_types::sp_npos_elections::Support<::subxt::sp_core::crypto::AccountId32>,
        )>,
      }
      impl ::subxt::Call for SetEmergencyElectionResult {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const FUNCTION: &'static str = "set_emergency_election_result";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Submit {
        pub raw_solution: ::std::boxed::Box<
          runtime_types::pallet_election_provider_multi_phase::RawSolution<
            runtime_types::lagoon_runtime::config::consensus::NposCompactSolution16,
          >,
        >,
      }
      impl ::subxt::Call for Submit {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const FUNCTION: &'static str = "submit";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct GovernanceFallback {
        pub maybe_max_voters: ::core::option::Option<::core::primitive::u32>,
        pub maybe_max_targets: ::core::option::Option<::core::primitive::u32>,
      }
      impl ::subxt::Call for GovernanceFallback {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const FUNCTION: &'static str = "governance_fallback";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Submit a solution for the unsigned phase."]
        #[doc = ""]
        #[doc = "The dispatch origin fo this call must be __none__."]
        #[doc = ""]
        #[doc = "This submission is checked on the fly. Moreover, this unsigned solution is only"]
        #[doc = "validated when submitted to the pool from the **local** node. Effectively, this means"]
        #[doc = "that only active validators can submit this transaction when authoring a block (similar"]
        #[doc = "to an inherent)."]
        #[doc = ""]
        #[doc = "To prevent any incorrect solution (and thus wasted time/weight), this transaction will"]
        #[doc = "panic if the solution submitted by the validator is invalid in any way, effectively"]
        #[doc = "putting their authoring reward at risk."]
        #[doc = ""]
        #[doc = "No deposit or reward is associated with this submission."]
        pub fn submit_unsigned(
          &self,
          raw_solution: runtime_types::pallet_election_provider_multi_phase::RawSolution<
            runtime_types::lagoon_runtime::config::consensus::NposCompactSolution16,
          >,
          witness: runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SubmitUnsigned, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SubmitUnsigned>()?
          };
          if runtime_call_hash
            == [
              212u8, 126u8, 4u8, 62u8, 15u8, 223u8, 54u8, 80u8, 27u8, 96u8, 170u8, 169u8, 238u8,
              149u8, 139u8, 190u8, 179u8, 158u8, 126u8, 191u8, 50u8, 201u8, 108u8, 200u8, 78u8,
              139u8, 92u8, 69u8, 50u8, 239u8, 51u8, 18u8,
            ]
          {
            let call = SubmitUnsigned {
              raw_solution: ::std::boxed::Box::new(raw_solution),
              witness,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set a new value for `MinimumUntrustedScore`."]
        #[doc = ""]
        #[doc = "Dispatch origin must be aligned with `T::ForceOrigin`."]
        #[doc = ""]
        #[doc = "This check can be turned off by setting the value to `None`."]
        pub fn set_minimum_untrusted_score(
          &self,
          maybe_next_score: ::core::option::Option<runtime_types::sp_npos_elections::ElectionScore>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            SetMinimumUntrustedScore,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetMinimumUntrustedScore>()?
          };
          if runtime_call_hash
            == [
              207u8, 31u8, 247u8, 72u8, 55u8, 18u8, 99u8, 157u8, 155u8, 89u8, 59u8, 156u8, 254u8,
              3u8, 181u8, 85u8, 48u8, 42u8, 73u8, 243u8, 35u8, 90u8, 142u8, 14u8, 62u8, 48u8, 15u8,
              125u8, 194u8, 103u8, 2u8, 175u8,
            ]
          {
            let call = SetMinimumUntrustedScore { maybe_next_score };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set a solution in the queue, to be handed out to the client of this pallet in the next"]
        #[doc = "call to `ElectionProvider::elect`."]
        #[doc = ""]
        #[doc = "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`."]
        #[doc = ""]
        #[doc = "The solution is not checked for any feasibility and is assumed to be trustworthy, as any"]
        #[doc = "feasibility check itself can in principle cause the election process to fail (due to"]
        #[doc = "memory/weight constrains)."]
        pub fn set_emergency_election_result(
          &self,
          supports: ::std::vec::Vec<(
            ::subxt::sp_core::crypto::AccountId32,
            runtime_types::sp_npos_elections::Support<::subxt::sp_core::crypto::AccountId32>,
          )>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            SetEmergencyElectionResult,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetEmergencyElectionResult>()?
          };
          if runtime_call_hash
            == [
              195u8, 164u8, 133u8, 193u8, 58u8, 154u8, 182u8, 83u8, 231u8, 217u8, 199u8, 27u8,
              239u8, 143u8, 60u8, 103u8, 139u8, 253u8, 49u8, 242u8, 8u8, 41u8, 160u8, 192u8, 123u8,
              98u8, 137u8, 13u8, 170u8, 167u8, 246u8, 175u8,
            ]
          {
            let call = SetEmergencyElectionResult { supports };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Submit a solution for the signed phase."]
        #[doc = ""]
        #[doc = "The dispatch origin fo this call must be __signed__."]
        #[doc = ""]
        #[doc = "The solution is potentially queued, based on the claimed score and processed at the end"]
        #[doc = "of the signed phase."]
        #[doc = ""]
        #[doc = "A deposit is reserved and recorded for the solution. Based on the outcome, the solution"]
        #[doc = "might be rewarded, slashed, or get all or a part of the deposit back."]
        pub fn submit(
          &self,
          raw_solution: runtime_types::pallet_election_provider_multi_phase::RawSolution<
            runtime_types::lagoon_runtime::config::consensus::NposCompactSolution16,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Submit, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Submit>()?
          };
          if runtime_call_hash
            == [
              2u8, 131u8, 162u8, 38u8, 102u8, 73u8, 144u8, 71u8, 200u8, 229u8, 140u8, 38u8, 58u8,
              159u8, 59u8, 167u8, 91u8, 169u8, 22u8, 228u8, 127u8, 153u8, 125u8, 241u8, 60u8, 61u8,
              103u8, 192u8, 95u8, 87u8, 81u8, 73u8,
            ]
          {
            let call = Submit {
              raw_solution: ::std::boxed::Box::new(raw_solution),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Trigger the governance fallback."]
        #[doc = ""]
        #[doc = "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to"]
        #[doc = "calling [`Call::set_emergency_election_result`]."]
        pub fn governance_fallback(
          &self,
          maybe_max_voters: ::core::option::Option<::core::primitive::u32>,
          maybe_max_targets: ::core::option::Option<::core::primitive::u32>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            GovernanceFallback,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<GovernanceFallback>()?
          };
          if runtime_call_hash
            == [
              195u8, 190u8, 140u8, 94u8, 209u8, 100u8, 92u8, 194u8, 78u8, 226u8, 16u8, 168u8, 52u8,
              117u8, 88u8, 178u8, 84u8, 248u8, 117u8, 38u8, 152u8, 71u8, 37u8, 158u8, 77u8, 204u8,
              59u8, 184u8, 22u8, 239u8, 92u8, 209u8,
            ]
          {
            let call = GovernanceFallback {
              maybe_max_voters,
              maybe_max_targets,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_election_provider_multi_phase::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A solution was stored with the given compute."]
      #[doc = ""]
      #[doc = "If the solution is signed, this means that it hasn't yet been processed. If the"]
      #[doc = "solution is unsigned, this means that it has also been processed."]
      #[doc = ""]
      #[doc = "The `bool` is `true` when a previous solution was ejected to make room for this one."]
      pub struct SolutionStored {
        pub election_compute: runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
        pub prev_ejected: ::core::primitive::bool,
      }
      impl ::subxt::Event for SolutionStored {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const EVENT: &'static str = "SolutionStored";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The election has been finalized, with `Some` of the given computation, or else if the"]
      #[doc = "election failed, `None`."]
      pub struct ElectionFinalized {
        pub election_compute: ::core::option::Option<
          runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
        >,
      }
      impl ::subxt::Event for ElectionFinalized {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const EVENT: &'static str = "ElectionFinalized";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An account has been rewarded for their signed submission being finalized."]
      pub struct Rewarded {
        pub account: ::subxt::sp_core::crypto::AccountId32,
        pub value: ::core::primitive::u128,
      }
      impl ::subxt::Event for Rewarded {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const EVENT: &'static str = "Rewarded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An account has been slashed for submitting an invalid signed submission."]
      pub struct Slashed {
        pub account: ::subxt::sp_core::crypto::AccountId32,
        pub value: ::core::primitive::u128,
      }
      impl ::subxt::Event for Slashed {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const EVENT: &'static str = "Slashed";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "The signed phase of the given round has started."]
      pub struct SignedPhaseStarted {
        pub round: ::core::primitive::u32,
      }
      impl ::subxt::Event for SignedPhaseStarted {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const EVENT: &'static str = "SignedPhaseStarted";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "The unsigned phase of the given round has started."]
      pub struct UnsignedPhaseStarted {
        pub round: ::core::primitive::u32,
      }
      impl ::subxt::Event for UnsignedPhaseStarted {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const EVENT: &'static str = "UnsignedPhaseStarted";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Round;
      impl ::subxt::StorageEntry for Round {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const STORAGE: &'static str = "Round";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct CurrentPhase;
      impl ::subxt::StorageEntry for CurrentPhase {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const STORAGE: &'static str = "CurrentPhase";
        type Value =
          runtime_types::pallet_election_provider_multi_phase::Phase<::core::primitive::u32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct QueuedSolution;
      impl ::subxt::StorageEntry for QueuedSolution {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const STORAGE: &'static str = "QueuedSolution";
        type Value = runtime_types::pallet_election_provider_multi_phase::ReadySolution<
          ::subxt::sp_core::crypto::AccountId32,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Snapshot;
      impl ::subxt::StorageEntry for Snapshot {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const STORAGE: &'static str = "Snapshot";
        type Value = runtime_types::pallet_election_provider_multi_phase::RoundSnapshot;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct DesiredTargets;
      impl ::subxt::StorageEntry for DesiredTargets {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const STORAGE: &'static str = "DesiredTargets";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct SnapshotMetadata;
      impl ::subxt::StorageEntry for SnapshotMetadata {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const STORAGE: &'static str = "SnapshotMetadata";
        type Value = runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct SignedSubmissionNextIndex;
      impl ::subxt::StorageEntry for SignedSubmissionNextIndex {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const STORAGE: &'static str = "SignedSubmissionNextIndex";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct SignedSubmissionIndices;
      impl ::subxt::StorageEntry for SignedSubmissionIndices {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const STORAGE: &'static str = "SignedSubmissionIndices";
        type Value = runtime_types::frame_support::storage::bounded_btree_map::BoundedBTreeMap<
          runtime_types::sp_npos_elections::ElectionScore,
          ::core::primitive::u32,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct SignedSubmissionsMap<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for SignedSubmissionsMap<'_> {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const STORAGE: &'static str = "SignedSubmissionsMap";
        type Value = runtime_types::pallet_election_provider_multi_phase::signed::SignedSubmission<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
          runtime_types::lagoon_runtime::config::consensus::NposCompactSolution16,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct MinimumUntrustedScore;
      impl ::subxt::StorageEntry for MinimumUntrustedScore {
        const PALLET: &'static str = "ElectionProviderMultiPhase";
        const STORAGE: &'static str = "MinimumUntrustedScore";
        type Value = runtime_types::sp_npos_elections::ElectionScore;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Internal counter for the number of rounds."]
        #[doc = ""]
        #[doc = " This is useful for de-duplication of transactions submitted to the pool, and general"]
        #[doc = " diagnostics of the pallet."]
        #[doc = ""]
        #[doc = " This is merely incremented once per every time that an upstream `elect` is called."]
        pub async fn round(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Round>()?
          };
          if runtime_storage_hash
            == [
              16u8, 49u8, 176u8, 52u8, 202u8, 111u8, 120u8, 8u8, 217u8, 96u8, 35u8, 14u8, 233u8,
              130u8, 47u8, 98u8, 34u8, 44u8, 166u8, 188u8, 199u8, 210u8, 21u8, 19u8, 70u8, 96u8,
              139u8, 8u8, 53u8, 82u8, 165u8, 239u8,
            ]
          {
            let entry = Round;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Current phase."]
        pub async fn current_phase(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_election_provider_multi_phase::Phase<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CurrentPhase>()?
          };
          if runtime_storage_hash
            == [
              162u8, 177u8, 133u8, 63u8, 175u8, 78u8, 85u8, 0u8, 233u8, 84u8, 10u8, 250u8, 190u8,
              39u8, 101u8, 11u8, 52u8, 31u8, 129u8, 151u8, 63u8, 179u8, 120u8, 28u8, 70u8, 61u8,
              91u8, 153u8, 95u8, 32u8, 33u8, 157u8,
            ]
          {
            let entry = CurrentPhase;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Current best solution, signed or unsigned, queued to be returned upon `elect`."]
        pub async fn queued_solution(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_election_provider_multi_phase::ReadySolution<
              ::subxt::sp_core::crypto::AccountId32,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<QueuedSolution>()?
          };
          if runtime_storage_hash
            == [
              145u8, 177u8, 147u8, 52u8, 30u8, 135u8, 33u8, 145u8, 204u8, 82u8, 1u8, 165u8, 208u8,
              39u8, 181u8, 2u8, 96u8, 236u8, 19u8, 144u8, 87u8, 197u8, 25u8, 164u8, 116u8, 0u8,
              120u8, 245u8, 154u8, 30u8, 191u8, 155u8,
            ]
          {
            let entry = QueuedSolution;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Snapshot data of the round."]
        #[doc = ""]
        #[doc = " This is created at the beginning of the signed phase and cleared upon calling `elect`."]
        pub async fn snapshot(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_election_provider_multi_phase::RoundSnapshot,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Snapshot>()?
          };
          if runtime_storage_hash
            == [
              28u8, 163u8, 105u8, 94u8, 66u8, 226u8, 134u8, 29u8, 210u8, 211u8, 182u8, 236u8,
              180u8, 109u8, 203u8, 44u8, 1u8, 50u8, 112u8, 201u8, 200u8, 12u8, 88u8, 248u8, 253u8,
              182u8, 56u8, 156u8, 169u8, 179u8, 19u8, 161u8,
            ]
          {
            let entry = Snapshot;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Desired number of targets to elect for this round."]
        #[doc = ""]
        #[doc = " Only exists when [`Snapshot`] is present."]
        pub async fn desired_targets(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<DesiredTargets>()?
          };
          if runtime_storage_hash
            == [
              16u8, 247u8, 4u8, 181u8, 93u8, 79u8, 12u8, 212u8, 146u8, 167u8, 80u8, 58u8, 118u8,
              52u8, 68u8, 87u8, 90u8, 140u8, 31u8, 210u8, 2u8, 116u8, 220u8, 231u8, 115u8, 112u8,
              118u8, 118u8, 68u8, 34u8, 151u8, 165u8,
            ]
          {
            let entry = DesiredTargets;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The metadata of the [`RoundSnapshot`]"]
        #[doc = ""]
        #[doc = " Only exists when [`Snapshot`] is present."]
        pub async fn snapshot_metadata(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SnapshotMetadata>()?
          };
          if runtime_storage_hash
            == [
              240u8, 57u8, 126u8, 76u8, 84u8, 244u8, 120u8, 136u8, 164u8, 49u8, 185u8, 89u8, 126u8,
              18u8, 117u8, 235u8, 33u8, 226u8, 173u8, 254u8, 79u8, 194u8, 154u8, 123u8, 29u8,
              237u8, 116u8, 185u8, 36u8, 248u8, 46u8, 103u8,
            ]
          {
            let entry = SnapshotMetadata;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The next index to be assigned to an incoming signed submission."]
        #[doc = ""]
        #[doc = " Every accepted submission is assigned a unique index; that index is bound to that particular"]
        #[doc = " submission for the duration of the election. On election finalization, the next index is"]
        #[doc = " reset to 0."]
        #[doc = ""]
        #[doc = " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its"]
        #[doc = " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,"]
        #[doc = " because iteration is slow. Instead, we store the value here."]
        pub async fn signed_submission_next_index(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SignedSubmissionNextIndex>()?
          };
          if runtime_storage_hash
            == [
              242u8, 11u8, 157u8, 105u8, 96u8, 7u8, 31u8, 20u8, 51u8, 141u8, 182u8, 180u8, 13u8,
              172u8, 155u8, 59u8, 42u8, 238u8, 115u8, 8u8, 6u8, 137u8, 45u8, 2u8, 123u8, 187u8,
              53u8, 215u8, 19u8, 129u8, 54u8, 22u8,
            ]
          {
            let entry = SignedSubmissionNextIndex;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " A sorted, bounded set of `(score, index)`, where each `index` points to a value in"]
        #[doc = " `SignedSubmissions`."]
        #[doc = ""]
        #[doc = " We never need to process more than a single signed submission at a time. Signed submissions"]
        #[doc = " can be quite large, so we're willing to pay the cost of multiple database accesses to access"]
        #[doc = " them one at a time instead of reading and decoding all of them at once."]
        pub async fn signed_submission_indices(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_btree_map::BoundedBTreeMap<
            runtime_types::sp_npos_elections::ElectionScore,
            ::core::primitive::u32,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SignedSubmissionIndices>()?
          };
          if runtime_storage_hash
            == [
              191u8, 143u8, 241u8, 251u8, 74u8, 9u8, 145u8, 136u8, 135u8, 76u8, 182u8, 85u8, 140u8,
              252u8, 58u8, 183u8, 217u8, 121u8, 213u8, 200u8, 167u8, 89u8, 15u8, 212u8, 62u8, 90u8,
              192u8, 214u8, 130u8, 196u8, 14u8, 175u8,
            ]
          {
            let entry = SignedSubmissionIndices;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Unchecked, signed solutions."]
        #[doc = ""]
        #[doc = " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while"]
        #[doc = " allowing us to keep only a single one in memory at a time."]
        #[doc = ""]
        #[doc = " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or"]
        #[doc = " affect; we shouldn't need a cryptographically secure hasher."]
        pub async fn signed_submissions_map(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_election_provider_multi_phase::signed::SignedSubmission<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
              runtime_types::lagoon_runtime::config::consensus::NposCompactSolution16,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SignedSubmissionsMap>()?
          };
          if runtime_storage_hash
            == [
              75u8, 2u8, 76u8, 74u8, 73u8, 167u8, 243u8, 1u8, 31u8, 26u8, 48u8, 196u8, 177u8, 21u8,
              233u8, 66u8, 251u8, 11u8, 11u8, 252u8, 63u8, 206u8, 115u8, 116u8, 73u8, 232u8, 241u8,
              179u8, 249u8, 34u8, 61u8, 171u8,
            ]
          {
            let entry = SignedSubmissionsMap(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Unchecked, signed solutions."]
        #[doc = ""]
        #[doc = " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while"]
        #[doc = " allowing us to keep only a single one in memory at a time."]
        #[doc = ""]
        #[doc = " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or"]
        #[doc = " affect; we shouldn't need a cryptographically secure hasher."]
        pub async fn signed_submissions_map_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, SignedSubmissionsMap<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SignedSubmissionsMap>()?
          };
          if runtime_storage_hash
            == [
              75u8, 2u8, 76u8, 74u8, 73u8, 167u8, 243u8, 1u8, 31u8, 26u8, 48u8, 196u8, 177u8, 21u8,
              233u8, 66u8, 251u8, 11u8, 11u8, 252u8, 63u8, 206u8, 115u8, 116u8, 73u8, 232u8, 241u8,
              179u8, 249u8, 34u8, 61u8, 171u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The minimum score that each 'untrusted' solution must attain in order to be considered"]
        #[doc = " feasible."]
        #[doc = ""]
        #[doc = " Can be set via `set_minimum_untrusted_score`."]
        pub async fn minimum_untrusted_score(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::sp_npos_elections::ElectionScore>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<MinimumUntrustedScore>()?
          };
          if runtime_storage_hash
            == [
              18u8, 171u8, 56u8, 63u8, 7u8, 1u8, 53u8, 42u8, 72u8, 35u8, 26u8, 124u8, 223u8, 95u8,
              170u8, 176u8, 134u8, 140u8, 66u8, 115u8, 51u8, 163u8, 202u8, 82u8, 189u8, 180u8,
              139u8, 98u8, 18u8, 14u8, 176u8, 66u8,
            ]
          {
            let entry = MinimumUntrustedScore;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Duration of the unsigned phase."]
        pub fn unsigned_phase(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "UnsignedPhase")?
            == [
              252u8, 58u8, 254u8, 55u8, 124u8, 222u8, 252u8, 218u8, 73u8, 211u8, 18u8, 206u8,
              233u8, 17u8, 202u8, 176u8, 32u8, 189u8, 143u8, 185u8, 56u8, 120u8, 184u8, 158u8,
              10u8, 166u8, 193u8, 36u8, 118u8, 58u8, 239u8, 95u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("UnsignedPhase")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Duration of the signed phase."]
        pub fn signed_phase(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "SignedPhase")?
            == [
              63u8, 15u8, 168u8, 217u8, 6u8, 184u8, 197u8, 27u8, 10u8, 102u8, 5u8, 140u8, 61u8,
              101u8, 26u8, 255u8, 226u8, 2u8, 58u8, 242u8, 169u8, 115u8, 80u8, 199u8, 6u8, 8u8,
              212u8, 243u8, 171u8, 167u8, 102u8, 73u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("SignedPhase")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The minimum amount of improvement to the solution score that defines a solution as"]
        #[doc = " \"better\" in the Signed phase."]
        pub fn better_signed_threshold(
          &self,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::per_things::Perbill,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "BetterSignedThreshold")?
            == [
              77u8, 124u8, 224u8, 100u8, 113u8, 25u8, 159u8, 166u8, 136u8, 195u8, 84u8, 168u8,
              142u8, 209u8, 89u8, 249u8, 7u8, 218u8, 51u8, 240u8, 211u8, 135u8, 183u8, 192u8,
              194u8, 195u8, 107u8, 37u8, 23u8, 191u8, 254u8, 185u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("BetterSignedThreshold")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The minimum amount of improvement to the solution score that defines a solution as"]
        #[doc = " \"better\" in the Unsigned phase."]
        pub fn better_unsigned_threshold(
          &self,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::per_things::Perbill,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "BetterUnsignedThreshold")?
            == [
              38u8, 62u8, 189u8, 136u8, 151u8, 166u8, 34u8, 147u8, 119u8, 70u8, 126u8, 29u8, 200u8,
              206u8, 195u8, 24u8, 14u8, 80u8, 151u8, 132u8, 83u8, 135u8, 206u8, 68u8, 169u8, 75u8,
              1u8, 40u8, 186u8, 203u8, 226u8, 118u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("BetterUnsignedThreshold")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The repeat threshold of the offchain worker."]
        #[doc = ""]
        #[doc = " For example, if it is 5, that means that at least 5 blocks will elapse between attempts"]
        #[doc = " to submit the worker's solution."]
        pub fn offchain_repeat(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "OffchainRepeat")?
            == [
              198u8, 126u8, 79u8, 166u8, 112u8, 27u8, 163u8, 219u8, 1u8, 137u8, 210u8, 16u8, 193u8,
              225u8, 76u8, 219u8, 59u8, 101u8, 224u8, 90u8, 27u8, 177u8, 194u8, 232u8, 208u8, 85u8,
              113u8, 199u8, 80u8, 108u8, 187u8, 35u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("OffchainRepeat")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The priority of the unsigned transaction submitted in the unsigned-phase"]
        pub fn miner_tx_priority(
          &self,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "MinerTxPriority")?
            == [
              153u8, 173u8, 61u8, 171u8, 80u8, 43u8, 214u8, 150u8, 233u8, 153u8, 197u8, 226u8,
              116u8, 21u8, 156u8, 154u8, 131u8, 241u8, 214u8, 151u8, 136u8, 203u8, 251u8, 42u8,
              170u8, 221u8, 211u8, 97u8, 45u8, 93u8, 60u8, 5u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("MinerTxPriority")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Maximum number of signed submissions that can be queued."]
        #[doc = ""]
        #[doc = " It is best to avoid adjusting this during an election, as it impacts downstream data"]
        #[doc = " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you"]
        #[doc = " update this value during an election, you _must_ ensure that"]
        #[doc = " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,"]
        #[doc = " attempts to submit new solutions may cause a runtime panic."]
        pub fn signed_max_submissions(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "SignedMaxSubmissions")?
            == [
              51u8, 141u8, 203u8, 103u8, 212u8, 173u8, 160u8, 148u8, 108u8, 30u8, 104u8, 248u8,
              65u8, 237u8, 167u8, 11u8, 102u8, 146u8, 117u8, 133u8, 0u8, 61u8, 129u8, 138u8, 157u8,
              221u8, 248u8, 33u8, 118u8, 182u8, 199u8, 248u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("SignedMaxSubmissions")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Maximum weight of a signed solution."]
        #[doc = ""]
        #[doc = " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of"]
        #[doc = " this pallet), then [`MinerConfig::solution_weight`] is used to compare against"]
        #[doc = " this value."]
        pub fn signed_max_weight(
          &self,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "SignedMaxWeight")?
            == [
              234u8, 71u8, 206u8, 32u8, 15u8, 21u8, 136u8, 148u8, 6u8, 164u8, 14u8, 127u8, 41u8,
              123u8, 232u8, 136u8, 10u8, 225u8, 10u8, 200u8, 147u8, 105u8, 247u8, 12u8, 63u8, 92u8,
              240u8, 48u8, 1u8, 227u8, 98u8, 145u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("SignedMaxWeight")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum amount of unchecked solutions to refund the call fee for."]
        pub fn signed_max_refunds(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "SignedMaxRefunds")?
            == [
              86u8, 134u8, 190u8, 26u8, 28u8, 169u8, 156u8, 24u8, 50u8, 139u8, 26u8, 80u8, 81u8,
              111u8, 60u8, 175u8, 250u8, 7u8, 92u8, 177u8, 191u8, 226u8, 198u8, 12u8, 179u8, 243u8,
              38u8, 21u8, 212u8, 121u8, 52u8, 148u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("SignedMaxRefunds")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Base reward for a signed solution"]
        pub fn signed_reward_base(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "SignedRewardBase")?
            == [
              75u8, 6u8, 220u8, 82u8, 254u8, 68u8, 121u8, 240u8, 254u8, 11u8, 94u8, 125u8, 209u8,
              65u8, 179u8, 73u8, 144u8, 153u8, 20u8, 114u8, 77u8, 254u8, 191u8, 165u8, 207u8, 97u8,
              79u8, 55u8, 170u8, 200u8, 52u8, 117u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("SignedRewardBase")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Base deposit for a signed solution."]
        pub fn signed_deposit_base(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "SignedDepositBase")?
            == [
              121u8, 17u8, 104u8, 106u8, 35u8, 174u8, 141u8, 187u8, 241u8, 60u8, 198u8, 238u8,
              16u8, 68u8, 144u8, 201u8, 72u8, 235u8, 241u8, 154u8, 190u8, 128u8, 160u8, 217u8,
              146u8, 149u8, 20u8, 161u8, 42u8, 117u8, 166u8, 143u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("SignedDepositBase")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Per-byte deposit for a signed solution."]
        pub fn signed_deposit_byte(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "SignedDepositByte")?
            == [
              126u8, 215u8, 223u8, 171u8, 235u8, 252u8, 251u8, 141u8, 37u8, 236u8, 85u8, 114u8,
              184u8, 68u8, 200u8, 136u8, 224u8, 187u8, 192u8, 34u8, 5u8, 52u8, 211u8, 24u8, 121u8,
              90u8, 101u8, 113u8, 3u8, 11u8, 120u8, 250u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("SignedDepositByte")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Per-weight deposit for a signed solution."]
        pub fn signed_deposit_weight(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "SignedDepositWeight")?
            == [
              229u8, 168u8, 140u8, 127u8, 138u8, 107u8, 171u8, 116u8, 171u8, 63u8, 205u8, 84u8,
              202u8, 17u8, 134u8, 171u8, 204u8, 31u8, 54u8, 43u8, 138u8, 50u8, 55u8, 112u8, 27u8,
              103u8, 183u8, 209u8, 167u8, 214u8, 19u8, 95u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("SignedDepositWeight")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of electing voters to put in the snapshot. At the moment, snapshots"]
        #[doc = " are only over a single block, but once multi-block elections are introduced they will"]
        #[doc = " take place over multiple blocks."]
        pub fn max_electing_voters(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "MaxElectingVoters")?
            == [
              202u8, 136u8, 180u8, 3u8, 16u8, 142u8, 77u8, 250u8, 154u8, 116u8, 78u8, 110u8, 72u8,
              135u8, 115u8, 120u8, 109u8, 12u8, 156u8, 129u8, 250u8, 120u8, 71u8, 221u8, 93u8,
              172u8, 53u8, 44u8, 192u8, 164u8, 213u8, 68u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("MaxElectingVoters")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of electable targets to put in the snapshot."]
        pub fn max_electable_targets(
          &self,
        ) -> ::core::result::Result<::core::primitive::u16, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("ElectionProviderMultiPhase", "MaxElectableTargets")?
            == [
              71u8, 15u8, 36u8, 77u8, 111u8, 52u8, 73u8, 94u8, 27u8, 213u8, 122u8, 58u8, 126u8,
              157u8, 17u8, 238u8, 168u8, 174u8, 0u8, 94u8, 15u8, 86u8, 206u8, 115u8, 222u8, 234u8,
              25u8, 195u8, 107u8, 138u8, 213u8, 39u8,
            ]
          {
            let pallet = metadata.pallet("ElectionProviderMultiPhase")?;
            let constant = pallet.constant("MaxElectableTargets")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod recovery {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AsRecovered {
        pub account: ::subxt::sp_core::crypto::AccountId32,
        pub call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
      }
      impl ::subxt::Call for AsRecovered {
        const PALLET: &'static str = "Recovery";
        const FUNCTION: &'static str = "as_recovered";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetRecovered {
        pub lost: ::subxt::sp_core::crypto::AccountId32,
        pub rescuer: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for SetRecovered {
        const PALLET: &'static str = "Recovery";
        const FUNCTION: &'static str = "set_recovered";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct CreateRecovery {
        pub friends: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        pub threshold: ::core::primitive::u16,
        pub delay_period: ::core::primitive::u32,
      }
      impl ::subxt::Call for CreateRecovery {
        const PALLET: &'static str = "Recovery";
        const FUNCTION: &'static str = "create_recovery";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct InitiateRecovery {
        pub account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for InitiateRecovery {
        const PALLET: &'static str = "Recovery";
        const FUNCTION: &'static str = "initiate_recovery";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct VouchRecovery {
        pub lost: ::subxt::sp_core::crypto::AccountId32,
        pub rescuer: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for VouchRecovery {
        const PALLET: &'static str = "Recovery";
        const FUNCTION: &'static str = "vouch_recovery";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ClaimRecovery {
        pub account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for ClaimRecovery {
        const PALLET: &'static str = "Recovery";
        const FUNCTION: &'static str = "claim_recovery";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct CloseRecovery {
        pub rescuer: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for CloseRecovery {
        const PALLET: &'static str = "Recovery";
        const FUNCTION: &'static str = "close_recovery";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RemoveRecovery;
      impl ::subxt::Call for RemoveRecovery {
        const PALLET: &'static str = "Recovery";
        const FUNCTION: &'static str = "remove_recovery";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct CancelRecovered {
        pub account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for CancelRecovered {
        const PALLET: &'static str = "Recovery";
        const FUNCTION: &'static str = "cancel_recovered";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Send a call through a recovered account."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and registered to"]
        #[doc = "be able to make calls on behalf of the recovered account."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `account`: The recovered account you want to make a call on-behalf-of."]
        #[doc = "- `call`: The call you want to make with the recovered account."]
        pub fn as_recovered(
          &self,
          account: ::subxt::sp_core::crypto::AccountId32,
          call: runtime_types::lagoon_runtime::Call,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, AsRecovered, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AsRecovered>()?
          };
          if runtime_call_hash
            == [
              83u8, 195u8, 84u8, 155u8, 76u8, 60u8, 44u8, 179u8, 237u8, 13u8, 119u8, 101u8, 210u8,
              205u8, 67u8, 159u8, 191u8, 24u8, 144u8, 36u8, 35u8, 251u8, 125u8, 127u8, 239u8, 90u8,
              195u8, 185u8, 246u8, 217u8, 255u8, 41u8,
            ]
          {
            let call = AsRecovered {
              account,
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Allow ROOT to bypass the recovery process and set an a rescuer account"]
        #[doc = "for a lost account directly."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _ROOT_."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `lost`: The \"lost account\" to be recovered."]
        #[doc = "- `rescuer`: The \"rescuer account\" which can call as the lost account."]
        pub fn set_recovered(
          &self,
          lost: ::subxt::sp_core::crypto::AccountId32,
          rescuer: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetRecovered, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetRecovered>()?
          };
          if runtime_call_hash
            == [
              145u8, 211u8, 5u8, 219u8, 80u8, 212u8, 22u8, 115u8, 69u8, 211u8, 240u8, 126u8, 216u8,
              4u8, 114u8, 26u8, 147u8, 5u8, 237u8, 88u8, 6u8, 179u8, 250u8, 42u8, 83u8, 233u8,
              206u8, 202u8, 161u8, 183u8, 8u8, 71u8,
            ]
          {
            let call = SetRecovered { lost, rescuer };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Create a recovery configuration for your account. This makes your account recoverable."]
        #[doc = ""]
        #[doc = "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance"]
        #[doc = "will be reserved for storing the recovery configuration. This deposit is returned"]
        #[doc = "in full when the user calls `remove_recovery`."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be"]
        #[doc = "  ordered and contain no duplicate values."]
        #[doc = "- `threshold`: The number of friends that must vouch for a recovery attempt before the"]
        #[doc = "  account can be recovered. Should be less than or equal to the length of the list of"]
        #[doc = "  friends."]
        #[doc = "- `delay_period`: The number of blocks after a recovery attempt is initialized that"]
        #[doc = "  needs to pass before the account can be recovered."]
        pub fn create_recovery(
          &self,
          friends: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          threshold: ::core::primitive::u16,
          delay_period: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, CreateRecovery, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CreateRecovery>()?
          };
          if runtime_call_hash
            == [
              30u8, 207u8, 200u8, 26u8, 124u8, 31u8, 40u8, 176u8, 79u8, 107u8, 133u8, 72u8, 76u8,
              70u8, 155u8, 50u8, 110u8, 160u8, 102u8, 67u8, 9u8, 250u8, 46u8, 30u8, 181u8, 5u8,
              173u8, 245u8, 47u8, 140u8, 208u8, 94u8,
            ]
          {
            let call = CreateRecovery {
              friends,
              threshold,
              delay_period,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Initiate the process for recovering a recoverable account."]
        #[doc = ""]
        #[doc = "Payment: `RecoveryDeposit` balance will be reserved for initiating the"]
        #[doc = "recovery process. This deposit will always be repatriated to the account"]
        #[doc = "trying to be recovered. See `close_recovery`."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `account`: The lost account that you want to recover. This account needs to be"]
        #[doc = "  recoverable (i.e. have a recovery configuration)."]
        pub fn initiate_recovery(
          &self,
          account: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, InitiateRecovery, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<InitiateRecovery>()?
          };
          if runtime_call_hash
            == [
              228u8, 181u8, 122u8, 254u8, 193u8, 183u8, 111u8, 155u8, 202u8, 61u8, 239u8, 164u8,
              32u8, 221u8, 33u8, 8u8, 222u8, 29u8, 129u8, 207u8, 57u8, 45u8, 204u8, 148u8, 146u8,
              208u8, 41u8, 131u8, 93u8, 222u8, 135u8, 193u8,
            ]
          {
            let call = InitiateRecovery { account };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Allow a \"friend\" of a recoverable account to vouch for an active recovery"]
        #[doc = "process for that account."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and must be a \"friend\""]
        #[doc = "for the recoverable account."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `lost`: The lost account that you want to recover."]
        #[doc = "- `rescuer`: The account trying to rescue the lost account that you want to vouch for."]
        #[doc = ""]
        #[doc = "The combination of these two parameters must point to an active recovery"]
        #[doc = "process."]
        pub fn vouch_recovery(
          &self,
          lost: ::subxt::sp_core::crypto::AccountId32,
          rescuer: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, VouchRecovery, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<VouchRecovery>()?
          };
          if runtime_call_hash
            == [
              76u8, 132u8, 48u8, 165u8, 92u8, 53u8, 80u8, 187u8, 6u8, 5u8, 164u8, 197u8, 187u8,
              6u8, 16u8, 215u8, 164u8, 74u8, 91u8, 60u8, 184u8, 187u8, 181u8, 199u8, 46u8, 39u8,
              28u8, 198u8, 117u8, 88u8, 211u8, 190u8,
            ]
          {
            let call = VouchRecovery { lost, rescuer };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Allow a successful rescuer to claim their recovered account."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\""]
        #[doc = "who has successfully completed the account recovery process: collected"]
        #[doc = "`threshold` or more vouches, waited `delay_period` blocks since initiation."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `account`: The lost account that you want to claim has been successfully recovered by"]
        #[doc = "  you."]
        pub fn claim_recovery(
          &self,
          account: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ClaimRecovery, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ClaimRecovery>()?
          };
          if runtime_call_hash
            == [
              195u8, 55u8, 70u8, 234u8, 141u8, 34u8, 39u8, 172u8, 212u8, 190u8, 54u8, 110u8, 176u8,
              52u8, 12u8, 130u8, 28u8, 230u8, 172u8, 91u8, 238u8, 206u8, 84u8, 88u8, 69u8, 211u8,
              199u8, 22u8, 23u8, 209u8, 90u8, 193u8,
            ]
          {
            let call = ClaimRecovery { account };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "As the controller of a recoverable account, close an active recovery"]
        #[doc = "process for your account."]
        #[doc = ""]
        #[doc = "Payment: By calling this function, the recoverable account will receive"]
        #[doc = "the recovery deposit `RecoveryDeposit` placed by the rescuer."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and must be a"]
        #[doc = "recoverable account with an active recovery process for it."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `rescuer`: The account trying to rescue this recoverable account."]
        pub fn close_recovery(
          &self,
          rescuer: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, CloseRecovery, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CloseRecovery>()?
          };
          if runtime_call_hash
            == [
              158u8, 40u8, 62u8, 3u8, 248u8, 215u8, 197u8, 16u8, 220u8, 255u8, 123u8, 25u8, 177u8,
              245u8, 224u8, 251u8, 33u8, 45u8, 144u8, 160u8, 223u8, 153u8, 169u8, 79u8, 23u8, 52u8,
              74u8, 167u8, 100u8, 171u8, 184u8, 3u8,
            ]
          {
            let call = CloseRecovery { rescuer };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove the recovery process for your account. Recovered accounts are still accessible."]
        #[doc = ""]
        #[doc = "NOTE: The user must make sure to call `close_recovery` on all active"]
        #[doc = "recovery attempts before calling this function else it will fail."]
        #[doc = ""]
        #[doc = "Payment: By calling this function the recoverable account will unreserve"]
        #[doc = "their recovery configuration deposit."]
        #[doc = "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)"]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and must be a"]
        #[doc = "recoverable account (i.e. has a recovery configuration)."]
        pub fn remove_recovery(
          &self,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RemoveRecovery, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RemoveRecovery>()?
          };
          if runtime_call_hash
            == [
              14u8, 1u8, 44u8, 24u8, 242u8, 16u8, 67u8, 192u8, 79u8, 206u8, 104u8, 233u8, 91u8,
              202u8, 253u8, 100u8, 48u8, 78u8, 233u8, 24u8, 124u8, 176u8, 211u8, 87u8, 63u8, 110u8,
              2u8, 7u8, 231u8, 53u8, 177u8, 196u8,
            ]
          {
            let call = RemoveRecovery {};
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Cancel the ability to use `as_recovered` for `account`."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and registered to"]
        #[doc = "be able to make calls on behalf of the recovered account."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `account`: The recovered account you are able to call on-behalf-of."]
        pub fn cancel_recovered(
          &self,
          account: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, CancelRecovered, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CancelRecovered>()?
          };
          if runtime_call_hash
            == [
              13u8, 254u8, 118u8, 22u8, 136u8, 186u8, 122u8, 67u8, 111u8, 61u8, 62u8, 61u8, 247u8,
              98u8, 120u8, 84u8, 252u8, 99u8, 206u8, 178u8, 230u8, 59u8, 23u8, 165u8, 85u8, 113u8,
              89u8, 20u8, 219u8, 243u8, 34u8, 175u8,
            ]
          {
            let call = CancelRecovered { account };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_recovery::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A recovery process has been set up for an account."]
      pub struct RecoveryCreated {
        pub account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for RecoveryCreated {
        const PALLET: &'static str = "Recovery";
        const EVENT: &'static str = "RecoveryCreated";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A recovery process has been initiated for lost account by rescuer account."]
      pub struct RecoveryInitiated {
        pub lost_account: ::subxt::sp_core::crypto::AccountId32,
        pub rescuer_account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for RecoveryInitiated {
        const PALLET: &'static str = "Recovery";
        const EVENT: &'static str = "RecoveryInitiated";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A recovery process for lost account by rescuer account has been vouched for by sender."]
      pub struct RecoveryVouched {
        pub lost_account: ::subxt::sp_core::crypto::AccountId32,
        pub rescuer_account: ::subxt::sp_core::crypto::AccountId32,
        pub sender: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for RecoveryVouched {
        const PALLET: &'static str = "Recovery";
        const EVENT: &'static str = "RecoveryVouched";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A recovery process for lost account by rescuer account has been closed."]
      pub struct RecoveryClosed {
        pub lost_account: ::subxt::sp_core::crypto::AccountId32,
        pub rescuer_account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for RecoveryClosed {
        const PALLET: &'static str = "Recovery";
        const EVENT: &'static str = "RecoveryClosed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Lost account has been successfully recovered by rescuer account."]
      pub struct AccountRecovered {
        pub lost_account: ::subxt::sp_core::crypto::AccountId32,
        pub rescuer_account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for AccountRecovered {
        const PALLET: &'static str = "Recovery";
        const EVENT: &'static str = "AccountRecovered";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A recovery process has been removed for an account."]
      pub struct RecoveryRemoved {
        pub lost_account: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for RecoveryRemoved {
        const PALLET: &'static str = "Recovery";
        const EVENT: &'static str = "RecoveryRemoved";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Recoverable<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Recoverable<'_> {
        const PALLET: &'static str = "Recovery";
        const STORAGE: &'static str = "Recoverable";
        type Value = runtime_types::pallet_recovery::RecoveryConfig<
          ::core::primitive::u32,
          ::core::primitive::u128,
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            ::subxt::sp_core::crypto::AccountId32,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct ActiveRecoveries<'a>(
        pub &'a ::subxt::sp_core::crypto::AccountId32,
        pub &'a ::subxt::sp_core::crypto::AccountId32,
      );
      impl ::subxt::StorageEntry for ActiveRecoveries<'_> {
        const PALLET: &'static str = "Recovery";
        const STORAGE: &'static str = "ActiveRecoveries";
        type Value = runtime_types::pallet_recovery::ActiveRecovery<
          ::core::primitive::u32,
          ::core::primitive::u128,
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            ::subxt::sp_core::crypto::AccountId32,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
          ])
        }
      }
      pub struct Proxy<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Proxy<'_> {
        const PALLET: &'static str = "Recovery";
        const STORAGE: &'static str = "Proxy";
        type Value = ::subxt::sp_core::crypto::AccountId32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The set of recoverable accounts and their recovery configuration."]
        pub async fn recoverable(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_recovery::RecoveryConfig<
              ::core::primitive::u32,
              ::core::primitive::u128,
              runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                ::subxt::sp_core::crypto::AccountId32,
              >,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Recoverable>()?
          };
          if runtime_storage_hash
            == [
              30u8, 237u8, 102u8, 106u8, 155u8, 244u8, 76u8, 175u8, 148u8, 194u8, 185u8, 168u8,
              254u8, 122u8, 159u8, 243u8, 49u8, 194u8, 45u8, 193u8, 216u8, 200u8, 60u8, 247u8,
              48u8, 174u8, 86u8, 29u8, 162u8, 57u8, 131u8, 125u8,
            ]
          {
            let entry = Recoverable(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The set of recoverable accounts and their recovery configuration."]
        pub async fn recoverable_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Recoverable<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Recoverable>()?
          };
          if runtime_storage_hash
            == [
              30u8, 237u8, 102u8, 106u8, 155u8, 244u8, 76u8, 175u8, 148u8, 194u8, 185u8, 168u8,
              254u8, 122u8, 159u8, 243u8, 49u8, 194u8, 45u8, 193u8, 216u8, 200u8, 60u8, 247u8,
              48u8, 174u8, 86u8, 29u8, 162u8, 57u8, 131u8, 125u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Active recovery attempts."]
        #[doc = ""]
        #[doc = " First account is the account to be recovered, and the second account"]
        #[doc = " is the user trying to recover the account."]
        pub async fn active_recoveries(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          _1: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_recovery::ActiveRecovery<
              ::core::primitive::u32,
              ::core::primitive::u128,
              runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                ::subxt::sp_core::crypto::AccountId32,
              >,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ActiveRecoveries>()?
          };
          if runtime_storage_hash
            == [
              243u8, 90u8, 226u8, 64u8, 19u8, 99u8, 142u8, 84u8, 144u8, 49u8, 3u8, 89u8, 164u8,
              102u8, 32u8, 146u8, 113u8, 78u8, 127u8, 156u8, 27u8, 188u8, 254u8, 235u8, 10u8, 1u8,
              47u8, 176u8, 191u8, 46u8, 21u8, 119u8,
            ]
          {
            let entry = ActiveRecoveries(_0, _1);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Active recovery attempts."]
        #[doc = ""]
        #[doc = " First account is the account to be recovered, and the second account"]
        #[doc = " is the user trying to recover the account."]
        pub async fn active_recoveries_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, ActiveRecoveries<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ActiveRecoveries>()?
          };
          if runtime_storage_hash
            == [
              243u8, 90u8, 226u8, 64u8, 19u8, 99u8, 142u8, 84u8, 144u8, 49u8, 3u8, 89u8, 164u8,
              102u8, 32u8, 146u8, 113u8, 78u8, 127u8, 156u8, 27u8, 188u8, 254u8, 235u8, 10u8, 1u8,
              47u8, 176u8, 191u8, 46u8, 21u8, 119u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The list of allowed proxy accounts."]
        #[doc = ""]
        #[doc = " Map from the user who can access it to the recovered account."]
        pub async fn proxy(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Proxy>()?
          };
          if runtime_storage_hash
            == [
              78u8, 154u8, 21u8, 65u8, 134u8, 175u8, 202u8, 96u8, 212u8, 82u8, 32u8, 12u8, 64u8,
              25u8, 228u8, 132u8, 146u8, 156u8, 63u8, 19u8, 131u8, 110u8, 80u8, 229u8, 254u8, 75u8,
              176u8, 233u8, 210u8, 102u8, 108u8, 249u8,
            ]
          {
            let entry = Proxy(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The list of allowed proxy accounts."]
        #[doc = ""]
        #[doc = " Map from the user who can access it to the recovered account."]
        pub async fn proxy_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Proxy<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Proxy>()?
          };
          if runtime_storage_hash
            == [
              78u8, 154u8, 21u8, 65u8, 134u8, 175u8, 202u8, 96u8, 212u8, 82u8, 32u8, 12u8, 64u8,
              25u8, 228u8, 132u8, 146u8, 156u8, 63u8, 19u8, 131u8, 110u8, 80u8, 229u8, 254u8, 75u8,
              176u8, 233u8, 210u8, 102u8, 108u8, 249u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The base amount of currency needed to reserve for creating a recovery configuration."]
        #[doc = ""]
        #[doc = " This is held for an additional storage item whose value size is"]
        #[doc = " `2 + sizeof(BlockNumber, Balance)` bytes."]
        pub fn config_deposit_base(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Recovery", "ConfigDepositBase")?
            == [
              17u8, 246u8, 238u8, 21u8, 29u8, 39u8, 134u8, 93u8, 72u8, 175u8, 146u8, 59u8, 23u8,
              72u8, 17u8, 191u8, 153u8, 199u8, 54u8, 141u8, 206u8, 113u8, 104u8, 152u8, 24u8,
              131u8, 56u8, 189u8, 234u8, 46u8, 68u8, 147u8,
            ]
          {
            let pallet = metadata.pallet("Recovery")?;
            let constant = pallet.constant("ConfigDepositBase")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The amount of currency needed per additional user when creating a recovery"]
        #[doc = " configuration."]
        #[doc = ""]
        #[doc = " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage"]
        #[doc = " value."]
        pub fn friend_deposit_factor(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Recovery", "FriendDepositFactor")?
            == [
              173u8, 112u8, 108u8, 42u8, 94u8, 199u8, 185u8, 172u8, 27u8, 107u8, 107u8, 50u8,
              251u8, 249u8, 221u8, 59u8, 192u8, 143u8, 255u8, 141u8, 92u8, 52u8, 88u8, 201u8,
              102u8, 216u8, 77u8, 75u8, 115u8, 52u8, 86u8, 26u8,
            ]
          {
            let pallet = metadata.pallet("Recovery")?;
            let constant = pallet.constant("FriendDepositFactor")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum amount of friends allowed in a recovery configuration."]
        #[doc = ""]
        #[doc = " NOTE: The threshold programmed in this Pallet uses u16, so it does"]
        #[doc = " not really make sense to have a limit here greater than u16::MAX."]
        #[doc = " But also, that is a lot more than you should probably set this value"]
        #[doc = " to anyway..."]
        pub fn max_friends(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Recovery", "MaxFriends")?
            == [
              58u8, 149u8, 88u8, 111u8, 186u8, 86u8, 87u8, 58u8, 101u8, 63u8, 135u8, 200u8, 238u8,
              239u8, 167u8, 83u8, 244u8, 220u8, 20u8, 159u8, 148u8, 69u8, 81u8, 75u8, 200u8, 212u8,
              220u8, 219u8, 159u8, 11u8, 90u8, 29u8,
            ]
          {
            let pallet = metadata.pallet("Recovery")?;
            let constant = pallet.constant("MaxFriends")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The base amount of currency needed to reserve for starting a recovery."]
        #[doc = ""]
        #[doc = " This is primarily held for deterring malicious recovery attempts, and should"]
        #[doc = " have a value large enough that a bad actor would choose not to place this"]
        #[doc = " deposit. It also acts to fund additional storage item whose value size is"]
        #[doc = " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable"]
        #[doc = " threshold."]
        pub fn recovery_deposit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Recovery", "RecoveryDeposit")?
            == [
              163u8, 168u8, 45u8, 178u8, 113u8, 109u8, 121u8, 191u8, 59u8, 214u8, 38u8, 25u8, 87u8,
              130u8, 161u8, 231u8, 182u8, 245u8, 32u8, 144u8, 117u8, 59u8, 131u8, 45u8, 115u8,
              46u8, 205u8, 182u8, 239u8, 72u8, 126u8, 157u8,
            ]
          {
            let pallet = metadata.pallet("Recovery")?;
            let constant = pallet.constant("RecoveryDeposit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod scheduler {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Schedule {
        pub when: ::core::primitive::u32,
        pub maybe_periodic:
          ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
        pub priority: ::core::primitive::u8,
        pub call: ::std::boxed::Box<
          runtime_types::frame_support::traits::schedule::MaybeHashed<
            runtime_types::lagoon_runtime::Call,
            ::subxt::sp_core::H256,
          >,
        >,
      }
      impl ::subxt::Call for Schedule {
        const PALLET: &'static str = "Scheduler";
        const FUNCTION: &'static str = "schedule";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Cancel {
        pub when: ::core::primitive::u32,
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Call for Cancel {
        const PALLET: &'static str = "Scheduler";
        const FUNCTION: &'static str = "cancel";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ScheduleNamed {
        pub id: ::std::vec::Vec<::core::primitive::u8>,
        pub when: ::core::primitive::u32,
        pub maybe_periodic:
          ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
        pub priority: ::core::primitive::u8,
        pub call: ::std::boxed::Box<
          runtime_types::frame_support::traits::schedule::MaybeHashed<
            runtime_types::lagoon_runtime::Call,
            ::subxt::sp_core::H256,
          >,
        >,
      }
      impl ::subxt::Call for ScheduleNamed {
        const PALLET: &'static str = "Scheduler";
        const FUNCTION: &'static str = "schedule_named";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct CancelNamed {
        pub id: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Call for CancelNamed {
        const PALLET: &'static str = "Scheduler";
        const FUNCTION: &'static str = "cancel_named";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ScheduleAfter {
        pub after: ::core::primitive::u32,
        pub maybe_periodic:
          ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
        pub priority: ::core::primitive::u8,
        pub call: ::std::boxed::Box<
          runtime_types::frame_support::traits::schedule::MaybeHashed<
            runtime_types::lagoon_runtime::Call,
            ::subxt::sp_core::H256,
          >,
        >,
      }
      impl ::subxt::Call for ScheduleAfter {
        const PALLET: &'static str = "Scheduler";
        const FUNCTION: &'static str = "schedule_after";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ScheduleNamedAfter {
        pub id: ::std::vec::Vec<::core::primitive::u8>,
        pub after: ::core::primitive::u32,
        pub maybe_periodic:
          ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
        pub priority: ::core::primitive::u8,
        pub call: ::std::boxed::Box<
          runtime_types::frame_support::traits::schedule::MaybeHashed<
            runtime_types::lagoon_runtime::Call,
            ::subxt::sp_core::H256,
          >,
        >,
      }
      impl ::subxt::Call for ScheduleNamedAfter {
        const PALLET: &'static str = "Scheduler";
        const FUNCTION: &'static str = "schedule_named_after";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Anonymously schedule a task."]
        pub fn schedule(
          &self,
          when: ::core::primitive::u32,
          maybe_periodic: ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
          priority: ::core::primitive::u8,
          call: runtime_types::frame_support::traits::schedule::MaybeHashed<
            runtime_types::lagoon_runtime::Call,
            ::subxt::sp_core::H256,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Schedule, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Schedule>()?
          };
          if runtime_call_hash
            == [
              202u8, 180u8, 13u8, 84u8, 34u8, 55u8, 33u8, 32u8, 250u8, 71u8, 129u8, 243u8, 153u8,
              253u8, 245u8, 187u8, 177u8, 98u8, 234u8, 194u8, 9u8, 53u8, 140u8, 38u8, 29u8, 46u8,
              146u8, 41u8, 141u8, 135u8, 131u8, 180u8,
            ]
          {
            let call = Schedule {
              when,
              maybe_periodic,
              priority,
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Cancel an anonymously scheduled task."]
        pub fn cancel(
          &self,
          when: ::core::primitive::u32,
          index: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Cancel, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Cancel>()?
          };
          if runtime_call_hash
            == [
              118u8, 0u8, 188u8, 218u8, 148u8, 86u8, 139u8, 15u8, 3u8, 161u8, 6u8, 150u8, 46u8,
              32u8, 85u8, 179u8, 106u8, 113u8, 240u8, 115u8, 167u8, 114u8, 243u8, 69u8, 103u8,
              60u8, 99u8, 135u8, 21u8, 8u8, 19u8, 225u8,
            ]
          {
            let call = Cancel { when, index };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Schedule a named task."]
        pub fn schedule_named(
          &self,
          id: ::std::vec::Vec<::core::primitive::u8>,
          when: ::core::primitive::u32,
          maybe_periodic: ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
          priority: ::core::primitive::u8,
          call: runtime_types::frame_support::traits::schedule::MaybeHashed<
            runtime_types::lagoon_runtime::Call,
            ::subxt::sp_core::H256,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ScheduleNamed, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ScheduleNamed>()?
          };
          if runtime_call_hash
            == [
              236u8, 92u8, 79u8, 252u8, 16u8, 10u8, 86u8, 7u8, 225u8, 162u8, 180u8, 232u8, 107u8,
              49u8, 207u8, 153u8, 138u8, 117u8, 29u8, 164u8, 123u8, 225u8, 152u8, 103u8, 104u8,
              94u8, 92u8, 85u8, 178u8, 191u8, 103u8, 38u8,
            ]
          {
            let call = ScheduleNamed {
              id,
              when,
              maybe_periodic,
              priority,
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Cancel a named scheduled task."]
        pub fn cancel_named(
          &self,
          id: ::std::vec::Vec<::core::primitive::u8>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, CancelNamed, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CancelNamed>()?
          };
          if runtime_call_hash
            == [
              118u8, 221u8, 232u8, 126u8, 67u8, 134u8, 33u8, 7u8, 224u8, 110u8, 181u8, 18u8, 57u8,
              39u8, 15u8, 64u8, 90u8, 132u8, 2u8, 238u8, 19u8, 241u8, 194u8, 120u8, 5u8, 109u8,
              74u8, 205u8, 42u8, 244u8, 99u8, 54u8,
            ]
          {
            let call = CancelNamed { id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Anonymously schedule a task after a delay."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Same as [`schedule`]."]
        #[doc = "# </weight>"]
        pub fn schedule_after(
          &self,
          after: ::core::primitive::u32,
          maybe_periodic: ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
          priority: ::core::primitive::u8,
          call: runtime_types::frame_support::traits::schedule::MaybeHashed<
            runtime_types::lagoon_runtime::Call,
            ::subxt::sp_core::H256,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ScheduleAfter, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ScheduleAfter>()?
          };
          if runtime_call_hash
            == [
              185u8, 222u8, 76u8, 196u8, 163u8, 2u8, 38u8, 212u8, 191u8, 60u8, 63u8, 3u8, 94u8,
              50u8, 129u8, 220u8, 79u8, 24u8, 129u8, 80u8, 205u8, 157u8, 170u8, 200u8, 43u8, 177u8,
              99u8, 60u8, 245u8, 44u8, 31u8, 194u8,
            ]
          {
            let call = ScheduleAfter {
              after,
              maybe_periodic,
              priority,
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Schedule a named task after a delay."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Same as [`schedule_named`](Self::schedule_named)."]
        #[doc = "# </weight>"]
        pub fn schedule_named_after(
          &self,
          id: ::std::vec::Vec<::core::primitive::u8>,
          after: ::core::primitive::u32,
          maybe_periodic: ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
          priority: ::core::primitive::u8,
          call: runtime_types::frame_support::traits::schedule::MaybeHashed<
            runtime_types::lagoon_runtime::Call,
            ::subxt::sp_core::H256,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ScheduleNamedAfter,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ScheduleNamedAfter>()?
          };
          if runtime_call_hash
            == [
              183u8, 251u8, 128u8, 102u8, 239u8, 0u8, 142u8, 40u8, 31u8, 69u8, 210u8, 216u8, 28u8,
              75u8, 55u8, 244u8, 126u8, 179u8, 175u8, 192u8, 212u8, 162u8, 77u8, 234u8, 200u8,
              225u8, 179u8, 17u8, 22u8, 67u8, 91u8, 84u8,
            ]
          {
            let call = ScheduleNamedAfter {
              id,
              after,
              maybe_periodic,
              priority,
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_scheduler::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Scheduled some task."]
      pub struct Scheduled {
        pub when: ::core::primitive::u32,
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Event for Scheduled {
        const PALLET: &'static str = "Scheduler";
        const EVENT: &'static str = "Scheduled";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Canceled some task."]
      pub struct Canceled {
        pub when: ::core::primitive::u32,
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Event for Canceled {
        const PALLET: &'static str = "Scheduler";
        const EVENT: &'static str = "Canceled";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Dispatched some task."]
      pub struct Dispatched {
        pub task: (::core::primitive::u32, ::core::primitive::u32),
        pub id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
        pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
      }
      impl ::subxt::Event for Dispatched {
        const PALLET: &'static str = "Scheduler";
        const EVENT: &'static str = "Dispatched";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The call for the provided hash was not found so the task has been aborted."]
      pub struct CallLookupFailed {
        pub task: (::core::primitive::u32, ::core::primitive::u32),
        pub id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
        pub error: runtime_types::frame_support::traits::schedule::LookupError,
      }
      impl ::subxt::Event for CallLookupFailed {
        const PALLET: &'static str = "Scheduler";
        const EVENT: &'static str = "CallLookupFailed";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Agenda<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for Agenda<'_> {
        const PALLET: &'static str = "Scheduler";
        const STORAGE: &'static str = "Agenda";
        type Value = ::std::vec::Vec<
          ::core::option::Option<
            runtime_types::pallet_scheduler::ScheduledV3<
              runtime_types::frame_support::traits::schedule::MaybeHashed<
                runtime_types::lagoon_runtime::Call,
                ::subxt::sp_core::H256,
              >,
              ::core::primitive::u32,
              runtime_types::lagoon_runtime::OriginCaller,
              ::subxt::sp_core::crypto::AccountId32,
            >,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct Lookup<'a>(pub &'a [::core::primitive::u8]);
      impl ::subxt::StorageEntry for Lookup<'_> {
        const PALLET: &'static str = "Scheduler";
        const STORAGE: &'static str = "Lookup";
        type Value = (::core::primitive::u32, ::core::primitive::u32);
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
        pub async fn agenda(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::std::vec::Vec<
            ::core::option::Option<
              runtime_types::pallet_scheduler::ScheduledV3<
                runtime_types::frame_support::traits::schedule::MaybeHashed<
                  runtime_types::lagoon_runtime::Call,
                  ::subxt::sp_core::H256,
                >,
                ::core::primitive::u32,
                runtime_types::lagoon_runtime::OriginCaller,
                ::subxt::sp_core::crypto::AccountId32,
              >,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Agenda>()?
          };
          if runtime_storage_hash
            == [
              132u8, 10u8, 142u8, 255u8, 178u8, 71u8, 99u8, 165u8, 210u8, 70u8, 42u8, 162u8, 166u8,
              174u8, 223u8, 150u8, 124u8, 16u8, 128u8, 180u8, 39u8, 214u8, 209u8, 203u8, 54u8,
              197u8, 242u8, 163u8, 48u8, 130u8, 225u8, 83u8,
            ]
          {
            let entry = Agenda(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
        pub async fn agenda_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Agenda<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Agenda>()?
          };
          if runtime_storage_hash
            == [
              132u8, 10u8, 142u8, 255u8, 178u8, 71u8, 99u8, 165u8, 210u8, 70u8, 42u8, 162u8, 166u8,
              174u8, 223u8, 150u8, 124u8, 16u8, 128u8, 180u8, 39u8, 214u8, 209u8, 203u8, 54u8,
              197u8, 242u8, 163u8, 48u8, 130u8, 225u8, 83u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Lookup from identity to the block number and index of the task."]
        pub async fn lookup(
          &self,
          _0: &[::core::primitive::u8],
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Lookup>()?
          };
          if runtime_storage_hash
            == [
              56u8, 105u8, 156u8, 110u8, 251u8, 141u8, 219u8, 56u8, 131u8, 57u8, 180u8, 33u8, 48u8,
              30u8, 193u8, 194u8, 169u8, 182u8, 168u8, 43u8, 36u8, 202u8, 222u8, 182u8, 41u8,
              216u8, 222u8, 1u8, 72u8, 165u8, 62u8, 166u8,
            ]
          {
            let entry = Lookup(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Lookup from identity to the block number and index of the task."]
        pub async fn lookup_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Lookup<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Lookup>()?
          };
          if runtime_storage_hash
            == [
              56u8, 105u8, 156u8, 110u8, 251u8, 141u8, 219u8, 56u8, 131u8, 57u8, 180u8, 33u8, 48u8,
              30u8, 193u8, 194u8, 169u8, 182u8, 168u8, 43u8, 36u8, 202u8, 222u8, 182u8, 41u8,
              216u8, 222u8, 1u8, 72u8, 165u8, 62u8, 166u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The maximum weight that may be scheduled per block for any dispatchables of less"]
        #[doc = " priority than `schedule::HARD_DEADLINE`."]
        pub fn maximum_weight(
          &self,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Scheduler", "MaximumWeight")?
            == [
              28u8, 164u8, 203u8, 76u8, 243u8, 245u8, 58u8, 227u8, 123u8, 135u8, 202u8, 251u8,
              71u8, 170u8, 243u8, 180u8, 12u8, 28u8, 250u8, 36u8, 219u8, 234u8, 98u8, 100u8, 75u8,
              101u8, 46u8, 206u8, 204u8, 161u8, 188u8, 19u8,
            ]
          {
            let pallet = metadata.pallet("Scheduler")?;
            let constant = pallet.constant("MaximumWeight")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of scheduled calls in the queue for a single block."]
        #[doc = " Not strictly enforced, but used for weight estimation."]
        pub fn max_scheduled_per_block(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Scheduler", "MaxScheduledPerBlock")?
            == [
              64u8, 25u8, 128u8, 202u8, 165u8, 97u8, 30u8, 196u8, 174u8, 132u8, 139u8, 223u8, 88u8,
              20u8, 228u8, 203u8, 253u8, 201u8, 83u8, 157u8, 161u8, 120u8, 187u8, 165u8, 4u8, 64u8,
              184u8, 34u8, 28u8, 129u8, 136u8, 13u8,
            ]
          {
            let pallet = metadata.pallet("Scheduler")?;
            let constant = pallet.constant("MaxScheduledPerBlock")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod proxy {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Proxy {
        pub real: ::subxt::sp_core::crypto::AccountId32,
        pub force_proxy_type:
          ::core::option::Option<runtime_types::lagoon_runtime::config::proxy::ProxyType>,
        pub call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
      }
      impl ::subxt::Call for Proxy {
        const PALLET: &'static str = "Proxy";
        const FUNCTION: &'static str = "proxy";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AddProxy {
        pub delegate: ::subxt::sp_core::crypto::AccountId32,
        pub proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
        pub delay: ::core::primitive::u32,
      }
      impl ::subxt::Call for AddProxy {
        const PALLET: &'static str = "Proxy";
        const FUNCTION: &'static str = "add_proxy";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RemoveProxy {
        pub delegate: ::subxt::sp_core::crypto::AccountId32,
        pub proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
        pub delay: ::core::primitive::u32,
      }
      impl ::subxt::Call for RemoveProxy {
        const PALLET: &'static str = "Proxy";
        const FUNCTION: &'static str = "remove_proxy";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RemoveProxies;
      impl ::subxt::Call for RemoveProxies {
        const PALLET: &'static str = "Proxy";
        const FUNCTION: &'static str = "remove_proxies";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Anonymous {
        pub proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
        pub delay: ::core::primitive::u32,
        pub index: ::core::primitive::u16,
      }
      impl ::subxt::Call for Anonymous {
        const PALLET: &'static str = "Proxy";
        const FUNCTION: &'static str = "anonymous";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct KillAnonymous {
        pub spawner: ::subxt::sp_core::crypto::AccountId32,
        pub proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
        pub index: ::core::primitive::u16,
        #[codec(compact)]
        pub height: ::core::primitive::u32,
        #[codec(compact)]
        pub ext_index: ::core::primitive::u32,
      }
      impl ::subxt::Call for KillAnonymous {
        const PALLET: &'static str = "Proxy";
        const FUNCTION: &'static str = "kill_anonymous";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Announce {
        pub real: ::subxt::sp_core::crypto::AccountId32,
        pub call_hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for Announce {
        const PALLET: &'static str = "Proxy";
        const FUNCTION: &'static str = "announce";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RemoveAnnouncement {
        pub real: ::subxt::sp_core::crypto::AccountId32,
        pub call_hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for RemoveAnnouncement {
        const PALLET: &'static str = "Proxy";
        const FUNCTION: &'static str = "remove_announcement";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RejectAnnouncement {
        pub delegate: ::subxt::sp_core::crypto::AccountId32,
        pub call_hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for RejectAnnouncement {
        const PALLET: &'static str = "Proxy";
        const FUNCTION: &'static str = "reject_announcement";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ProxyAnnounced {
        pub delegate: ::subxt::sp_core::crypto::AccountId32,
        pub real: ::subxt::sp_core::crypto::AccountId32,
        pub force_proxy_type:
          ::core::option::Option<runtime_types::lagoon_runtime::config::proxy::ProxyType>,
        pub call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
      }
      impl ::subxt::Call for ProxyAnnounced {
        const PALLET: &'static str = "Proxy";
        const FUNCTION: &'static str = "proxy_announced";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
        #[doc = "`add_proxy`."]
        #[doc = ""]
        #[doc = "Removes any corresponding announcement(s)."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
        #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
        #[doc = "- `call`: The call to be made by the `real` account."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Weight is a function of the number of proxies the user has (P)."]
        #[doc = "# </weight>"]
        pub fn proxy(
          &self,
          real: ::subxt::sp_core::crypto::AccountId32,
          force_proxy_type: ::core::option::Option<
            runtime_types::lagoon_runtime::config::proxy::ProxyType,
          >,
          call: runtime_types::lagoon_runtime::Call,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Proxy, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Proxy>()?
          };
          if runtime_call_hash
            == [
              111u8, 30u8, 96u8, 181u8, 28u8, 89u8, 200u8, 235u8, 242u8, 22u8, 77u8, 88u8, 142u8,
              95u8, 164u8, 123u8, 13u8, 222u8, 63u8, 11u8, 113u8, 91u8, 7u8, 26u8, 153u8, 155u8,
              248u8, 24u8, 60u8, 80u8, 101u8, 188u8,
            ]
          {
            let call = Proxy {
              real,
              force_proxy_type,
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
        #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
        #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
        #[doc = "zero."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Weight is a function of the number of proxies the user has (P)."]
        #[doc = "# </weight>"]
        pub fn add_proxy(
          &self,
          delegate: ::subxt::sp_core::crypto::AccountId32,
          proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
          delay: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, AddProxy, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AddProxy>()?
          };
          if runtime_call_hash
            == [
              243u8, 86u8, 149u8, 119u8, 119u8, 29u8, 5u8, 170u8, 85u8, 147u8, 150u8, 196u8, 37u8,
              89u8, 116u8, 90u8, 131u8, 86u8, 238u8, 5u8, 54u8, 103u8, 117u8, 144u8, 17u8, 159u8,
              60u8, 47u8, 128u8, 224u8, 204u8, 170u8,
            ]
          {
            let call = AddProxy {
              delegate,
              proxy_type,
              delay,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Unregister a proxy account for the sender."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
        #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Weight is a function of the number of proxies the user has (P)."]
        #[doc = "# </weight>"]
        pub fn remove_proxy(
          &self,
          delegate: ::subxt::sp_core::crypto::AccountId32,
          proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
          delay: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RemoveProxy, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RemoveProxy>()?
          };
          if runtime_call_hash
            == [
              117u8, 84u8, 198u8, 80u8, 31u8, 149u8, 180u8, 104u8, 240u8, 86u8, 203u8, 95u8, 85u8,
              243u8, 102u8, 238u8, 229u8, 197u8, 121u8, 228u8, 29u8, 186u8, 2u8, 58u8, 209u8,
              234u8, 64u8, 205u8, 224u8, 121u8, 181u8, 147u8,
            ]
          {
            let call = RemoveProxy {
              delegate,
              proxy_type,
              delay,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Unregister all proxy accounts for the sender."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "WARNING: This may be called on accounts created by `anonymous`, however if done, then"]
        #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Weight is a function of the number of proxies the user has (P)."]
        #[doc = "# </weight>"]
        pub fn remove_proxies(
          &self,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RemoveProxies, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RemoveProxies>()?
          };
          if runtime_call_hash
            == [
              15u8, 237u8, 27u8, 166u8, 254u8, 218u8, 92u8, 5u8, 213u8, 239u8, 99u8, 59u8, 1u8,
              26u8, 73u8, 252u8, 81u8, 94u8, 214u8, 227u8, 169u8, 58u8, 40u8, 253u8, 187u8, 225u8,
              192u8, 26u8, 19u8, 23u8, 121u8, 129u8,
            ]
          {
            let call = RemoveProxies {};
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
        #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
        #[doc = ""]
        #[doc = "Requires a `Signed` origin."]
        #[doc = ""]
        #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
        #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
        #[doc = "allow for maximum flexibility."]
        #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
        #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
        #[doc = "want to use `0`."]
        #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
        #[doc = "zero."]
        #[doc = ""]
        #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
        #[doc = "same sender, with the same parameters."]
        #[doc = ""]
        #[doc = "Fails if there are insufficient funds to pay for deposit."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Weight is a function of the number of proxies the user has (P)."]
        #[doc = "# </weight>"]
        #[doc = "TODO: Might be over counting 1 read"]
        pub fn anonymous(
          &self,
          proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
          delay: ::core::primitive::u32,
          index: ::core::primitive::u16,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Anonymous, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Anonymous>()?
          };
          if runtime_call_hash
            == [
              141u8, 224u8, 159u8, 44u8, 53u8, 157u8, 240u8, 112u8, 181u8, 244u8, 207u8, 194u8,
              205u8, 27u8, 137u8, 190u8, 15u8, 199u8, 229u8, 236u8, 242u8, 209u8, 146u8, 46u8,
              217u8, 160u8, 105u8, 65u8, 253u8, 225u8, 192u8, 223u8,
            ]
          {
            let call = Anonymous {
              proxy_type,
              delay,
              index,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Removes a previously spawned anonymous proxy."]
        #[doc = ""]
        #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
        #[doc = "inaccessible."]
        #[doc = ""]
        #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
        #[doc = "`anonymous` with corresponding parameters."]
        #[doc = ""]
        #[doc = "- `spawner`: The account that originally called `anonymous` to create this account."]
        #[doc = "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`."]
        #[doc = "- `proxy_type`: The proxy type originally passed to `anonymous`."]
        #[doc = "- `height`: The height of the chain when the call to `anonymous` was processed."]
        #[doc = "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed."]
        #[doc = ""]
        #[doc = "Fails with `NoPermission` in case the caller is not a previously created anonymous"]
        #[doc = "account whose `anonymous` call has corresponding parameters."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Weight is a function of the number of proxies the user has (P)."]
        #[doc = "# </weight>"]
        pub fn kill_anonymous(
          &self,
          spawner: ::subxt::sp_core::crypto::AccountId32,
          proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
          index: ::core::primitive::u16,
          height: ::core::primitive::u32,
          ext_index: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, KillAnonymous, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<KillAnonymous>()?
          };
          if runtime_call_hash
            == [
              81u8, 192u8, 68u8, 240u8, 126u8, 14u8, 34u8, 215u8, 48u8, 14u8, 17u8, 61u8, 214u8,
              45u8, 172u8, 98u8, 93u8, 82u8, 31u8, 188u8, 134u8, 149u8, 27u8, 78u8, 27u8, 127u8,
              99u8, 144u8, 192u8, 222u8, 203u8, 215u8,
            ]
          {
            let call = KillAnonymous {
              spawner,
              proxy_type,
              index,
              height,
              ext_index,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Publish the hash of a proxy-call that will be made in the future."]
        #[doc = ""]
        #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
        #[doc = "if the delay associated with the proxy relationship is greater than zero."]
        #[doc = ""]
        #[doc = "No more than `MaxPending` announcements may be made at any one time."]
        #[doc = ""]
        #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
        #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
        #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Weight is a function of:"]
        #[doc = "- A: the number of announcements made."]
        #[doc = "- P: the number of proxies the user has."]
        #[doc = "# </weight>"]
        pub fn announce(
          &self,
          real: ::subxt::sp_core::crypto::AccountId32,
          call_hash: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Announce, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Announce>()?
          };
          if runtime_call_hash
            == [
              102u8, 8u8, 136u8, 179u8, 13u8, 47u8, 158u8, 24u8, 93u8, 196u8, 52u8, 22u8, 118u8,
              98u8, 17u8, 8u8, 12u8, 51u8, 181u8, 75u8, 215u8, 133u8, 201u8, 180u8, 231u8, 122u8,
              198u8, 190u8, 188u8, 127u8, 228u8, 218u8,
            ]
          {
            let call = Announce { real, call_hash };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove a given announcement."]
        #[doc = ""]
        #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
        #[doc = "the deposit."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
        #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Weight is a function of:"]
        #[doc = "- A: the number of announcements made."]
        #[doc = "- P: the number of proxies the user has."]
        #[doc = "# </weight>"]
        pub fn remove_announcement(
          &self,
          real: ::subxt::sp_core::crypto::AccountId32,
          call_hash: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            RemoveAnnouncement,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RemoveAnnouncement>()?
          };
          if runtime_call_hash
            == [
              209u8, 156u8, 215u8, 188u8, 225u8, 230u8, 171u8, 228u8, 241u8, 105u8, 43u8, 183u8,
              234u8, 18u8, 170u8, 239u8, 232u8, 188u8, 37u8, 84u8, 156u8, 50u8, 241u8, 170u8, 9u8,
              148u8, 185u8, 172u8, 204u8, 63u8, 187u8, 253u8,
            ]
          {
            let call = RemoveAnnouncement { real, call_hash };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove the given announcement of a delegate."]
        #[doc = ""]
        #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
        #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `delegate`: The account that previously announced the call."]
        #[doc = "- `call_hash`: The hash of the call to be made."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Weight is a function of:"]
        #[doc = "- A: the number of announcements made."]
        #[doc = "- P: the number of proxies the user has."]
        #[doc = "# </weight>"]
        pub fn reject_announcement(
          &self,
          delegate: ::subxt::sp_core::crypto::AccountId32,
          call_hash: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            RejectAnnouncement,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RejectAnnouncement>()?
          };
          if runtime_call_hash
            == [
              26u8, 67u8, 197u8, 169u8, 243u8, 11u8, 94u8, 153u8, 50u8, 22u8, 176u8, 103u8, 88u8,
              2u8, 13u8, 10u8, 96u8, 7u8, 121u8, 148u8, 13u8, 96u8, 20u8, 67u8, 76u8, 51u8, 81u8,
              54u8, 244u8, 44u8, 94u8, 52u8,
            ]
          {
            let call = RejectAnnouncement {
              delegate,
              call_hash,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
        #[doc = "`add_proxy`."]
        #[doc = ""]
        #[doc = "Removes any corresponding announcement(s)."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
        #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
        #[doc = "- `call`: The call to be made by the `real` account."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "Weight is a function of:"]
        #[doc = "- A: the number of announcements made."]
        #[doc = "- P: the number of proxies the user has."]
        #[doc = "# </weight>"]
        pub fn proxy_announced(
          &self,
          delegate: ::subxt::sp_core::crypto::AccountId32,
          real: ::subxt::sp_core::crypto::AccountId32,
          force_proxy_type: ::core::option::Option<
            runtime_types::lagoon_runtime::config::proxy::ProxyType,
          >,
          call: runtime_types::lagoon_runtime::Call,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ProxyAnnounced, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ProxyAnnounced>()?
          };
          if runtime_call_hash
            == [
              180u8, 62u8, 205u8, 29u8, 17u8, 129u8, 91u8, 183u8, 172u8, 195u8, 99u8, 50u8, 120u8,
              175u8, 240u8, 244u8, 132u8, 254u8, 232u8, 180u8, 142u8, 127u8, 255u8, 27u8, 251u8,
              238u8, 244u8, 35u8, 70u8, 138u8, 115u8, 89u8,
            ]
          {
            let call = ProxyAnnounced {
              delegate,
              real,
              force_proxy_type,
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_proxy::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A proxy was executed correctly, with the given."]
      pub struct ProxyExecuted {
        pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
      }
      impl ::subxt::Event for ProxyExecuted {
        const PALLET: &'static str = "Proxy";
        const EVENT: &'static str = "ProxyExecuted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Anonymous account has been created by new proxy with given"]
      #[doc = "disambiguation index and proxy type."]
      pub struct AnonymousCreated {
        pub anonymous: ::subxt::sp_core::crypto::AccountId32,
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
        pub disambiguation_index: ::core::primitive::u16,
      }
      impl ::subxt::Event for AnonymousCreated {
        const PALLET: &'static str = "Proxy";
        const EVENT: &'static str = "AnonymousCreated";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An announcement was placed to make a call in the future."]
      pub struct Announced {
        pub real: ::subxt::sp_core::crypto::AccountId32,
        pub proxy: ::subxt::sp_core::crypto::AccountId32,
        pub call_hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for Announced {
        const PALLET: &'static str = "Proxy";
        const EVENT: &'static str = "Announced";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A proxy was added."]
      pub struct ProxyAdded {
        pub delegator: ::subxt::sp_core::crypto::AccountId32,
        pub delegatee: ::subxt::sp_core::crypto::AccountId32,
        pub proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
        pub delay: ::core::primitive::u32,
      }
      impl ::subxt::Event for ProxyAdded {
        const PALLET: &'static str = "Proxy";
        const EVENT: &'static str = "ProxyAdded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A proxy was removed."]
      pub struct ProxyRemoved {
        pub delegator: ::subxt::sp_core::crypto::AccountId32,
        pub delegatee: ::subxt::sp_core::crypto::AccountId32,
        pub proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
        pub delay: ::core::primitive::u32,
      }
      impl ::subxt::Event for ProxyRemoved {
        const PALLET: &'static str = "Proxy";
        const EVENT: &'static str = "ProxyRemoved";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Proxies<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Proxies<'_> {
        const PALLET: &'static str = "Proxy";
        const STORAGE: &'static str = "Proxies";
        type Value = (
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            runtime_types::pallet_proxy::ProxyDefinition<
              ::subxt::sp_core::crypto::AccountId32,
              runtime_types::lagoon_runtime::config::proxy::ProxyType,
              ::core::primitive::u32,
            >,
          >,
          ::core::primitive::u128,
        );
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct Announcements<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Announcements<'_> {
        const PALLET: &'static str = "Proxy";
        const STORAGE: &'static str = "Announcements";
        type Value = (
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            runtime_types::pallet_proxy::Announcement<
              ::subxt::sp_core::crypto::AccountId32,
              ::subxt::sp_core::H256,
              ::core::primitive::u32,
            >,
          >,
          ::core::primitive::u128,
        );
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
        #[doc = " which are being delegated to, together with the amount held on deposit."]
        pub async fn proxies(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          (
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<
              runtime_types::pallet_proxy::ProxyDefinition<
                ::subxt::sp_core::crypto::AccountId32,
                runtime_types::lagoon_runtime::config::proxy::ProxyType,
                ::core::primitive::u32,
              >,
            >,
            ::core::primitive::u128,
          ),
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Proxies>()?
          };
          if runtime_storage_hash
            == [
              123u8, 125u8, 65u8, 252u8, 17u8, 156u8, 240u8, 152u8, 34u8, 63u8, 253u8, 92u8, 194u8,
              171u8, 72u8, 165u8, 112u8, 117u8, 85u8, 171u8, 120u8, 225u8, 77u8, 188u8, 6u8, 224u8,
              107u8, 102u8, 174u8, 184u8, 88u8, 62u8,
            ]
          {
            let entry = Proxies(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
        #[doc = " which are being delegated to, together with the amount held on deposit."]
        pub async fn proxies_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Proxies<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Proxies>()?
          };
          if runtime_storage_hash
            == [
              123u8, 125u8, 65u8, 252u8, 17u8, 156u8, 240u8, 152u8, 34u8, 63u8, 253u8, 92u8, 194u8,
              171u8, 72u8, 165u8, 112u8, 117u8, 85u8, 171u8, 120u8, 225u8, 77u8, 188u8, 6u8, 224u8,
              107u8, 102u8, 174u8, 184u8, 88u8, 62u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The announcements made by the proxy (key)."]
        pub async fn announcements(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          (
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<
              runtime_types::pallet_proxy::Announcement<
                ::subxt::sp_core::crypto::AccountId32,
                ::subxt::sp_core::H256,
                ::core::primitive::u32,
              >,
            >,
            ::core::primitive::u128,
          ),
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Announcements>()?
          };
          if runtime_storage_hash
            == [
              247u8, 243u8, 109u8, 142u8, 99u8, 156u8, 61u8, 101u8, 200u8, 211u8, 158u8, 60u8,
              159u8, 232u8, 147u8, 125u8, 139u8, 150u8, 4u8, 129u8, 189u8, 117u8, 74u8, 32u8, 85u8,
              39u8, 46u8, 47u8, 164u8, 130u8, 254u8, 43u8,
            ]
          {
            let entry = Announcements(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The announcements made by the proxy (key)."]
        pub async fn announcements_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Announcements<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Announcements>()?
          };
          if runtime_storage_hash
            == [
              247u8, 243u8, 109u8, 142u8, 99u8, 156u8, 61u8, 101u8, 200u8, 211u8, 158u8, 60u8,
              159u8, 232u8, 147u8, 125u8, 139u8, 150u8, 4u8, 129u8, 189u8, 117u8, 74u8, 32u8, 85u8,
              39u8, 46u8, 47u8, 164u8, 130u8, 254u8, 43u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The base amount of currency needed to reserve for creating a proxy."]
        #[doc = ""]
        #[doc = " This is held for an additional storage item whose value size is"]
        #[doc = " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."]
        pub fn proxy_deposit_base(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Proxy", "ProxyDepositBase")?
            == [
              247u8, 206u8, 22u8, 149u8, 164u8, 30u8, 134u8, 240u8, 216u8, 44u8, 118u8, 234u8, 5u8,
              161u8, 84u8, 84u8, 2u8, 40u8, 113u8, 170u8, 48u8, 31u8, 202u8, 181u8, 174u8, 246u8,
              44u8, 58u8, 107u8, 30u8, 7u8, 216u8,
            ]
          {
            let pallet = metadata.pallet("Proxy")?;
            let constant = pallet.constant("ProxyDepositBase")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The amount of currency needed per proxy added."]
        #[doc = ""]
        #[doc = " This is held for adding 32 bytes plus an instance of `ProxyType` more into a"]
        #[doc = " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take"]
        #[doc = " into account `32 + proxy_type.encode().len()` bytes of data."]
        pub fn proxy_deposit_factor(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Proxy", "ProxyDepositFactor")?
            == [
              186u8, 81u8, 123u8, 169u8, 153u8, 134u8, 167u8, 84u8, 81u8, 1u8, 90u8, 103u8, 139u8,
              107u8, 218u8, 91u8, 52u8, 125u8, 147u8, 95u8, 28u8, 88u8, 255u8, 186u8, 134u8, 120u8,
              245u8, 145u8, 167u8, 118u8, 196u8, 153u8,
            ]
          {
            let pallet = metadata.pallet("Proxy")?;
            let constant = pallet.constant("ProxyDepositFactor")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum amount of proxies allowed for a single account."]
        pub fn max_proxies(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Proxy", "MaxProxies")?
            == [
              249u8, 153u8, 224u8, 128u8, 161u8, 3u8, 39u8, 192u8, 120u8, 150u8, 184u8, 92u8,
              225u8, 222u8, 76u8, 172u8, 131u8, 87u8, 231u8, 128u8, 5u8, 62u8, 116u8, 112u8, 103u8,
              4u8, 39u8, 163u8, 71u8, 97u8, 221u8, 19u8,
            ]
          {
            let pallet = metadata.pallet("Proxy")?;
            let constant = pallet.constant("MaxProxies")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum amount of time-delayed announcements that are allowed to be pending."]
        pub fn max_pending(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Proxy", "MaxPending")?
            == [
              88u8, 148u8, 146u8, 152u8, 151u8, 208u8, 255u8, 193u8, 239u8, 105u8, 197u8, 153u8,
              151u8, 18u8, 86u8, 13u8, 242u8, 242u8, 59u8, 92u8, 107u8, 203u8, 102u8, 69u8, 147u8,
              147u8, 37u8, 83u8, 237u8, 9u8, 114u8, 196u8,
            ]
          {
            let pallet = metadata.pallet("Proxy")?;
            let constant = pallet.constant("MaxPending")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The base amount of currency needed to reserve for creating an announcement."]
        #[doc = ""]
        #[doc = " This is held when a new storage item holding a `Balance` is created (typically 16"]
        #[doc = " bytes)."]
        pub fn announcement_deposit_base(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Proxy", "AnnouncementDepositBase")?
            == [
              55u8, 170u8, 102u8, 61u8, 17u8, 188u8, 89u8, 54u8, 251u8, 84u8, 38u8, 21u8, 225u8,
              88u8, 189u8, 83u8, 50u8, 18u8, 249u8, 202u8, 26u8, 143u8, 237u8, 60u8, 89u8, 68u8,
              214u8, 0u8, 3u8, 119u8, 146u8, 230u8,
            ]
          {
            let pallet = metadata.pallet("Proxy")?;
            let constant = pallet.constant("AnnouncementDepositBase")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The amount of currency needed per announcement made."]
        #[doc = ""]
        #[doc = " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)"]
        #[doc = " into a pre-existing storage value."]
        pub fn announcement_deposit_factor(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Proxy", "AnnouncementDepositFactor")?
            == [
              1u8, 46u8, 178u8, 237u8, 21u8, 133u8, 2u8, 24u8, 158u8, 29u8, 166u8, 93u8, 131u8,
              42u8, 39u8, 75u8, 235u8, 132u8, 214u8, 125u8, 172u8, 81u8, 66u8, 141u8, 17u8, 217u8,
              13u8, 41u8, 125u8, 120u8, 41u8, 2u8,
            ]
          {
            let pallet = metadata.pallet("Proxy")?;
            let constant = pallet.constant("AnnouncementDepositFactor")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod multisig {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AsMultiThreshold1 {
        pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        pub call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
      }
      impl ::subxt::Call for AsMultiThreshold1 {
        const PALLET: &'static str = "Multisig";
        const FUNCTION: &'static str = "as_multi_threshold_1";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AsMulti {
        pub threshold: ::core::primitive::u16,
        pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        pub maybe_timepoint:
          ::core::option::Option<runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>>,
        pub call: ::subxt::WrapperKeepOpaque<runtime_types::lagoon_runtime::Call>,
        pub store_call: ::core::primitive::bool,
        pub max_weight: ::core::primitive::u64,
      }
      impl ::subxt::Call for AsMulti {
        const PALLET: &'static str = "Multisig";
        const FUNCTION: &'static str = "as_multi";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ApproveAsMulti {
        pub threshold: ::core::primitive::u16,
        pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        pub maybe_timepoint:
          ::core::option::Option<runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>>,
        pub call_hash: [::core::primitive::u8; 32usize],
        pub max_weight: ::core::primitive::u64,
      }
      impl ::subxt::Call for ApproveAsMulti {
        const PALLET: &'static str = "Multisig";
        const FUNCTION: &'static str = "approve_as_multi";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct CancelAsMulti {
        pub threshold: ::core::primitive::u16,
        pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
        pub call_hash: [::core::primitive::u8; 32usize],
      }
      impl ::subxt::Call for CancelAsMulti {
        const PALLET: &'static str = "Multisig";
        const FUNCTION: &'static str = "cancel_as_multi";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
        #[doc = "multi-signature, but do not participate in the approval process."]
        #[doc = "- `call`: The call to be executed."]
        #[doc = ""]
        #[doc = "Result is equivalent to the dispatched result."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
        #[doc = "-------------------------------"]
        #[doc = "- DB Weight: None"]
        #[doc = "- Plus Call Weight"]
        #[doc = "# </weight>"]
        pub fn as_multi_threshold_1(
          &self,
          other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          call: runtime_types::lagoon_runtime::Call,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            AsMultiThreshold1,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AsMultiThreshold1>()?
          };
          if runtime_call_hash
            == [
              47u8, 66u8, 136u8, 19u8, 141u8, 90u8, 215u8, 145u8, 171u8, 74u8, 23u8, 162u8, 231u8,
              179u8, 27u8, 144u8, 107u8, 232u8, 218u8, 76u8, 148u8, 117u8, 160u8, 177u8, 175u8,
              78u8, 154u8, 126u8, 116u8, 65u8, 160u8, 169u8,
            ]
          {
            let call = AsMultiThreshold1 {
              other_signatories,
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
        #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
        #[doc = ""]
        #[doc = "If there are enough, then dispatch the call."]
        #[doc = ""]
        #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
        #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
        #[doc = "is cancelled."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
        #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
        #[doc = "dispatch. May not be empty."]
        #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
        #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
        #[doc = "transaction index) of the first approval transaction."]
        #[doc = "- `call`: The call to be executed."]
        #[doc = ""]
        #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
        #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
        #[doc = ""]
        #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
        #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
        #[doc = "may be found in the deposited `MultisigExecuted` event."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(S + Z + Call)`."]
        #[doc = "- Up to one balance-reserve or unreserve operation."]
        #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
        #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
        #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
        #[doc = "- One encode & hash, both of complexity `O(S)`."]
        #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
        #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
        #[doc = "- One event."]
        #[doc = "- The weight of the `call`."]
        #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
        #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
        #[doc = "-------------------------------"]
        #[doc = "- DB Weight:"]
        #[doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
        #[doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
        #[doc = "- Plus Call Weight"]
        #[doc = "# </weight>"]
        pub fn as_multi(
          &self,
          threshold: ::core::primitive::u16,
          other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          maybe_timepoint: ::core::option::Option<
            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
          >,
          call: ::subxt::WrapperKeepOpaque<runtime_types::lagoon_runtime::Call>,
          store_call: ::core::primitive::bool,
          max_weight: ::core::primitive::u64,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, AsMulti, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AsMulti>()?
          };
          if runtime_call_hash
            == [
              11u8, 217u8, 6u8, 160u8, 62u8, 23u8, 72u8, 4u8, 178u8, 222u8, 108u8, 69u8, 180u8,
              220u8, 198u8, 20u8, 6u8, 4u8, 187u8, 220u8, 185u8, 3u8, 103u8, 250u8, 90u8, 23u8,
              76u8, 139u8, 137u8, 120u8, 158u8, 21u8,
            ]
          {
            let call = AsMulti {
              threshold,
              other_signatories,
              maybe_timepoint,
              call,
              store_call,
              max_weight,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
        #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
        #[doc = ""]
        #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
        #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
        #[doc = "is cancelled."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
        #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
        #[doc = "dispatch. May not be empty."]
        #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
        #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
        #[doc = "transaction index) of the first approval transaction."]
        #[doc = "- `call_hash`: The hash of the call to be executed."]
        #[doc = ""]
        #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(S)`."]
        #[doc = "- Up to one balance-reserve or unreserve operation."]
        #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
        #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
        #[doc = "- One encode & hash, both of complexity `O(S)`."]
        #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
        #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
        #[doc = "- One event."]
        #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
        #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
        #[doc = "----------------------------------"]
        #[doc = "- DB Weight:"]
        #[doc = "    - Read: Multisig Storage, [Caller Account]"]
        #[doc = "    - Write: Multisig Storage, [Caller Account]"]
        #[doc = "# </weight>"]
        pub fn approve_as_multi(
          &self,
          threshold: ::core::primitive::u16,
          other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          maybe_timepoint: ::core::option::Option<
            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
          >,
          call_hash: [::core::primitive::u8; 32usize],
          max_weight: ::core::primitive::u64,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ApproveAsMulti, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ApproveAsMulti>()?
          };
          if runtime_call_hash
            == [
              114u8, 29u8, 118u8, 154u8, 91u8, 4u8, 127u8, 126u8, 190u8, 180u8, 57u8, 112u8, 72u8,
              8u8, 248u8, 126u8, 25u8, 190u8, 130u8, 86u8, 160u8, 164u8, 76u8, 64u8, 25u8, 175u8,
              132u8, 225u8, 147u8, 166u8, 12u8, 38u8,
            ]
          {
            let call = ApproveAsMulti {
              threshold,
              other_signatories,
              maybe_timepoint,
              call_hash,
              max_weight,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
        #[doc = "for this operation will be unreserved on success."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
        #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
        #[doc = "dispatch. May not be empty."]
        #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
        #[doc = "transaction for this dispatch."]
        #[doc = "- `call_hash`: The hash of the call to be executed."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- `O(S)`."]
        #[doc = "- Up to one balance-reserve or unreserve operation."]
        #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
        #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
        #[doc = "- One encode & hash, both of complexity `O(S)`."]
        #[doc = "- One event."]
        #[doc = "- I/O: 1 read `O(S)`, one remove."]
        #[doc = "- Storage: removes one item."]
        #[doc = "----------------------------------"]
        #[doc = "- DB Weight:"]
        #[doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"]
        #[doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"]
        #[doc = "# </weight>"]
        pub fn cancel_as_multi(
          &self,
          threshold: ::core::primitive::u16,
          other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
          call_hash: [::core::primitive::u8; 32usize],
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, CancelAsMulti, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CancelAsMulti>()?
          };
          if runtime_call_hash
            == [
              195u8, 216u8, 37u8, 179u8, 9u8, 19u8, 238u8, 94u8, 156u8, 5u8, 120u8, 78u8, 129u8,
              99u8, 239u8, 142u8, 68u8, 12u8, 254u8, 46u8, 251u8, 8u8, 193u8, 43u8, 37u8, 68u8,
              249u8, 85u8, 163u8, 85u8, 193u8, 47u8,
            ]
          {
            let call = CancelAsMulti {
              threshold,
              other_signatories,
              timepoint,
              call_hash,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_multisig::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A new multisig operation has begun."]
      pub struct NewMultisig {
        pub approving: ::subxt::sp_core::crypto::AccountId32,
        pub multisig: ::subxt::sp_core::crypto::AccountId32,
        pub call_hash: [::core::primitive::u8; 32usize],
      }
      impl ::subxt::Event for NewMultisig {
        const PALLET: &'static str = "Multisig";
        const EVENT: &'static str = "NewMultisig";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A multisig operation has been approved by someone."]
      pub struct MultisigApproval {
        pub approving: ::subxt::sp_core::crypto::AccountId32,
        pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
        pub multisig: ::subxt::sp_core::crypto::AccountId32,
        pub call_hash: [::core::primitive::u8; 32usize],
      }
      impl ::subxt::Event for MultisigApproval {
        const PALLET: &'static str = "Multisig";
        const EVENT: &'static str = "MultisigApproval";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A multisig operation has been executed."]
      pub struct MultisigExecuted {
        pub approving: ::subxt::sp_core::crypto::AccountId32,
        pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
        pub multisig: ::subxt::sp_core::crypto::AccountId32,
        pub call_hash: [::core::primitive::u8; 32usize],
        pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
      }
      impl ::subxt::Event for MultisigExecuted {
        const PALLET: &'static str = "Multisig";
        const EVENT: &'static str = "MultisigExecuted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A multisig operation has been cancelled."]
      pub struct MultisigCancelled {
        pub cancelling: ::subxt::sp_core::crypto::AccountId32,
        pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
        pub multisig: ::subxt::sp_core::crypto::AccountId32,
        pub call_hash: [::core::primitive::u8; 32usize],
      }
      impl ::subxt::Event for MultisigCancelled {
        const PALLET: &'static str = "Multisig";
        const EVENT: &'static str = "MultisigCancelled";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Multisigs<'a>(
        pub &'a ::subxt::sp_core::crypto::AccountId32,
        pub &'a [::core::primitive::u8; 32usize],
      );
      impl ::subxt::StorageEntry for Multisigs<'_> {
        const PALLET: &'static str = "Multisig";
        const STORAGE: &'static str = "Multisigs";
        type Value = runtime_types::pallet_multisig::Multisig<
          ::core::primitive::u32,
          ::core::primitive::u128,
          ::subxt::sp_core::crypto::AccountId32,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Blake2_128Concat),
          ])
        }
      }
      pub struct Calls<'a>(pub &'a [::core::primitive::u8; 32usize]);
      impl ::subxt::StorageEntry for Calls<'_> {
        const PALLET: &'static str = "Multisig";
        const STORAGE: &'static str = "Calls";
        type Value = (
          ::subxt::WrapperKeepOpaque<runtime_types::lagoon_runtime::Call>,
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
        );
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Identity,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The set of open multisig operations."]
        pub async fn multisigs(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          _1: &[::core::primitive::u8; 32usize],
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_multisig::Multisig<
              ::core::primitive::u32,
              ::core::primitive::u128,
              ::subxt::sp_core::crypto::AccountId32,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Multisigs>()?
          };
          if runtime_storage_hash
            == [
              137u8, 130u8, 173u8, 65u8, 126u8, 244u8, 194u8, 167u8, 93u8, 174u8, 104u8, 131u8,
              115u8, 155u8, 93u8, 185u8, 54u8, 204u8, 155u8, 149u8, 184u8, 24u8, 111u8, 40u8,
              249u8, 215u8, 34u8, 251u8, 224u8, 110u8, 202u8, 2u8,
            ]
          {
            let entry = Multisigs(_0, _1);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The set of open multisig operations."]
        pub async fn multisigs_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Multisigs<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Multisigs>()?
          };
          if runtime_storage_hash
            == [
              137u8, 130u8, 173u8, 65u8, 126u8, 244u8, 194u8, 167u8, 93u8, 174u8, 104u8, 131u8,
              115u8, 155u8, 93u8, 185u8, 54u8, 204u8, 155u8, 149u8, 184u8, 24u8, 111u8, 40u8,
              249u8, 215u8, 34u8, 251u8, 224u8, 110u8, 202u8, 2u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        pub async fn calls(
          &self,
          _0: &[::core::primitive::u8; 32usize],
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<(
            ::subxt::WrapperKeepOpaque<runtime_types::lagoon_runtime::Call>,
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u128,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Calls>()?
          };
          if runtime_storage_hash
            == [
              193u8, 8u8, 225u8, 7u8, 108u8, 255u8, 208u8, 31u8, 22u8, 62u8, 136u8, 75u8, 68u8,
              185u8, 53u8, 38u8, 138u8, 176u8, 207u8, 65u8, 139u8, 216u8, 11u8, 35u8, 252u8, 142u8,
              203u8, 181u8, 139u8, 55u8, 68u8, 211u8,
            ]
          {
            let entry = Calls(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        pub async fn calls_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Calls<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Calls>()?
          };
          if runtime_storage_hash
            == [
              193u8, 8u8, 225u8, 7u8, 108u8, 255u8, 208u8, 31u8, 22u8, 62u8, 136u8, 75u8, 68u8,
              185u8, 53u8, 38u8, 138u8, 176u8, 207u8, 65u8, 139u8, 216u8, 11u8, 35u8, 252u8, 142u8,
              203u8, 181u8, 139u8, 55u8, 68u8, 211u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
        #[doc = " store a dispatch call for later."]
        #[doc = ""]
        #[doc = " This is held for an additional storage item whose value size is"]
        #[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
        #[doc = " `32 + sizeof(AccountId)` bytes."]
        pub fn deposit_base(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Multisig", "DepositBase")?
            == [
              22u8, 188u8, 23u8, 14u8, 137u8, 91u8, 232u8, 182u8, 29u8, 71u8, 123u8, 112u8, 219u8,
              91u8, 244u8, 96u8, 183u8, 117u8, 86u8, 122u8, 244u8, 23u8, 161u8, 182u8, 90u8, 159u8,
              143u8, 107u8, 160u8, 161u8, 226u8, 201u8,
            ]
          {
            let pallet = metadata.pallet("Multisig")?;
            let constant = pallet.constant("DepositBase")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
        #[doc = ""]
        #[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
        pub fn deposit_factor(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Multisig", "DepositFactor")?
            == [
              168u8, 135u8, 117u8, 56u8, 13u8, 12u8, 179u8, 24u8, 150u8, 138u8, 97u8, 88u8, 249u8,
              135u8, 81u8, 242u8, 175u8, 17u8, 147u8, 89u8, 145u8, 86u8, 248u8, 140u8, 200u8,
              239u8, 128u8, 80u8, 129u8, 172u8, 240u8, 236u8,
            ]
          {
            let pallet = metadata.pallet("Multisig")?;
            let constant = pallet.constant("DepositFactor")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum amount of signatories allowed in the multisig."]
        pub fn max_signatories(
          &self,
        ) -> ::core::result::Result<::core::primitive::u16, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Multisig", "MaxSignatories")?
            == [
              139u8, 36u8, 140u8, 198u8, 176u8, 106u8, 89u8, 194u8, 33u8, 23u8, 60u8, 134u8, 143u8,
              24u8, 176u8, 64u8, 47u8, 109u8, 159u8, 134u8, 240u8, 231u8, 181u8, 146u8, 136u8,
              249u8, 175u8, 67u8, 41u8, 152u8, 90u8, 15u8,
            ]
          {
            let pallet = metadata.pallet("Multisig")?;
            let constant = pallet.constant("MaxSignatories")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod bounties {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ProposeBounty {
        #[codec(compact)]
        pub value: ::core::primitive::u128,
        pub description: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Call for ProposeBounty {
        const PALLET: &'static str = "Bounties";
        const FUNCTION: &'static str = "propose_bounty";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ApproveBounty {
        #[codec(compact)]
        pub bounty_id: ::core::primitive::u32,
      }
      impl ::subxt::Call for ApproveBounty {
        const PALLET: &'static str = "Bounties";
        const FUNCTION: &'static str = "approve_bounty";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ProposeCurator {
        #[codec(compact)]
        pub bounty_id: ::core::primitive::u32,
        pub curator: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub fee: ::core::primitive::u128,
      }
      impl ::subxt::Call for ProposeCurator {
        const PALLET: &'static str = "Bounties";
        const FUNCTION: &'static str = "propose_curator";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct UnassignCurator {
        #[codec(compact)]
        pub bounty_id: ::core::primitive::u32,
      }
      impl ::subxt::Call for UnassignCurator {
        const PALLET: &'static str = "Bounties";
        const FUNCTION: &'static str = "unassign_curator";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AcceptCurator {
        #[codec(compact)]
        pub bounty_id: ::core::primitive::u32,
      }
      impl ::subxt::Call for AcceptCurator {
        const PALLET: &'static str = "Bounties";
        const FUNCTION: &'static str = "accept_curator";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AwardBounty {
        #[codec(compact)]
        pub bounty_id: ::core::primitive::u32,
        pub beneficiary: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for AwardBounty {
        const PALLET: &'static str = "Bounties";
        const FUNCTION: &'static str = "award_bounty";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ClaimBounty {
        #[codec(compact)]
        pub bounty_id: ::core::primitive::u32,
      }
      impl ::subxt::Call for ClaimBounty {
        const PALLET: &'static str = "Bounties";
        const FUNCTION: &'static str = "claim_bounty";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct CloseBounty {
        #[codec(compact)]
        pub bounty_id: ::core::primitive::u32,
      }
      impl ::subxt::Call for CloseBounty {
        const PALLET: &'static str = "Bounties";
        const FUNCTION: &'static str = "close_bounty";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ExtendBountyExpiry {
        #[codec(compact)]
        pub bounty_id: ::core::primitive::u32,
        pub remark: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Call for ExtendBountyExpiry {
        const PALLET: &'static str = "Bounties";
        const FUNCTION: &'static str = "extend_bounty_expiry";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Propose a new bounty."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as"]
        #[doc = "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,"]
        #[doc = "or slashed when rejected."]
        #[doc = ""]
        #[doc = "- `curator`: The curator account whom will manage this bounty."]
        #[doc = "- `fee`: The curator fee."]
        #[doc = "- `value`: The total payment amount of this bounty, curator fee included."]
        #[doc = "- `description`: The description of this bounty."]
        pub fn propose_bounty(
          &self,
          value: ::core::primitive::u128,
          description: ::std::vec::Vec<::core::primitive::u8>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ProposeBounty, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ProposeBounty>()?
          };
          if runtime_call_hash
            == [
              208u8, 22u8, 157u8, 134u8, 214u8, 95u8, 249u8, 10u8, 67u8, 223u8, 190u8, 192u8, 69u8,
              32u8, 7u8, 235u8, 205u8, 145u8, 90u8, 80u8, 60u8, 4u8, 16u8, 189u8, 59u8, 180u8,
              68u8, 77u8, 69u8, 121u8, 92u8, 33u8,
            ]
          {
            let call = ProposeBounty { value, description };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Approve a bounty proposal. At a later time, the bounty will be funded and become active"]
        #[doc = "and the original deposit will be returned."]
        #[doc = ""]
        #[doc = "May only be called from `T::ApproveOrigin`."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "# </weight>"]
        pub fn approve_bounty(
          &self,
          bounty_id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ApproveBounty, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ApproveBounty>()?
          };
          if runtime_call_hash
            == [
              127u8, 220u8, 25u8, 197u8, 19u8, 183u8, 177u8, 17u8, 164u8, 29u8, 250u8, 136u8,
              125u8, 90u8, 247u8, 177u8, 37u8, 180u8, 77u8, 75u8, 164u8, 32u8, 195u8, 207u8, 58u8,
              249u8, 141u8, 11u8, 53u8, 184u8, 224u8, 135u8,
            ]
          {
            let call = ApproveBounty { bounty_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Assign a curator to a funded bounty."]
        #[doc = ""]
        #[doc = "May only be called from `T::ApproveOrigin`."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "# </weight>"]
        pub fn propose_curator(
          &self,
          bounty_id: ::core::primitive::u32,
          curator: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          fee: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ProposeCurator, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ProposeCurator>()?
          };
          if runtime_call_hash
            == [
              189u8, 94u8, 10u8, 85u8, 139u8, 136u8, 154u8, 18u8, 84u8, 174u8, 183u8, 92u8, 98u8,
              90u8, 173u8, 177u8, 218u8, 104u8, 248u8, 99u8, 59u8, 45u8, 100u8, 163u8, 244u8, 25u8,
              64u8, 133u8, 125u8, 170u8, 251u8, 107u8,
            ]
          {
            let call = ProposeCurator {
              bounty_id,
              curator,
              fee,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Unassign curator from a bounty."]
        #[doc = ""]
        #[doc = "This function can only be called by the `RejectOrigin` a signed origin."]
        #[doc = ""]
        #[doc = "If this function is called by the `RejectOrigin`, we assume that the curator is"]
        #[doc = "malicious or inactive. As a result, we will slash the curator when possible."]
        #[doc = ""]
        #[doc = "If the origin is the curator, we take this as a sign they are unable to do their job and"]
        #[doc = "they willingly give up. We could slash them, but for now we allow them to recover their"]
        #[doc = "deposit and exit without issue. (We may want to change this if it is abused.)"]
        #[doc = ""]
        #[doc = "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows"]
        #[doc = "anyone in the community to call out that a curator is not doing their due diligence, and"]
        #[doc = "we should pick a new curator. In this case the curator should also be slashed."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "# </weight>"]
        pub fn unassign_curator(
          &self,
          bounty_id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, UnassignCurator, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<UnassignCurator>()?
          };
          if runtime_call_hash
            == [
              156u8, 163u8, 248u8, 148u8, 22u8, 231u8, 232u8, 182u8, 48u8, 87u8, 85u8, 118u8,
              169u8, 249u8, 123u8, 199u8, 248u8, 206u8, 221u8, 196u8, 69u8, 69u8, 52u8, 116u8,
              65u8, 165u8, 172u8, 242u8, 61u8, 109u8, 143u8, 69u8,
            ]
          {
            let call = UnassignCurator { bounty_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Accept the curator role for a bounty."]
        #[doc = "A deposit will be reserved from curator and refund upon successful payout."]
        #[doc = ""]
        #[doc = "May only be called from the curator."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "# </weight>"]
        pub fn accept_curator(
          &self,
          bounty_id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, AcceptCurator, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AcceptCurator>()?
          };
          if runtime_call_hash
            == [
              50u8, 149u8, 252u8, 40u8, 169u8, 113u8, 60u8, 153u8, 123u8, 146u8, 40u8, 196u8,
              176u8, 195u8, 95u8, 94u8, 14u8, 81u8, 136u8, 225u8, 24u8, 59u8, 87u8, 118u8, 77u8,
              60u8, 150u8, 102u8, 206u8, 219u8, 241u8, 99u8,
            ]
          {
            let call = AcceptCurator { bounty_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds"]
        #[doc = "after a delay."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be the curator of this bounty."]
        #[doc = ""]
        #[doc = "- `bounty_id`: Bounty ID to award."]
        #[doc = "- `beneficiary`: The beneficiary account whom will receive the payout."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "# </weight>"]
        pub fn award_bounty(
          &self,
          bounty_id: ::core::primitive::u32,
          beneficiary: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, AwardBounty, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AwardBounty>()?
          };
          if runtime_call_hash
            == [
              22u8, 6u8, 78u8, 247u8, 133u8, 35u8, 24u8, 170u8, 12u8, 14u8, 157u8, 190u8, 0u8,
              89u8, 186u8, 31u8, 239u8, 160u8, 81u8, 169u8, 20u8, 30u8, 101u8, 147u8, 2u8, 148u8,
              0u8, 210u8, 99u8, 94u8, 4u8, 241u8,
            ]
          {
            let call = AwardBounty {
              bounty_id,
              beneficiary,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Claim the payout from an awarded bounty after payout delay."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be the beneficiary of this bounty."]
        #[doc = ""]
        #[doc = "- `bounty_id`: Bounty ID to claim."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "# </weight>"]
        pub fn claim_bounty(
          &self,
          bounty_id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ClaimBounty, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ClaimBounty>()?
          };
          if runtime_call_hash
            == [
              119u8, 9u8, 122u8, 55u8, 224u8, 139u8, 26u8, 186u8, 3u8, 178u8, 78u8, 41u8, 91u8,
              183u8, 222u8, 197u8, 189u8, 172u8, 154u8, 47u8, 2u8, 164u8, 141u8, 163u8, 211u8,
              117u8, 186u8, 121u8, 130u8, 91u8, 13u8, 241u8,
            ]
          {
            let call = ClaimBounty { bounty_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Cancel a proposed or active bounty. All the funds will be sent to treasury and"]
        #[doc = "the curator deposit will be unreserved if possible."]
        #[doc = ""]
        #[doc = "Only `T::RejectOrigin` is able to cancel a bounty."]
        #[doc = ""]
        #[doc = "- `bounty_id`: Bounty ID to cancel."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "# </weight>"]
        pub fn close_bounty(
          &self,
          bounty_id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, CloseBounty, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CloseBounty>()?
          };
          if runtime_call_hash
            == [
              119u8, 47u8, 246u8, 188u8, 235u8, 22u8, 53u8, 70u8, 182u8, 15u8, 247u8, 153u8, 208u8,
              191u8, 144u8, 132u8, 30u8, 200u8, 36u8, 186u8, 194u8, 225u8, 140u8, 160u8, 152u8,
              194u8, 38u8, 223u8, 33u8, 130u8, 120u8, 254u8,
            ]
          {
            let call = CloseBounty { bounty_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Extend the expiry time of an active bounty."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be the curator of this bounty."]
        #[doc = ""]
        #[doc = "- `bounty_id`: Bounty ID to extend."]
        #[doc = "- `remark`: additional information."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "# </weight>"]
        pub fn extend_bounty_expiry(
          &self,
          bounty_id: ::core::primitive::u32,
          remark: ::std::vec::Vec<::core::primitive::u8>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ExtendBountyExpiry,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ExtendBountyExpiry>()?
          };
          if runtime_call_hash
            == [
              127u8, 142u8, 138u8, 230u8, 147u8, 187u8, 201u8, 210u8, 216u8, 61u8, 62u8, 125u8,
              168u8, 188u8, 16u8, 73u8, 157u8, 53u8, 165u8, 236u8, 181u8, 26u8, 28u8, 67u8, 59u8,
              234u8, 189u8, 167u8, 92u8, 242u8, 138u8, 35u8,
            ]
          {
            let call = ExtendBountyExpiry { bounty_id, remark };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_bounties::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "New bounty proposal."]
      pub struct BountyProposed {
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Event for BountyProposed {
        const PALLET: &'static str = "Bounties";
        const EVENT: &'static str = "BountyProposed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A bounty proposal was rejected; funds were slashed."]
      pub struct BountyRejected {
        pub index: ::core::primitive::u32,
        pub bond: ::core::primitive::u128,
      }
      impl ::subxt::Event for BountyRejected {
        const PALLET: &'static str = "Bounties";
        const EVENT: &'static str = "BountyRejected";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "A bounty proposal is funded and became active."]
      pub struct BountyBecameActive {
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Event for BountyBecameActive {
        const PALLET: &'static str = "Bounties";
        const EVENT: &'static str = "BountyBecameActive";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A bounty is awarded to a beneficiary."]
      pub struct BountyAwarded {
        pub index: ::core::primitive::u32,
        pub beneficiary: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for BountyAwarded {
        const PALLET: &'static str = "Bounties";
        const EVENT: &'static str = "BountyAwarded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A bounty is claimed by beneficiary."]
      pub struct BountyClaimed {
        pub index: ::core::primitive::u32,
        pub payout: ::core::primitive::u128,
        pub beneficiary: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for BountyClaimed {
        const PALLET: &'static str = "Bounties";
        const EVENT: &'static str = "BountyClaimed";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "A bounty is cancelled."]
      pub struct BountyCanceled {
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Event for BountyCanceled {
        const PALLET: &'static str = "Bounties";
        const EVENT: &'static str = "BountyCanceled";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "A bounty expiry is extended."]
      pub struct BountyExtended {
        pub index: ::core::primitive::u32,
      }
      impl ::subxt::Event for BountyExtended {
        const PALLET: &'static str = "Bounties";
        const EVENT: &'static str = "BountyExtended";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct BountyCount;
      impl ::subxt::StorageEntry for BountyCount {
        const PALLET: &'static str = "Bounties";
        const STORAGE: &'static str = "BountyCount";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Bounties<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for Bounties<'_> {
        const PALLET: &'static str = "Bounties";
        const STORAGE: &'static str = "Bounties";
        type Value = runtime_types::pallet_bounties::Bounty<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
          ::core::primitive::u32,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct BountyDescriptions<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for BountyDescriptions<'_> {
        const PALLET: &'static str = "Bounties";
        const STORAGE: &'static str = "BountyDescriptions";
        type Value =
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct BountyApprovals;
      impl ::subxt::StorageEntry for BountyApprovals {
        const PALLET: &'static str = "Bounties";
        const STORAGE: &'static str = "BountyApprovals";
        type Value =
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Number of bounty proposals that have been made."]
        pub async fn bounty_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<BountyCount>()?
          };
          if runtime_storage_hash
            == [
              5u8, 188u8, 134u8, 220u8, 64u8, 49u8, 188u8, 98u8, 185u8, 186u8, 230u8, 65u8, 247u8,
              199u8, 28u8, 178u8, 202u8, 193u8, 41u8, 83u8, 115u8, 253u8, 182u8, 123u8, 92u8,
              138u8, 12u8, 31u8, 31u8, 213u8, 23u8, 118u8,
            ]
          {
            let entry = BountyCount;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Bounties that have been made."]
        pub async fn bounties(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_bounties::Bounty<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
              ::core::primitive::u32,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Bounties>()?
          };
          if runtime_storage_hash
            == [
              27u8, 154u8, 97u8, 199u8, 230u8, 195u8, 155u8, 198u8, 4u8, 28u8, 5u8, 202u8, 175u8,
              11u8, 243u8, 166u8, 67u8, 231u8, 125u8, 203u8, 141u8, 168u8, 106u8, 218u8, 129u8,
              25u8, 231u8, 253u8, 126u8, 144u8, 46u8, 255u8,
            ]
          {
            let entry = Bounties(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Bounties that have been made."]
        pub async fn bounties_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Bounties<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Bounties>()?
          };
          if runtime_storage_hash
            == [
              27u8, 154u8, 97u8, 199u8, 230u8, 195u8, 155u8, 198u8, 4u8, 28u8, 5u8, 202u8, 175u8,
              11u8, 243u8, 166u8, 67u8, 231u8, 125u8, 203u8, 141u8, 168u8, 106u8, 218u8, 129u8,
              25u8, 231u8, 253u8, 126u8, 144u8, 46u8, 255u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The description of each bounty."]
        pub async fn bounty_descriptions(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<BountyDescriptions>()?
          };
          if runtime_storage_hash
            == [
              41u8, 78u8, 19u8, 48u8, 241u8, 95u8, 175u8, 69u8, 236u8, 54u8, 84u8, 58u8, 69u8,
              28u8, 20u8, 20u8, 214u8, 138u8, 163u8, 252u8, 239u8, 116u8, 171u8, 136u8, 0u8, 159u8,
              192u8, 51u8, 191u8, 160u8, 131u8, 123u8,
            ]
          {
            let entry = BountyDescriptions(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The description of each bounty."]
        pub async fn bounty_descriptions_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, BountyDescriptions<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<BountyDescriptions>()?
          };
          if runtime_storage_hash
            == [
              41u8, 78u8, 19u8, 48u8, 241u8, 95u8, 175u8, 69u8, 236u8, 54u8, 84u8, 58u8, 69u8,
              28u8, 20u8, 20u8, 214u8, 138u8, 163u8, 252u8, 239u8, 116u8, 171u8, 136u8, 0u8, 159u8,
              192u8, 51u8, 191u8, 160u8, 131u8, 123u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Bounty indices that have been approved but not yet funded."]
        pub async fn bounty_approvals(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<BountyApprovals>()?
          };
          if runtime_storage_hash
            == [
              18u8, 142u8, 244u8, 64u8, 172u8, 62u8, 230u8, 114u8, 165u8, 158u8, 123u8, 163u8,
              35u8, 125u8, 218u8, 23u8, 113u8, 73u8, 233u8, 242u8, 181u8, 205u8, 60u8, 54u8, 64u8,
              115u8, 207u8, 94u8, 22u8, 14u8, 238u8, 49u8,
            ]
          {
            let entry = BountyApprovals;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The amount held on deposit for placing a bounty proposal."]
        pub fn bounty_deposit_base(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Bounties", "BountyDepositBase")?
            == [
              88u8, 94u8, 133u8, 207u8, 74u8, 165u8, 63u8, 193u8, 206u8, 172u8, 111u8, 56u8, 19u8,
              6u8, 234u8, 3u8, 42u8, 236u8, 51u8, 203u8, 30u8, 209u8, 3u8, 223u8, 11u8, 32u8,
              100u8, 71u8, 124u8, 67u8, 200u8, 169u8,
            ]
          {
            let pallet = metadata.pallet("Bounties")?;
            let constant = pallet.constant("BountyDepositBase")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The delay period for which a bounty beneficiary need to wait before claim the payout."]
        pub fn bounty_deposit_payout_delay(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Bounties", "BountyDepositPayoutDelay")?
            == [
              74u8, 26u8, 71u8, 75u8, 12u8, 126u8, 190u8, 156u8, 173u8, 22u8, 100u8, 241u8, 114u8,
              231u8, 203u8, 94u8, 212u8, 193u8, 224u8, 208u8, 92u8, 104u8, 220u8, 126u8, 219u8,
              58u8, 116u8, 28u8, 139u8, 10u8, 89u8, 198u8,
            ]
          {
            let pallet = metadata.pallet("Bounties")?;
            let constant = pallet.constant("BountyDepositPayoutDelay")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Bounty duration in blocks."]
        pub fn bounty_update_period(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Bounties", "BountyUpdatePeriod")?
            == [
              10u8, 209u8, 160u8, 42u8, 47u8, 204u8, 58u8, 28u8, 137u8, 252u8, 123u8, 123u8, 194u8,
              151u8, 43u8, 90u8, 0u8, 154u8, 132u8, 183u8, 50u8, 168u8, 204u8, 91u8, 235u8, 13u8,
              116u8, 219u8, 47u8, 215u8, 107u8, 136u8,
            ]
          {
            let pallet = metadata.pallet("Bounties")?;
            let constant = pallet.constant("BountyUpdatePeriod")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The curator deposit is calculated as a percentage of the curator fee."]
        #[doc = ""]
        #[doc = " This deposit has optional upper and lower bounds with `CuratorDepositMax` and"]
        #[doc = " `CuratorDepositMin`."]
        pub fn curator_deposit_multiplier(
          &self,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::per_things::Permill,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Bounties", "CuratorDepositMultiplier")?
            == [
              119u8, 126u8, 117u8, 41u8, 6u8, 165u8, 141u8, 28u8, 50u8, 24u8, 197u8, 238u8, 10u8,
              25u8, 186u8, 143u8, 77u8, 212u8, 156u8, 98u8, 147u8, 70u8, 188u8, 56u8, 23u8, 176u8,
              175u8, 248u8, 158u8, 34u8, 97u8, 39u8,
            ]
          {
            let pallet = metadata.pallet("Bounties")?;
            let constant = pallet.constant("CuratorDepositMultiplier")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
        pub fn curator_deposit_max(
          &self,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u128>,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Bounties", "CuratorDepositMax")?
            == [
              51u8, 185u8, 139u8, 195u8, 121u8, 175u8, 131u8, 166u8, 67u8, 163u8, 190u8, 242u8,
              217u8, 208u8, 162u8, 212u8, 86u8, 66u8, 187u8, 166u8, 71u8, 49u8, 188u8, 148u8, 59u8,
              131u8, 21u8, 42u8, 204u8, 60u8, 26u8, 143u8,
            ]
          {
            let pallet = metadata.pallet("Bounties")?;
            let constant = pallet.constant("CuratorDepositMax")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
        pub fn curator_deposit_min(
          &self,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u128>,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Bounties", "CuratorDepositMin")?
            == [
              0u8, 111u8, 137u8, 230u8, 236u8, 212u8, 236u8, 209u8, 93u8, 224u8, 59u8, 119u8,
              228u8, 148u8, 39u8, 5u8, 168u8, 6u8, 8u8, 171u8, 113u8, 238u8, 173u8, 199u8, 174u8,
              121u8, 165u8, 241u8, 36u8, 210u8, 53u8, 230u8,
            ]
          {
            let pallet = metadata.pallet("Bounties")?;
            let constant = pallet.constant("CuratorDepositMin")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Minimum value for a bounty."]
        pub fn bounty_value_minimum(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Bounties", "BountyValueMinimum")?
            == [
              195u8, 34u8, 93u8, 166u8, 78u8, 216u8, 153u8, 236u8, 61u8, 95u8, 246u8, 135u8, 139u8,
              88u8, 254u8, 123u8, 156u8, 168u8, 68u8, 188u8, 237u8, 73u8, 126u8, 63u8, 136u8,
              201u8, 255u8, 190u8, 13u8, 32u8, 112u8, 166u8,
            ]
          {
            let pallet = metadata.pallet("Bounties")?;
            let constant = pallet.constant("BountyValueMinimum")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The amount held on deposit per byte within the tip report reason or bounty description."]
        pub fn data_deposit_per_byte(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Bounties", "DataDepositPerByte")?
            == [
              198u8, 151u8, 50u8, 145u8, 48u8, 23u8, 147u8, 159u8, 56u8, 9u8, 101u8, 96u8, 181u8,
              247u8, 159u8, 225u8, 27u8, 251u8, 34u8, 201u8, 96u8, 180u8, 154u8, 175u8, 146u8,
              135u8, 108u8, 215u8, 76u8, 38u8, 63u8, 43u8,
            ]
          {
            let pallet = metadata.pallet("Bounties")?;
            let constant = pallet.constant("DataDepositPerByte")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Maximum acceptable reason length."]
        #[doc = ""]
        #[doc = " Benchmarks depend on this value, be sure to update weights file when changing this value"]
        pub fn maximum_reason_length(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Bounties", "MaximumReasonLength")?
            == [
              137u8, 135u8, 60u8, 208u8, 169u8, 200u8, 219u8, 180u8, 48u8, 114u8, 22u8, 9u8, 163u8,
              54u8, 133u8, 198u8, 72u8, 186u8, 183u8, 134u8, 130u8, 198u8, 61u8, 79u8, 86u8, 218u8,
              212u8, 166u8, 195u8, 81u8, 58u8, 191u8,
            ]
          {
            let pallet = metadata.pallet("Bounties")?;
            let constant = pallet.constant("MaximumReasonLength")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod assets {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Create {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub admin: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub min_balance: ::core::primitive::u128,
      }
      impl ::subxt::Call for Create {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "create";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceCreate {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub owner: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub is_sufficient: ::core::primitive::bool,
        #[codec(compact)]
        pub min_balance: ::core::primitive::u128,
      }
      impl ::subxt::Call for ForceCreate {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "force_create";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Destroy {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub witness: runtime_types::pallet_assets::types::DestroyWitness,
      }
      impl ::subxt::Call for Destroy {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "destroy";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Mint {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub beneficiary: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Call for Mint {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "mint";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Burn {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub who: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Call for Burn {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "burn";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Transfer {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub target: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Call for Transfer {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "transfer";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct TransferKeepAlive {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub target: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Call for TransferKeepAlive {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "transfer_keep_alive";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceTransfer {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub source: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub dest: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Call for ForceTransfer {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "force_transfer";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Freeze {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub who: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for Freeze {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "freeze";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Thaw {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub who: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for Thaw {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "thaw";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct FreezeAsset {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
      }
      impl ::subxt::Call for FreezeAsset {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "freeze_asset";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ThawAsset {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
      }
      impl ::subxt::Call for ThawAsset {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "thaw_asset";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct TransferOwnership {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub owner: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for TransferOwnership {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "transfer_ownership";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetTeam {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub issuer: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub admin: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub freezer: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for SetTeam {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "set_team";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetMetadata {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub name: ::std::vec::Vec<::core::primitive::u8>,
        pub symbol: ::std::vec::Vec<::core::primitive::u8>,
        pub decimals: ::core::primitive::u8,
      }
      impl ::subxt::Call for SetMetadata {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "set_metadata";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ClearMetadata {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
      }
      impl ::subxt::Call for ClearMetadata {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "clear_metadata";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceSetMetadata {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub name: ::std::vec::Vec<::core::primitive::u8>,
        pub symbol: ::std::vec::Vec<::core::primitive::u8>,
        pub decimals: ::core::primitive::u8,
        pub is_frozen: ::core::primitive::bool,
      }
      impl ::subxt::Call for ForceSetMetadata {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "force_set_metadata";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceClearMetadata {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
      }
      impl ::subxt::Call for ForceClearMetadata {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "force_clear_metadata";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceAssetStatus {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub owner: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub issuer: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub admin: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub freezer: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub min_balance: ::core::primitive::u128,
        pub is_sufficient: ::core::primitive::bool,
        pub is_frozen: ::core::primitive::bool,
      }
      impl ::subxt::Call for ForceAssetStatus {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "force_asset_status";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ApproveTransfer {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub delegate: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Call for ApproveTransfer {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "approve_transfer";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct CancelApproval {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub delegate: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for CancelApproval {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "cancel_approval";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ForceCancelApproval {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub owner: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub delegate: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for ForceCancelApproval {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "force_cancel_approval";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct TransferApproved {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub owner: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub destination: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        #[codec(compact)]
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Call for TransferApproved {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "transfer_approved";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Touch {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
      }
      impl ::subxt::Call for Touch {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "touch";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Refund {
        #[codec(compact)]
        pub id: ::core::primitive::u32,
        pub allow_burn: ::core::primitive::bool,
      }
      impl ::subxt::Call for Refund {
        const PALLET: &'static str = "Assets";
        const FUNCTION: &'static str = "refund";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Issue a new class of fungible assets from a public origin."]
        #[doc = ""]
        #[doc = "This new asset class has no assets initially and its owner is the origin."]
        #[doc = ""]
        #[doc = "The origin must be Signed and the sender must have sufficient funds free."]
        #[doc = ""]
        #[doc = "Funds of sender are reserved by `AssetDeposit`."]
        #[doc = ""]
        #[doc = "Parameters:"]
        #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
        #[doc = "an existing asset."]
        #[doc = "- `admin`: The admin of this class of assets. The admin is the initial address of each"]
        #[doc = "member of the asset class's admin team."]
        #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
        #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
        #[doc = ""]
        #[doc = "Emits `Created` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn create(
          &self,
          id: ::core::primitive::u32,
          admin: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          min_balance: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Create, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Create>()?
          };
          if runtime_call_hash
            == [
              177u8, 53u8, 93u8, 177u8, 53u8, 144u8, 26u8, 107u8, 113u8, 216u8, 184u8, 165u8, 86u8,
              202u8, 52u8, 65u8, 54u8, 154u8, 214u8, 0u8, 227u8, 34u8, 211u8, 56u8, 127u8, 133u8,
              13u8, 88u8, 200u8, 205u8, 245u8, 253u8,
            ]
          {
            let call = Create {
              id,
              admin,
              min_balance,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Issue a new class of fungible assets from a privileged origin."]
        #[doc = ""]
        #[doc = "This new asset class has no assets initially."]
        #[doc = ""]
        #[doc = "The origin must conform to `ForceOrigin`."]
        #[doc = ""]
        #[doc = "Unlike `create`, no funds are reserved."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
        #[doc = "an existing asset."]
        #[doc = "- `owner`: The owner of this class of assets. The owner has full superuser permissions"]
        #[doc = "over this asset, but may later change and configure the permissions using"]
        #[doc = "`transfer_ownership` and `set_team`."]
        #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
        #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
        #[doc = ""]
        #[doc = "Emits `ForceCreated` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn force_create(
          &self,
          id: ::core::primitive::u32,
          owner: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          is_sufficient: ::core::primitive::bool,
          min_balance: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ForceCreate, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceCreate>()?
          };
          if runtime_call_hash
            == [
              153u8, 61u8, 120u8, 5u8, 137u8, 5u8, 163u8, 103u8, 166u8, 245u8, 79u8, 241u8, 39u8,
              253u8, 6u8, 27u8, 119u8, 143u8, 41u8, 62u8, 104u8, 25u8, 250u8, 131u8, 165u8, 13u8,
              228u8, 197u8, 248u8, 82u8, 99u8, 12u8,
            ]
          {
            let call = ForceCreate {
              id,
              owner,
              is_sufficient,
              min_balance,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Destroy are disabled in Tidechain"]
        pub fn destroy(
          &self,
          id: ::core::primitive::u32,
          witness: runtime_types::pallet_assets::types::DestroyWitness,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Destroy, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Destroy>()?
          };
          if runtime_call_hash
            == [
              75u8, 150u8, 231u8, 156u8, 201u8, 102u8, 132u8, 29u8, 65u8, 54u8, 131u8, 27u8, 34u8,
              254u8, 226u8, 60u8, 139u8, 241u8, 76u8, 182u8, 174u8, 132u8, 119u8, 210u8, 13u8,
              198u8, 214u8, 224u8, 26u8, 205u8, 132u8, 45u8,
            ]
          {
            let call = Destroy { id, witness };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Mint assets of a particular class."]
        #[doc = ""]
        #[doc = "The origin must be Signed and the sender must be the Issuer of the asset `id`."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to have some amount minted."]
        #[doc = "- `beneficiary`: The account to be credited with the minted assets."]
        #[doc = "- `amount`: The amount of the asset to be minted."]
        #[doc = ""]
        #[doc = "Emits `Issued` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        #[doc = "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."]
        pub fn mint(
          &self,
          id: ::core::primitive::u32,
          beneficiary: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          amount: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Mint, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Mint>()?
          };
          if runtime_call_hash
            == [
              164u8, 54u8, 103u8, 58u8, 134u8, 74u8, 9u8, 117u8, 122u8, 38u8, 15u8, 13u8, 87u8,
              166u8, 147u8, 197u8, 188u8, 234u8, 151u8, 116u8, 141u8, 55u8, 0u8, 228u8, 162u8,
              139u8, 139u8, 231u8, 182u8, 166u8, 160u8, 234u8,
            ]
          {
            let call = Mint {
              id,
              beneficiary,
              amount,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`."]
        #[doc = ""]
        #[doc = "Origin must be Signed and the sender should be the Manager of the asset `id`."]
        #[doc = ""]
        #[doc = "Bails with `NoAccount` if the `who` is already dead."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to have some amount burned."]
        #[doc = "- `who`: The account to be debited from."]
        #[doc = "- `amount`: The maximum amount by which `who`'s balance should be reduced."]
        #[doc = ""]
        #[doc = "Emits `Burned` with the actual amount burned. If this takes the balance to below the"]
        #[doc = "minimum for the asset, then the amount burned is increased to take it to zero."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        #[doc = "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."]
        pub fn burn(
          &self,
          id: ::core::primitive::u32,
          who: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          amount: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Burn, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Burn>()?
          };
          if runtime_call_hash
            == [
              222u8, 243u8, 171u8, 102u8, 97u8, 197u8, 63u8, 37u8, 228u8, 27u8, 34u8, 49u8, 249u8,
              57u8, 147u8, 234u8, 62u8, 40u8, 202u8, 217u8, 104u8, 146u8, 103u8, 246u8, 101u8,
              206u8, 215u8, 101u8, 164u8, 95u8, 123u8, 142u8,
            ]
          {
            let call = Burn { id, who, amount };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Move some assets from the sender account to another."]
        #[doc = ""]
        #[doc = "Origin must be Signed."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
        #[doc = "- `target`: The account to be credited."]
        #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
        #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
        #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
        #[doc = "the minimum balance. Must be greater than zero."]
        #[doc = ""]
        #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
        #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
        #[doc = "to zero."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
        #[doc = "`target`."]
        pub fn transfer(
          &self,
          id: ::core::primitive::u32,
          target: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          amount: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Transfer, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Transfer>()?
          };
          if runtime_call_hash
            == [
              196u8, 236u8, 190u8, 133u8, 96u8, 191u8, 156u8, 108u8, 241u8, 115u8, 38u8, 201u8,
              75u8, 96u8, 89u8, 57u8, 152u8, 108u8, 253u8, 197u8, 176u8, 229u8, 74u8, 26u8, 108u8,
              41u8, 88u8, 188u8, 18u8, 204u8, 60u8, 187u8,
            ]
          {
            let call = Transfer { id, target, amount };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Move some assets from the sender account to another, keeping the sender account alive."]
        #[doc = ""]
        #[doc = "Origin must be Signed."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
        #[doc = "- `target`: The account to be credited."]
        #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
        #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
        #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
        #[doc = "the minimum balance. Must be greater than zero."]
        #[doc = ""]
        #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
        #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
        #[doc = "to zero."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
        #[doc = "`target`."]
        pub fn transfer_keep_alive(
          &self,
          id: ::core::primitive::u32,
          target: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          amount: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            TransferKeepAlive,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<TransferKeepAlive>()?
          };
          if runtime_call_hash
            == [
              86u8, 157u8, 13u8, 38u8, 193u8, 245u8, 116u8, 84u8, 88u8, 88u8, 6u8, 210u8, 66u8,
              64u8, 119u8, 45u8, 16u8, 103u8, 172u8, 204u8, 150u8, 105u8, 170u8, 204u8, 126u8,
              154u8, 42u8, 25u8, 221u8, 29u8, 254u8, 218u8,
            ]
          {
            let call = TransferKeepAlive { id, target, amount };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Move some assets from one account to another."]
        #[doc = ""]
        #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
        #[doc = "- `source`: The account to be debited."]
        #[doc = "- `dest`: The account to be credited."]
        #[doc = "- `amount`: The amount by which the `source`'s balance of assets should be reduced and"]
        #[doc = "`dest`'s balance increased. The amount actually transferred may be slightly greater in"]
        #[doc = "the case that the transfer would otherwise take the `source` balance above zero but"]
        #[doc = "below the minimum balance. Must be greater than zero."]
        #[doc = ""]
        #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
        #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
        #[doc = "to zero."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        #[doc = "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of"]
        #[doc = "`dest`."]
        pub fn force_transfer(
          &self,
          id: ::core::primitive::u32,
          source: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          dest: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          amount: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ForceTransfer, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceTransfer>()?
          };
          if runtime_call_hash
            == [
              165u8, 181u8, 248u8, 151u8, 144u8, 58u8, 197u8, 151u8, 47u8, 125u8, 35u8, 26u8,
              239u8, 62u8, 196u8, 58u8, 111u8, 8u8, 216u8, 231u8, 83u8, 199u8, 100u8, 53u8, 237u8,
              194u8, 87u8, 201u8, 71u8, 138u8, 38u8, 91u8,
            ]
          {
            let call = ForceTransfer {
              id,
              source,
              dest,
              amount,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Disallow further unprivileged transfers from an account."]
        #[doc = ""]
        #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to be frozen."]
        #[doc = "- `who`: The account to be frozen."]
        #[doc = ""]
        #[doc = "Emits `Frozen`."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn freeze(
          &self,
          id: ::core::primitive::u32,
          who: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Freeze, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Freeze>()?
          };
          if runtime_call_hash
            == [
              123u8, 16u8, 113u8, 172u8, 109u8, 135u8, 224u8, 63u8, 69u8, 53u8, 210u8, 134u8,
              245u8, 12u8, 46u8, 71u8, 41u8, 200u8, 203u8, 49u8, 211u8, 209u8, 47u8, 44u8, 15u8,
              207u8, 15u8, 123u8, 118u8, 183u8, 241u8, 253u8,
            ]
          {
            let call = Freeze { id, who };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Allow unprivileged transfers from an account again."]
        #[doc = ""]
        #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to be frozen."]
        #[doc = "- `who`: The account to be unfrozen."]
        #[doc = ""]
        #[doc = "Emits `Thawed`."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn thaw(
          &self,
          id: ::core::primitive::u32,
          who: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Thaw, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Thaw>()?
          };
          if runtime_call_hash
            == [
              134u8, 33u8, 181u8, 219u8, 32u8, 188u8, 81u8, 158u8, 109u8, 165u8, 32u8, 28u8, 51u8,
              189u8, 65u8, 183u8, 188u8, 202u8, 227u8, 89u8, 35u8, 176u8, 232u8, 22u8, 187u8,
              200u8, 147u8, 46u8, 190u8, 117u8, 45u8, 170u8,
            ]
          {
            let call = Thaw { id, who };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Disallow further unprivileged transfers for the asset class."]
        #[doc = ""]
        #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to be frozen."]
        #[doc = ""]
        #[doc = "Emits `Frozen`."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn freeze_asset(
          &self,
          id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, FreezeAsset, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<FreezeAsset>()?
          };
          if runtime_call_hash
            == [
              143u8, 188u8, 2u8, 145u8, 109u8, 95u8, 170u8, 60u8, 163u8, 226u8, 99u8, 18u8, 106u8,
              64u8, 77u8, 168u8, 131u8, 87u8, 105u8, 203u8, 145u8, 97u8, 237u8, 194u8, 143u8,
              176u8, 65u8, 164u8, 79u8, 163u8, 11u8, 230u8,
            ]
          {
            let call = FreezeAsset { id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Allow unprivileged transfers for the asset again."]
        #[doc = ""]
        #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to be thawed."]
        #[doc = ""]
        #[doc = "Emits `Thawed`."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn thaw_asset(
          &self,
          id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ThawAsset, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ThawAsset>()?
          };
          if runtime_call_hash
            == [
              63u8, 222u8, 197u8, 201u8, 125u8, 210u8, 148u8, 180u8, 52u8, 93u8, 190u8, 63u8,
              195u8, 10u8, 15u8, 140u8, 154u8, 95u8, 5u8, 32u8, 36u8, 189u8, 85u8, 25u8, 167u8,
              49u8, 11u8, 122u8, 43u8, 11u8, 255u8, 187u8,
            ]
          {
            let call = ThawAsset { id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Change the Owner of an asset."]
        #[doc = ""]
        #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset."]
        #[doc = "- `owner`: The new Owner of this asset."]
        #[doc = ""]
        #[doc = "Emits `OwnerChanged`."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn transfer_ownership(
          &self,
          id: ::core::primitive::u32,
          owner: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            TransferOwnership,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<TransferOwnership>()?
          };
          if runtime_call_hash
            == [
              225u8, 224u8, 250u8, 48u8, 241u8, 21u8, 169u8, 120u8, 74u8, 44u8, 146u8, 133u8,
              104u8, 35u8, 181u8, 70u8, 146u8, 22u8, 125u8, 247u8, 0u8, 249u8, 182u8, 88u8, 188u8,
              57u8, 155u8, 64u8, 98u8, 179u8, 81u8, 188u8,
            ]
          {
            let call = TransferOwnership { id, owner };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Change the Issuer, Admin and Freezer of an asset."]
        #[doc = ""]
        #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to be frozen."]
        #[doc = "- `issuer`: The new Issuer of this asset."]
        #[doc = "- `admin`: The new Admin of this asset."]
        #[doc = "- `freezer`: The new Freezer of this asset."]
        #[doc = ""]
        #[doc = "Emits `TeamChanged`."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn set_team(
          &self,
          id: ::core::primitive::u32,
          issuer: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          admin: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          freezer: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetTeam, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetTeam>()?
          };
          if runtime_call_hash
            == [
              48u8, 54u8, 83u8, 165u8, 157u8, 96u8, 245u8, 73u8, 103u8, 153u8, 131u8, 136u8, 229u8,
              0u8, 185u8, 15u8, 4u8, 172u8, 32u8, 51u8, 186u8, 68u8, 231u8, 150u8, 93u8, 197u8,
              195u8, 157u8, 9u8, 73u8, 173u8, 243u8,
            ]
          {
            let call = SetTeam {
              id,
              issuer,
              admin,
              freezer,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Set the metadata for an asset."]
        #[doc = ""]
        #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
        #[doc = ""]
        #[doc = "Funds of sender are reserved according to the formula:"]
        #[doc = "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into"]
        #[doc = "account any already reserved funds."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to update."]
        #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
        #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
        #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
        #[doc = ""]
        #[doc = "Emits `MetadataSet`."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn set_metadata(
          &self,
          id: ::core::primitive::u32,
          name: ::std::vec::Vec<::core::primitive::u8>,
          symbol: ::std::vec::Vec<::core::primitive::u8>,
          decimals: ::core::primitive::u8,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetMetadata, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetMetadata>()?
          };
          if runtime_call_hash
            == [
              173u8, 223u8, 227u8, 51u8, 239u8, 95u8, 222u8, 28u8, 190u8, 232u8, 231u8, 226u8,
              149u8, 147u8, 69u8, 135u8, 183u8, 147u8, 254u8, 80u8, 88u8, 101u8, 215u8, 250u8,
              192u8, 17u8, 113u8, 243u8, 173u8, 184u8, 252u8, 88u8,
            ]
          {
            let call = SetMetadata {
              id,
              name,
              symbol,
              decimals,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Clear the metadata for an asset."]
        #[doc = ""]
        #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
        #[doc = ""]
        #[doc = "Any deposit is freed for the asset owner."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to clear."]
        #[doc = ""]
        #[doc = "Emits `MetadataCleared`."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn clear_metadata(
          &self,
          id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ClearMetadata, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ClearMetadata>()?
          };
          if runtime_call_hash
            == [
              167u8, 244u8, 159u8, 98u8, 242u8, 73u8, 109u8, 217u8, 75u8, 20u8, 34u8, 94u8, 21u8,
              190u8, 179u8, 182u8, 156u8, 14u8, 19u8, 91u8, 36u8, 130u8, 88u8, 196u8, 21u8, 97u8,
              180u8, 0u8, 139u8, 209u8, 136u8, 8u8,
            ]
          {
            let call = ClearMetadata { id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Force the metadata for an asset to some value."]
        #[doc = ""]
        #[doc = "Origin must be ForceOrigin."]
        #[doc = ""]
        #[doc = "Any deposit is left alone."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to update."]
        #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
        #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
        #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
        #[doc = ""]
        #[doc = "Emits `MetadataSet`."]
        #[doc = ""]
        #[doc = "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."]
        pub fn force_set_metadata(
          &self,
          id: ::core::primitive::u32,
          name: ::std::vec::Vec<::core::primitive::u8>,
          symbol: ::std::vec::Vec<::core::primitive::u8>,
          decimals: ::core::primitive::u8,
          is_frozen: ::core::primitive::bool,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ForceSetMetadata, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceSetMetadata>()?
          };
          if runtime_call_hash
            == [
              30u8, 254u8, 44u8, 17u8, 82u8, 41u8, 93u8, 110u8, 113u8, 6u8, 75u8, 27u8, 7u8, 69u8,
              221u8, 148u8, 47u8, 106u8, 111u8, 144u8, 18u8, 79u8, 0u8, 17u8, 137u8, 229u8, 175u8,
              183u8, 7u8, 137u8, 148u8, 135u8,
            ]
          {
            let call = ForceSetMetadata {
              id,
              name,
              symbol,
              decimals,
              is_frozen,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Clear the metadata for an asset."]
        #[doc = ""]
        #[doc = "Origin must be ForceOrigin."]
        #[doc = ""]
        #[doc = "Any deposit is returned."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset to clear."]
        #[doc = ""]
        #[doc = "Emits `MetadataCleared`."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn force_clear_metadata(
          &self,
          id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ForceClearMetadata,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceClearMetadata>()?
          };
          if runtime_call_hash
            == [
              31u8, 209u8, 69u8, 120u8, 235u8, 248u8, 172u8, 247u8, 79u8, 199u8, 186u8, 52u8,
              254u8, 240u8, 76u8, 59u8, 74u8, 6u8, 136u8, 142u8, 240u8, 200u8, 235u8, 55u8, 96u8,
              78u8, 33u8, 232u8, 162u8, 57u8, 215u8, 26u8,
            ]
          {
            let call = ForceClearMetadata { id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Alter the attributes of a given asset."]
        #[doc = ""]
        #[doc = "Origin must be `ForceOrigin`."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset."]
        #[doc = "- `owner`: The new Owner of this asset."]
        #[doc = "- `issuer`: The new Issuer of this asset."]
        #[doc = "- `admin`: The new Admin of this asset."]
        #[doc = "- `freezer`: The new Freezer of this asset."]
        #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
        #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
        #[doc = "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient"]
        #[doc = "value to account for the state bloat associated with its balance storage. If set to"]
        #[doc = "`true`, then non-zero balances may be stored without a `consumer` reference (and thus"]
        #[doc = "an ED in the Balances pallet or whatever else is used to control user-account state"]
        #[doc = "growth)."]
        #[doc = "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin"]
        #[doc = "instructions."]
        #[doc = ""]
        #[doc = "Emits `AssetStatusChanged` with the identity of the asset."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn force_asset_status(
          &self,
          id: ::core::primitive::u32,
          owner: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          issuer: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          admin: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          freezer: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          min_balance: ::core::primitive::u128,
          is_sufficient: ::core::primitive::bool,
          is_frozen: ::core::primitive::bool,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ForceAssetStatus, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceAssetStatus>()?
          };
          if runtime_call_hash
            == [
              106u8, 151u8, 41u8, 11u8, 64u8, 231u8, 76u8, 156u8, 21u8, 121u8, 95u8, 59u8, 54u8,
              227u8, 61u8, 170u8, 255u8, 103u8, 80u8, 110u8, 35u8, 22u8, 144u8, 231u8, 205u8, 37u8,
              255u8, 153u8, 178u8, 241u8, 81u8, 83u8,
            ]
          {
            let call = ForceAssetStatus {
              id,
              owner,
              issuer,
              admin,
              freezer,
              min_balance,
              is_sufficient,
              is_frozen,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Approve an amount of asset for transfer by a delegated third-party account."]
        #[doc = ""]
        #[doc = "Origin must be Signed."]
        #[doc = ""]
        #[doc = "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account"]
        #[doc = "for the purpose of holding the approval. If some non-zero amount of assets is already"]
        #[doc = "approved from signing account to `delegate`, then it is topped up or unreserved to"]
        #[doc = "meet the right value."]
        #[doc = ""]
        #[doc = "NOTE: The signing account does not need to own `amount` of assets at the point of"]
        #[doc = "making this call."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset."]
        #[doc = "- `delegate`: The account to delegate permission to transfer asset."]
        #[doc = "- `amount`: The amount of asset that may be transferred by `delegate`. If there is"]
        #[doc = "already an approval in place, then this acts additively."]
        #[doc = ""]
        #[doc = "Emits `ApprovedTransfer` on success."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn approve_transfer(
          &self,
          id: ::core::primitive::u32,
          delegate: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          amount: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ApproveTransfer, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ApproveTransfer>()?
          };
          if runtime_call_hash
            == [
              235u8, 25u8, 236u8, 240u8, 111u8, 162u8, 76u8, 234u8, 166u8, 166u8, 96u8, 247u8,
              253u8, 188u8, 193u8, 6u8, 100u8, 76u8, 26u8, 243u8, 44u8, 99u8, 80u8, 40u8, 21u8,
              32u8, 39u8, 165u8, 191u8, 118u8, 188u8, 172u8,
            ]
          {
            let call = ApproveTransfer {
              id,
              delegate,
              amount,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
        #[doc = ""]
        #[doc = "Origin must be Signed and there must be an approval in place between signer and"]
        #[doc = "`delegate`."]
        #[doc = ""]
        #[doc = "Unreserve any deposit previously reserved by `approve_transfer` for the approval."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset."]
        #[doc = "- `delegate`: The account delegated permission to transfer asset."]
        #[doc = ""]
        #[doc = "Emits `ApprovalCancelled` on success."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn cancel_approval(
          &self,
          id: ::core::primitive::u32,
          delegate: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, CancelApproval, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CancelApproval>()?
          };
          if runtime_call_hash
            == [
              25u8, 74u8, 134u8, 139u8, 239u8, 248u8, 159u8, 207u8, 76u8, 116u8, 101u8, 42u8,
              205u8, 187u8, 72u8, 94u8, 131u8, 61u8, 161u8, 91u8, 174u8, 89u8, 175u8, 215u8, 127u8,
              93u8, 103u8, 107u8, 191u8, 146u8, 143u8, 6u8,
            ]
          {
            let call = CancelApproval { id, delegate };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
        #[doc = ""]
        #[doc = "Origin must be either `ForceOrigin` or Signed origin with the signer being the Admin"]
        #[doc = "account of the asset `id`."]
        #[doc = ""]
        #[doc = "Unreserve any deposit previously reserved by `approve_transfer` for the approval."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset."]
        #[doc = "- `delegate`: The account delegated permission to transfer asset."]
        #[doc = ""]
        #[doc = "Emits `ApprovalCancelled` on success."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn force_cancel_approval(
          &self,
          id: ::core::primitive::u32,
          owner: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          delegate: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ForceCancelApproval,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ForceCancelApproval>()?
          };
          if runtime_call_hash
            == [
              60u8, 95u8, 2u8, 69u8, 251u8, 122u8, 210u8, 164u8, 168u8, 182u8, 209u8, 36u8, 248u8,
              107u8, 252u8, 16u8, 250u8, 62u8, 229u8, 192u8, 60u8, 91u8, 43u8, 238u8, 135u8, 54u8,
              170u8, 142u8, 208u8, 99u8, 15u8, 135u8,
            ]
          {
            let call = ForceCancelApproval {
              id,
              owner,
              delegate,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Transfer some asset balance from a previously delegated account to some third-party"]
        #[doc = "account."]
        #[doc = ""]
        #[doc = "Origin must be Signed and there must be an approval in place by the `owner` to the"]
        #[doc = "signer."]
        #[doc = ""]
        #[doc = "If the entire amount approved for transfer is transferred, then any deposit previously"]
        #[doc = "reserved by `approve_transfer` is unreserved."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset."]
        #[doc = "- `owner`: The account which previously approved for a transfer of at least `amount` and"]
        #[doc = "from which the asset balance will be withdrawn."]
        #[doc = "- `destination`: The account to which the asset balance of `amount` will be transferred."]
        #[doc = "- `amount`: The amount of assets to transfer."]
        #[doc = ""]
        #[doc = "Emits `TransferredApproved` on success."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn transfer_approved(
          &self,
          id: ::core::primitive::u32,
          owner: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          destination: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          amount: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, TransferApproved, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<TransferApproved>()?
          };
          if runtime_call_hash
            == [
              229u8, 21u8, 50u8, 120u8, 75u8, 65u8, 189u8, 174u8, 54u8, 149u8, 4u8, 129u8, 20u8,
              123u8, 67u8, 244u8, 104u8, 71u8, 182u8, 150u8, 199u8, 79u8, 225u8, 137u8, 78u8, 29u8,
              223u8, 159u8, 32u8, 190u8, 17u8, 75u8,
            ]
          {
            let call = TransferApproved {
              id,
              owner,
              destination,
              amount,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Create an asset account for non-provider assets."]
        #[doc = ""]
        #[doc = "A deposit will be taken from the signer account."]
        #[doc = ""]
        #[doc = "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit"]
        #[doc = "  to be taken."]
        #[doc = "- `id`: The identifier of the asset for the account to be created."]
        #[doc = ""]
        #[doc = "Emits `Touched` event when successful."]
        pub fn touch(
          &self,
          id: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Touch, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Touch>()?
          };
          if runtime_call_hash
            == [
              148u8, 89u8, 169u8, 34u8, 198u8, 67u8, 136u8, 9u8, 219u8, 214u8, 164u8, 144u8, 195u8,
              48u8, 75u8, 218u8, 231u8, 109u8, 253u8, 88u8, 23u8, 159u8, 184u8, 54u8, 249u8, 68u8,
              78u8, 91u8, 45u8, 168u8, 194u8, 165u8,
            ]
          {
            let call = Touch { id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Return the deposit (if any) of an asset account."]
        #[doc = ""]
        #[doc = "The origin must be Signed."]
        #[doc = ""]
        #[doc = "- `id`: The identifier of the asset for the account to be created."]
        #[doc = "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund."]
        #[doc = ""]
        #[doc = "Emits `Refunded` event when successful."]
        pub fn refund(
          &self,
          id: ::core::primitive::u32,
          allow_burn: ::core::primitive::bool,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Refund, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Refund>()?
          };
          if runtime_call_hash
            == [
              72u8, 197u8, 177u8, 250u8, 20u8, 37u8, 39u8, 132u8, 62u8, 24u8, 167u8, 155u8, 79u8,
              88u8, 158u8, 209u8, 112u8, 40u8, 41u8, 83u8, 224u8, 224u8, 71u8, 115u8, 29u8, 84u8,
              52u8, 49u8, 199u8, 78u8, 97u8, 230u8,
            ]
          {
            let call = Refund { id, allow_burn };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_assets::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some asset class was created."]
      pub struct Created {
        pub asset_id: ::core::primitive::u32,
        pub creator: ::subxt::sp_core::crypto::AccountId32,
        pub owner: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for Created {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "Created";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some assets were issued."]
      pub struct Issued {
        pub asset_id: ::core::primitive::u32,
        pub owner: ::subxt::sp_core::crypto::AccountId32,
        pub total_supply: ::core::primitive::u128,
      }
      impl ::subxt::Event for Issued {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "Issued";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some assets were transferred."]
      pub struct Transferred {
        pub asset_id: ::core::primitive::u32,
        pub from: ::subxt::sp_core::crypto::AccountId32,
        pub to: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for Transferred {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "Transferred";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some assets were destroyed."]
      pub struct Burned {
        pub asset_id: ::core::primitive::u32,
        pub owner: ::subxt::sp_core::crypto::AccountId32,
        pub balance: ::core::primitive::u128,
      }
      impl ::subxt::Event for Burned {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "Burned";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The management team changed."]
      pub struct TeamChanged {
        pub asset_id: ::core::primitive::u32,
        pub issuer: ::subxt::sp_core::crypto::AccountId32,
        pub admin: ::subxt::sp_core::crypto::AccountId32,
        pub freezer: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for TeamChanged {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "TeamChanged";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The owner changed."]
      pub struct OwnerChanged {
        pub asset_id: ::core::primitive::u32,
        pub owner: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for OwnerChanged {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "OwnerChanged";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some account `who` was frozen."]
      pub struct Frozen {
        pub asset_id: ::core::primitive::u32,
        pub who: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for Frozen {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "Frozen";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some account `who` was thawed."]
      pub struct Thawed {
        pub asset_id: ::core::primitive::u32,
        pub who: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for Thawed {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "Thawed";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "Some asset `asset_id` was frozen."]
      pub struct AssetFrozen {
        pub asset_id: ::core::primitive::u32,
      }
      impl ::subxt::Event for AssetFrozen {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "AssetFrozen";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "Some asset `asset_id` was thawed."]
      pub struct AssetThawed {
        pub asset_id: ::core::primitive::u32,
      }
      impl ::subxt::Event for AssetThawed {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "AssetThawed";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "An asset class was destroyed."]
      pub struct Destroyed {
        pub asset_id: ::core::primitive::u32,
      }
      impl ::subxt::Event for Destroyed {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "Destroyed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Some asset class was force-created."]
      pub struct ForceCreated {
        pub asset_id: ::core::primitive::u32,
        pub owner: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for ForceCreated {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "ForceCreated";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "New metadata has been set for an asset."]
      pub struct MetadataSet {
        pub asset_id: ::core::primitive::u32,
        pub name: ::std::vec::Vec<::core::primitive::u8>,
        pub symbol: ::std::vec::Vec<::core::primitive::u8>,
        pub decimals: ::core::primitive::u8,
        pub is_frozen: ::core::primitive::bool,
      }
      impl ::subxt::Event for MetadataSet {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "MetadataSet";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "Metadata has been cleared for an asset."]
      pub struct MetadataCleared {
        pub asset_id: ::core::primitive::u32,
      }
      impl ::subxt::Event for MetadataCleared {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "MetadataCleared";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "(Additional) funds have been approved for transfer to a destination account."]
      pub struct ApprovedTransfer {
        pub asset_id: ::core::primitive::u32,
        pub source: ::subxt::sp_core::crypto::AccountId32,
        pub delegate: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for ApprovedTransfer {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "ApprovedTransfer";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An approval for account `delegate` was cancelled by `owner`."]
      pub struct ApprovalCancelled {
        pub asset_id: ::core::primitive::u32,
        pub owner: ::subxt::sp_core::crypto::AccountId32,
        pub delegate: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for ApprovalCancelled {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "ApprovalCancelled";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
      #[doc = "the approved `delegate`."]
      pub struct TransferredApproved {
        pub asset_id: ::core::primitive::u32,
        pub owner: ::subxt::sp_core::crypto::AccountId32,
        pub delegate: ::subxt::sp_core::crypto::AccountId32,
        pub destination: ::subxt::sp_core::crypto::AccountId32,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for TransferredApproved {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "TransferredApproved";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      #[doc = "An asset has had its attributes changed by the `Force` origin."]
      pub struct AssetStatusChanged {
        pub asset_id: ::core::primitive::u32,
      }
      impl ::subxt::Event for AssetStatusChanged {
        const PALLET: &'static str = "Assets";
        const EVENT: &'static str = "AssetStatusChanged";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Asset<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for Asset<'_> {
        const PALLET: &'static str = "Assets";
        const STORAGE: &'static str = "Asset";
        type Value = runtime_types::pallet_assets::types::AssetDetails<
          ::core::primitive::u128,
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct Account<'a>(
        pub &'a ::subxt::sp_core::crypto::AccountId32,
        pub &'a ::core::primitive::u32,
      );
      impl ::subxt::StorageEntry for Account<'_> {
        const PALLET: &'static str = "Assets";
        const STORAGE: &'static str = "Account";
        type Value = runtime_types::pallet_assets::types::AssetAccount<
          ::core::primitive::u128,
          ::core::primitive::u128,
          (),
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Blake2_128Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Blake2_128Concat),
          ])
        }
      }
      pub struct Approvals<'a>(
        pub &'a ::core::primitive::u32,
        pub &'a ::subxt::sp_core::crypto::AccountId32,
        pub &'a ::subxt::sp_core::crypto::AccountId32,
      );
      impl ::subxt::StorageEntry for Approvals<'_> {
        const PALLET: &'static str = "Assets";
        const STORAGE: &'static str = "Approvals";
        type Value = runtime_types::pallet_assets::types::Approval<
          ::core::primitive::u128,
          ::core::primitive::u128,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Blake2_128Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Blake2_128Concat),
            ::subxt::StorageMapKey::new(&self.2, ::subxt::StorageHasher::Blake2_128Concat),
          ])
        }
      }
      pub struct Metadata<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for Metadata<'_> {
        const PALLET: &'static str = "Assets";
        const STORAGE: &'static str = "Metadata";
        type Value = runtime_types::pallet_assets::types::AssetMetadata<
          ::core::primitive::u128,
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Details of an asset."]
        pub async fn asset(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_assets::types::AssetDetails<
              ::core::primitive::u128,
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Asset>()?
          };
          if runtime_storage_hash
            == [
              171u8, 171u8, 67u8, 144u8, 214u8, 143u8, 54u8, 233u8, 197u8, 111u8, 154u8, 139u8,
              7u8, 231u8, 194u8, 246u8, 190u8, 109u8, 168u8, 154u8, 247u8, 28u8, 227u8, 53u8,
              108u8, 48u8, 4u8, 89u8, 119u8, 8u8, 79u8, 76u8,
            ]
          {
            let entry = Asset(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Details of an asset."]
        pub async fn asset_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Asset<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Asset>()?
          };
          if runtime_storage_hash
            == [
              171u8, 171u8, 67u8, 144u8, 214u8, 143u8, 54u8, 233u8, 197u8, 111u8, 154u8, 139u8,
              7u8, 231u8, 194u8, 246u8, 190u8, 109u8, 168u8, 154u8, 247u8, 28u8, 227u8, 53u8,
              108u8, 48u8, 4u8, 89u8, 119u8, 8u8, 79u8, 76u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The holdings of a specific account for a specific asset."]
        pub async fn account(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          _1: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_assets::types::AssetAccount<
              ::core::primitive::u128,
              ::core::primitive::u128,
              (),
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Account>()?
          };
          if runtime_storage_hash
            == [
              248u8, 123u8, 30u8, 144u8, 20u8, 252u8, 112u8, 37u8, 119u8, 116u8, 49u8, 243u8,
              179u8, 62u8, 68u8, 220u8, 48u8, 63u8, 37u8, 7u8, 108u8, 161u8, 238u8, 94u8, 236u8,
              216u8, 191u8, 254u8, 124u8, 209u8, 12u8, 163u8,
            ]
          {
            let entry = Account(_0, _1);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The holdings of a specific account for a specific asset."]
        pub async fn account_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Account<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Account>()?
          };
          if runtime_storage_hash
            == [
              248u8, 123u8, 30u8, 144u8, 20u8, 252u8, 112u8, 37u8, 119u8, 116u8, 49u8, 243u8,
              179u8, 62u8, 68u8, 220u8, 48u8, 63u8, 37u8, 7u8, 108u8, 161u8, 238u8, 94u8, 236u8,
              216u8, 191u8, 254u8, 124u8, 209u8, 12u8, 163u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
        #[doc = " is the amount of `T::Currency` reserved for storing this."]
        #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
        pub async fn approvals(
          &self,
          _0: &::core::primitive::u32,
          _1: &::subxt::sp_core::crypto::AccountId32,
          _2: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_assets::types::Approval<
              ::core::primitive::u128,
              ::core::primitive::u128,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Approvals>()?
          };
          if runtime_storage_hash
            == [
              237u8, 98u8, 160u8, 91u8, 202u8, 124u8, 226u8, 49u8, 184u8, 96u8, 90u8, 61u8, 79u8,
              66u8, 54u8, 237u8, 156u8, 232u8, 140u8, 67u8, 81u8, 55u8, 89u8, 132u8, 68u8, 125u8,
              47u8, 254u8, 11u8, 104u8, 207u8, 96u8,
            ]
          {
            let entry = Approvals(_0, _1, _2);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
        #[doc = " is the amount of `T::Currency` reserved for storing this."]
        #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
        pub async fn approvals_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Approvals<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Approvals>()?
          };
          if runtime_storage_hash
            == [
              237u8, 98u8, 160u8, 91u8, 202u8, 124u8, 226u8, 49u8, 184u8, 96u8, 90u8, 61u8, 79u8,
              66u8, 54u8, 237u8, 156u8, 232u8, 140u8, 67u8, 81u8, 55u8, 89u8, 132u8, 68u8, 125u8,
              47u8, 254u8, 11u8, 104u8, 207u8, 96u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Metadata of an asset."]
        pub async fn metadata(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::pallet_assets::types::AssetMetadata<
            ::core::primitive::u128,
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Metadata>()?
          };
          if runtime_storage_hash
            == [
              209u8, 23u8, 7u8, 106u8, 173u8, 10u8, 115u8, 39u8, 138u8, 26u8, 54u8, 230u8, 183u8,
              233u8, 249u8, 85u8, 76u8, 84u8, 184u8, 54u8, 114u8, 213u8, 38u8, 238u8, 109u8, 30u8,
              0u8, 246u8, 123u8, 200u8, 40u8, 34u8,
            ]
          {
            let entry = Metadata(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Metadata of an asset."]
        pub async fn metadata_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Metadata<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Metadata>()?
          };
          if runtime_storage_hash
            == [
              209u8, 23u8, 7u8, 106u8, 173u8, 10u8, 115u8, 39u8, 138u8, 26u8, 54u8, 230u8, 183u8,
              233u8, 249u8, 85u8, 76u8, 84u8, 184u8, 54u8, 114u8, 213u8, 38u8, 238u8, 109u8, 30u8,
              0u8, 246u8, 123u8, 200u8, 40u8, 34u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The basic amount of funds that must be reserved for an asset."]
        pub fn asset_deposit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Assets", "AssetDeposit")?
            == [
              196u8, 149u8, 152u8, 62u8, 30u8, 176u8, 7u8, 237u8, 13u8, 154u8, 60u8, 252u8, 148u8,
              215u8, 52u8, 156u8, 49u8, 227u8, 164u8, 249u8, 68u8, 239u8, 14u8, 46u8, 26u8, 42u8,
              166u8, 172u8, 150u8, 246u8, 83u8, 43u8,
            ]
          {
            let pallet = metadata.pallet("Assets")?;
            let constant = pallet.constant("AssetDeposit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The amount of funds that must be reserved for a non-provider asset account to be"]
        #[doc = " maintained."]
        pub fn asset_account_deposit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Assets", "AssetAccountDeposit")?
            == [
              54u8, 185u8, 94u8, 153u8, 66u8, 56u8, 170u8, 214u8, 144u8, 152u8, 240u8, 43u8, 202u8,
              208u8, 128u8, 77u8, 141u8, 246u8, 9u8, 116u8, 217u8, 222u8, 251u8, 23u8, 120u8, 5u8,
              52u8, 111u8, 218u8, 134u8, 98u8, 15u8,
            ]
          {
            let pallet = metadata.pallet("Assets")?;
            let constant = pallet.constant("AssetAccountDeposit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The basic amount of funds that must be reserved when adding metadata to your asset."]
        pub fn metadata_deposit_base(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Assets", "MetadataDepositBase")?
            == [
              82u8, 220u8, 131u8, 1u8, 84u8, 159u8, 26u8, 23u8, 43u8, 188u8, 170u8, 143u8, 48u8,
              94u8, 36u8, 141u8, 106u8, 12u8, 161u8, 42u8, 60u8, 60u8, 139u8, 56u8, 9u8, 62u8,
              182u8, 35u8, 203u8, 184u8, 217u8, 9u8,
            ]
          {
            let pallet = metadata.pallet("Assets")?;
            let constant = pallet.constant("MetadataDepositBase")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The additional funds that must be reserved for the number of bytes you store in your"]
        #[doc = " metadata."]
        pub fn metadata_deposit_per_byte(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Assets", "MetadataDepositPerByte")?
            == [
              69u8, 210u8, 255u8, 182u8, 12u8, 79u8, 43u8, 46u8, 70u8, 71u8, 52u8, 30u8, 32u8,
              199u8, 55u8, 206u8, 250u8, 121u8, 54u8, 49u8, 211u8, 55u8, 221u8, 115u8, 136u8, 13u8,
              113u8, 134u8, 114u8, 93u8, 103u8, 90u8,
            ]
          {
            let pallet = metadata.pallet("Assets")?;
            let constant = pallet.constant("MetadataDepositPerByte")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The amount of funds that must be reserved when creating a new approval."]
        pub fn approval_deposit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Assets", "ApprovalDeposit")?
            == [
              141u8, 236u8, 210u8, 24u8, 60u8, 44u8, 154u8, 161u8, 49u8, 60u8, 185u8, 224u8, 159u8,
              204u8, 188u8, 101u8, 116u8, 119u8, 181u8, 183u8, 193u8, 246u8, 90u8, 9u8, 30u8,
              178u8, 96u8, 129u8, 61u8, 74u8, 83u8, 160u8,
            ]
          {
            let pallet = metadata.pallet("Assets")?;
            let constant = pallet.constant("ApprovalDeposit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum length of a name or symbol stored on-chain."]
        pub fn string_limit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Assets", "StringLimit")?
            == [
              64u8, 204u8, 1u8, 240u8, 39u8, 64u8, 238u8, 105u8, 253u8, 194u8, 239u8, 211u8, 82u8,
              163u8, 118u8, 129u8, 51u8, 252u8, 113u8, 145u8, 46u8, 73u8, 211u8, 136u8, 160u8,
              117u8, 90u8, 181u8, 166u8, 203u8, 244u8, 185u8,
            ]
          {
            let pallet = metadata.pallet("Assets")?;
            let constant = pallet.constant("StringLimit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod bags_list {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Rebag {
        pub dislocated: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for Rebag {
        const PALLET: &'static str = "BagsList";
        const FUNCTION: &'static str = "rebag";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct PutInFrontOf {
        pub lighter: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for PutInFrontOf {
        const PALLET: &'static str = "BagsList";
        const FUNCTION: &'static str = "put_in_front_of";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Declare that some `dislocated` account has, through rewards or penalties, sufficiently"]
        #[doc = "changed its score that it should properly fall into a different bag than its current"]
        #[doc = "one."]
        #[doc = ""]
        #[doc = "Anyone can call this function about any potentially dislocated account."]
        #[doc = ""]
        #[doc = "Will never return an error; if `dislocated` does not exist or doesn't need a rebag, then"]
        #[doc = "it is a noop and fees are still collected from `origin`."]
        pub fn rebag(
          &self,
          dislocated: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Rebag, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Rebag>()?
          };
          if runtime_call_hash
            == [
              46u8, 138u8, 28u8, 6u8, 58u8, 153u8, 5u8, 41u8, 44u8, 7u8, 228u8, 72u8, 135u8, 184u8,
              185u8, 132u8, 146u8, 181u8, 47u8, 166u8, 149u8, 21u8, 155u8, 29u8, 159u8, 79u8, 83u8,
              137u8, 156u8, 17u8, 60u8, 23u8,
            ]
          {
            let call = Rebag { dislocated };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Move the caller's Id directly in front of `lighter`."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_ and can only be called by the Id of"]
        #[doc = "the account going in front of `lighter`."]
        #[doc = ""]
        #[doc = "Only works if"]
        #[doc = "- both nodes are within the same bag,"]
        #[doc = "- and `origin` has a greater `Score` than `lighter`."]
        pub fn put_in_front_of(
          &self,
          lighter: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, PutInFrontOf, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<PutInFrontOf>()?
          };
          if runtime_call_hash
            == [
              79u8, 254u8, 222u8, 19u8, 17u8, 80u8, 7u8, 68u8, 54u8, 9u8, 23u8, 133u8, 108u8, 29u8,
              166u8, 177u8, 230u8, 247u8, 226u8, 189u8, 3u8, 241u8, 100u8, 178u8, 234u8, 204u8,
              118u8, 215u8, 84u8, 28u8, 21u8, 136u8,
            ]
          {
            let call = PutInFrontOf { lighter };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_bags_list::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Moved an account from one bag to another."]
      pub struct Rebagged {
        pub who: ::subxt::sp_core::crypto::AccountId32,
        pub from: ::core::primitive::u64,
        pub to: ::core::primitive::u64,
      }
      impl ::subxt::Event for Rebagged {
        const PALLET: &'static str = "BagsList";
        const EVENT: &'static str = "Rebagged";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct ListNodes<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for ListNodes<'_> {
        const PALLET: &'static str = "BagsList";
        const STORAGE: &'static str = "ListNodes";
        type Value = runtime_types::pallet_bags_list::list::Node;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct CounterForListNodes;
      impl ::subxt::StorageEntry for CounterForListNodes {
        const PALLET: &'static str = "BagsList";
        const STORAGE: &'static str = "CounterForListNodes";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ListBags<'a>(pub &'a ::core::primitive::u64);
      impl ::subxt::StorageEntry for ListBags<'_> {
        const PALLET: &'static str = "BagsList";
        const STORAGE: &'static str = "ListBags";
        type Value = runtime_types::pallet_bags_list::list::Bag;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Twox64Concat,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " A single node, within some bag."]
        #[doc = ""]
        #[doc = " Nodes store links forward and back within their respective bags."]
        pub async fn list_nodes(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::pallet_bags_list::list::Node>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ListNodes>()?
          };
          if runtime_storage_hash
            == [
              114u8, 219u8, 206u8, 128u8, 160u8, 134u8, 95u8, 214u8, 195u8, 15u8, 140u8, 174u8,
              89u8, 85u8, 191u8, 85u8, 96u8, 58u8, 214u8, 128u8, 6u8, 238u8, 148u8, 141u8, 206u8,
              107u8, 68u8, 41u8, 35u8, 246u8, 169u8, 209u8,
            ]
          {
            let entry = ListNodes(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " A single node, within some bag."]
        #[doc = ""]
        #[doc = " Nodes store links forward and back within their respective bags."]
        pub async fn list_nodes_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, ListNodes<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ListNodes>()?
          };
          if runtime_storage_hash
            == [
              114u8, 219u8, 206u8, 128u8, 160u8, 134u8, 95u8, 214u8, 195u8, 15u8, 140u8, 174u8,
              89u8, 85u8, 191u8, 85u8, 96u8, 58u8, 214u8, 128u8, 6u8, 238u8, 148u8, 141u8, 206u8,
              107u8, 68u8, 41u8, 35u8, 246u8, 169u8, 209u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Counter for the related counted storage map"]
        pub async fn counter_for_list_nodes(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CounterForListNodes>()?
          };
          if runtime_storage_hash
            == [
              156u8, 168u8, 97u8, 33u8, 84u8, 117u8, 220u8, 89u8, 62u8, 182u8, 24u8, 88u8, 231u8,
              244u8, 41u8, 19u8, 210u8, 131u8, 87u8, 0u8, 241u8, 230u8, 160u8, 142u8, 128u8, 153u8,
              83u8, 36u8, 88u8, 247u8, 70u8, 130u8,
            ]
          {
            let entry = CounterForListNodes;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " A bag stored in storage."]
        #[doc = ""]
        #[doc = " Stores a `Bag` struct, which stores head and tail pointers to itself."]
        pub async fn list_bags(
          &self,
          _0: &::core::primitive::u64,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<runtime_types::pallet_bags_list::list::Bag>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ListBags>()?
          };
          if runtime_storage_hash
            == [
              117u8, 35u8, 42u8, 116u8, 5u8, 68u8, 168u8, 75u8, 112u8, 29u8, 54u8, 49u8, 169u8,
              103u8, 22u8, 163u8, 53u8, 122u8, 181u8, 32u8, 97u8, 41u8, 56u8, 89u8, 77u8, 200u8,
              0u8, 123u8, 226u8, 178u8, 81u8, 138u8,
            ]
          {
            let entry = ListBags(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " A bag stored in storage."]
        #[doc = ""]
        #[doc = " Stores a `Bag` struct, which stores head and tail pointers to itself."]
        pub async fn list_bags_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, ListBags<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ListBags>()?
          };
          if runtime_storage_hash
            == [
              117u8, 35u8, 42u8, 116u8, 5u8, 68u8, 168u8, 75u8, 112u8, 29u8, 54u8, 49u8, 169u8,
              103u8, 22u8, 163u8, 53u8, 122u8, 181u8, 32u8, 97u8, 41u8, 56u8, 89u8, 77u8, 200u8,
              0u8, 123u8, 226u8, 178u8, 81u8, 138u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The list of thresholds separating the various bags."]
        #[doc = ""]
        #[doc = " Ids are separated into unsorted bags according to their score. This specifies the"]
        #[doc = " thresholds separating the bags. An id's bag is the largest bag for which the id's score"]
        #[doc = " is less than or equal to its upper threshold."]
        #[doc = ""]
        #[doc = " When ids are iterated, higher bags are iterated completely before lower bags. This means"]
        #[doc = " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower"]
        #[doc = " score, but peer ids within a particular bag are sorted in insertion order."]
        #[doc = ""]
        #[doc = " # Expressing the constant"]
        #[doc = ""]
        #[doc = " This constant must be sorted in strictly increasing order. Duplicate items are not"]
        #[doc = " permitted."]
        #[doc = ""]
        #[doc = " There is an implied upper limit of `Score::MAX`; that value does not need to be"]
        #[doc = " specified within the bag. For any two threshold lists, if one ends with"]
        #[doc = " `Score::MAX`, the other one does not, and they are otherwise equal, the two"]
        #[doc = " lists will behave identically."]
        #[doc = ""]
        #[doc = " # Calculation"]
        #[doc = ""]
        #[doc = " It is recommended to generate the set of thresholds in a geometric series, such that"]
        #[doc = " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *"]
        #[doc = " constant_ratio).max(threshold[k] + 1)` for all `k`."]
        #[doc = ""]
        #[doc = " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation."]
        #[doc = ""]
        #[doc = " # Examples"]
        #[doc = ""]
        #[doc = " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and"]
        #[doc = "   iteration is strictly in insertion order."]
        #[doc = " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to"]
        #[doc = "   the procedure given above, then the constant ratio is equal to 2."]
        #[doc = " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to"]
        #[doc = "   the procedure given above, then the constant ratio is approximately equal to 1.248."]
        #[doc = " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall"]
        #[doc = "   into bag 0, an id with score 2 will fall into bag 1, etc."]
        #[doc = ""]
        #[doc = " # Migration"]
        #[doc = ""]
        #[doc = " In the event that this list ever changes, a copy of the old bags list must be retained."]
        #[doc = " With that `List::migrate` can be called, which will perform the appropriate migration."]
        pub fn bag_thresholds(
          &self,
        ) -> ::core::result::Result<::std::vec::Vec<::core::primitive::u64>, ::subxt::BasicError>
        {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("BagsList", "BagThresholds")?
            == [
              80u8, 37u8, 123u8, 159u8, 45u8, 82u8, 154u8, 139u8, 22u8, 202u8, 109u8, 255u8, 123u8,
              120u8, 145u8, 135u8, 109u8, 82u8, 104u8, 199u8, 168u8, 41u8, 74u8, 48u8, 148u8,
              250u8, 126u8, 195u8, 219u8, 125u8, 200u8, 236u8,
            ]
          {
            let pallet = metadata.pallet("BagsList")?;
            let constant = pallet.constant("BagThresholds")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod preimage {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct NotePreimage {
        pub bytes: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Call for NotePreimage {
        const PALLET: &'static str = "Preimage";
        const FUNCTION: &'static str = "note_preimage";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct UnnotePreimage {
        pub hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for UnnotePreimage {
        const PALLET: &'static str = "Preimage";
        const FUNCTION: &'static str = "unnote_preimage";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RequestPreimage {
        pub hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for RequestPreimage {
        const PALLET: &'static str = "Preimage";
        const FUNCTION: &'static str = "request_preimage";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct UnrequestPreimage {
        pub hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for UnrequestPreimage {
        const PALLET: &'static str = "Preimage";
        const FUNCTION: &'static str = "unrequest_preimage";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Register a preimage on-chain."]
        #[doc = ""]
        #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
        #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
        pub fn note_preimage(
          &self,
          bytes: ::std::vec::Vec<::core::primitive::u8>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, NotePreimage, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<NotePreimage>()?
          };
          if runtime_call_hash
            == [
              116u8, 66u8, 88u8, 251u8, 187u8, 86u8, 82u8, 136u8, 215u8, 82u8, 240u8, 255u8, 70u8,
              190u8, 116u8, 187u8, 232u8, 168u8, 125u8, 234u8, 8u8, 21u8, 247u8, 195u8, 167u8,
              237u8, 27u8, 202u8, 123u8, 25u8, 225u8, 131u8,
            ]
          {
            let call = NotePreimage { bytes };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Clear an unrequested preimage from the runtime storage."]
        pub fn unnote_preimage(
          &self,
          hash: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, UnnotePreimage, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<UnnotePreimage>()?
          };
          if runtime_call_hash
            == [
              162u8, 195u8, 220u8, 134u8, 147u8, 150u8, 145u8, 130u8, 231u8, 104u8, 83u8, 70u8,
              42u8, 90u8, 248u8, 61u8, 223u8, 63u8, 162u8, 219u8, 92u8, 248u8, 179u8, 99u8, 158u8,
              252u8, 89u8, 59u8, 115u8, 130u8, 73u8, 21u8,
            ]
          {
            let call = UnnotePreimage { hash };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
        #[doc = ""]
        #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
        #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
        pub fn request_preimage(
          &self,
          hash: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RequestPreimage, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RequestPreimage>()?
          };
          if runtime_call_hash
            == [
              186u8, 108u8, 235u8, 145u8, 104u8, 29u8, 22u8, 33u8, 21u8, 121u8, 32u8, 75u8, 141u8,
              125u8, 205u8, 186u8, 210u8, 184u8, 134u8, 248u8, 74u8, 175u8, 104u8, 91u8, 247u8,
              151u8, 70u8, 192u8, 183u8, 163u8, 245u8, 180u8,
            ]
          {
            let call = RequestPreimage { hash };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Clear a previously made request for a preimage."]
        #[doc = ""]
        #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
        pub fn unrequest_preimage(
          &self,
          hash: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            UnrequestPreimage,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<UnrequestPreimage>()?
          };
          if runtime_call_hash
            == [
              160u8, 6u8, 6u8, 198u8, 77u8, 37u8, 28u8, 86u8, 240u8, 160u8, 128u8, 123u8, 144u8,
              150u8, 150u8, 60u8, 107u8, 148u8, 189u8, 192u8, 125u8, 25u8, 55u8, 212u8, 193u8,
              212u8, 198u8, 131u8, 113u8, 37u8, 213u8, 152u8,
            ]
          {
            let call = UnrequestPreimage { hash };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_preimage::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A preimage has been noted."]
      pub struct Noted {
        pub hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for Noted {
        const PALLET: &'static str = "Preimage";
        const EVENT: &'static str = "Noted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A preimage has been requested."]
      pub struct Requested {
        pub hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for Requested {
        const PALLET: &'static str = "Preimage";
        const EVENT: &'static str = "Requested";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A preimage has ben cleared."]
      pub struct Cleared {
        pub hash: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for Cleared {
        const PALLET: &'static str = "Preimage";
        const EVENT: &'static str = "Cleared";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct StatusFor<'a>(pub &'a ::subxt::sp_core::H256);
      impl ::subxt::StorageEntry for StatusFor<'_> {
        const PALLET: &'static str = "Preimage";
        const STORAGE: &'static str = "StatusFor";
        type Value = runtime_types::pallet_preimage::RequestStatus<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u128,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Identity,
          )])
        }
      }
      pub struct PreimageFor<'a>(pub &'a ::subxt::sp_core::H256);
      impl ::subxt::StorageEntry for PreimageFor<'_> {
        const PALLET: &'static str = "Preimage";
        const STORAGE: &'static str = "PreimageFor";
        type Value =
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Identity,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The request status of a given hash."]
        pub async fn status_for(
          &self,
          _0: &::subxt::sp_core::H256,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::pallet_preimage::RequestStatus<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StatusFor>()?
          };
          if runtime_storage_hash
            == [
              239u8, 53u8, 52u8, 248u8, 196u8, 74u8, 99u8, 113u8, 135u8, 186u8, 100u8, 46u8, 246u8,
              245u8, 160u8, 102u8, 81u8, 96u8, 85u8, 11u8, 27u8, 53u8, 139u8, 8u8, 18u8, 208u8,
              241u8, 139u8, 162u8, 239u8, 113u8, 28u8,
            ]
          {
            let entry = StatusFor(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The request status of a given hash."]
        pub async fn status_for_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, StatusFor<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StatusFor>()?
          };
          if runtime_storage_hash
            == [
              239u8, 53u8, 52u8, 248u8, 196u8, 74u8, 99u8, 113u8, 135u8, 186u8, 100u8, 46u8, 246u8,
              245u8, 160u8, 102u8, 81u8, 96u8, 85u8, 11u8, 27u8, 53u8, 139u8, 8u8, 18u8, 208u8,
              241u8, 139u8, 162u8, 239u8, 113u8, 28u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The preimages stored by this pallet."]
        pub async fn preimage_for(
          &self,
          _0: &::subxt::sp_core::H256,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<PreimageFor>()?
          };
          if runtime_storage_hash
            == [
              153u8, 48u8, 185u8, 144u8, 57u8, 68u8, 133u8, 92u8, 225u8, 172u8, 36u8, 62u8, 152u8,
              162u8, 15u8, 139u8, 140u8, 82u8, 118u8, 63u8, 31u8, 158u8, 197u8, 26u8, 141u8, 210u8,
              150u8, 82u8, 109u8, 100u8, 144u8, 56u8,
            ]
          {
            let entry = PreimageFor(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The preimages stored by this pallet."]
        pub async fn preimage_for_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, PreimageFor<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<PreimageFor>()?
          };
          if runtime_storage_hash
            == [
              153u8, 48u8, 185u8, 144u8, 57u8, 68u8, 133u8, 92u8, 225u8, 172u8, 36u8, 62u8, 152u8,
              162u8, 15u8, 139u8, 140u8, 82u8, 118u8, 63u8, 31u8, 158u8, 197u8, 26u8, 141u8, 210u8,
              150u8, 82u8, 109u8, 100u8, 144u8, 56u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod sudo {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Sudo {
        pub call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
      }
      impl ::subxt::Call for Sudo {
        const PALLET: &'static str = "Sudo";
        const FUNCTION: &'static str = "sudo";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SudoUncheckedWeight {
        pub call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
        pub weight: ::core::primitive::u64,
      }
      impl ::subxt::Call for SudoUncheckedWeight {
        const PALLET: &'static str = "Sudo";
        const FUNCTION: &'static str = "sudo_unchecked_weight";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetKey {
        pub new: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
      }
      impl ::subxt::Call for SetKey {
        const PALLET: &'static str = "Sudo";
        const FUNCTION: &'static str = "set_key";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SudoAs {
        pub who: ::subxt::sp_runtime::MultiAddress<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >,
        pub call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
      }
      impl ::subxt::Call for SudoAs {
        const PALLET: &'static str = "Sudo";
        const FUNCTION: &'static str = "sudo_as";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "- Limited storage reads."]
        #[doc = "- One DB write (event)."]
        #[doc = "- Weight of derivative `call` execution + 10,000."]
        #[doc = "# </weight>"]
        pub fn sudo(
          &self,
          call: runtime_types::lagoon_runtime::Call,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Sudo, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Sudo>()?
          };
          if runtime_call_hash
            == [
              45u8, 27u8, 116u8, 179u8, 23u8, 164u8, 200u8, 34u8, 54u8, 34u8, 110u8, 106u8, 84u8,
              26u8, 236u8, 45u8, 125u8, 24u8, 197u8, 39u8, 89u8, 136u8, 235u8, 192u8, 62u8, 110u8,
              127u8, 249u8, 48u8, 10u8, 89u8, 159u8,
            ]
          {
            let call = Sudo {
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
        #[doc = "This function does not check the weight of the call, and instead allows the"]
        #[doc = "Sudo user to specify the weight of the call."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "- The weight of this call is defined by the caller."]
        #[doc = "# </weight>"]
        pub fn sudo_unchecked_weight(
          &self,
          call: runtime_types::lagoon_runtime::Call,
          weight: ::core::primitive::u64,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            SudoUncheckedWeight,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SudoUncheckedWeight>()?
          };
          if runtime_call_hash
            == [
              100u8, 130u8, 85u8, 59u8, 44u8, 185u8, 8u8, 114u8, 164u8, 211u8, 127u8, 229u8, 88u8,
              121u8, 175u8, 107u8, 18u8, 63u8, 240u8, 228u8, 247u8, 203u8, 129u8, 92u8, 174u8,
              241u8, 28u8, 60u8, 128u8, 165u8, 118u8, 170u8,
            ]
          {
            let call = SudoUncheckedWeight {
              call: ::std::boxed::Box::new(call),
              weight,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
        #[doc = "key."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "- Limited storage reads."]
        #[doc = "- One DB change."]
        #[doc = "# </weight>"]
        pub fn set_key(
          &self,
          new: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetKey, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetKey>()?
          };
          if runtime_call_hash
            == [
              142u8, 228u8, 169u8, 153u8, 89u8, 247u8, 116u8, 76u8, 245u8, 199u8, 2u8, 131u8,
              195u8, 249u8, 201u8, 178u8, 212u8, 253u8, 144u8, 48u8, 172u8, 25u8, 184u8, 72u8,
              32u8, 150u8, 161u8, 116u8, 72u8, 162u8, 236u8, 131u8,
            ]
          {
            let call = SetKey { new };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
        #[doc = "a given account."]
        #[doc = ""]
        #[doc = "The dispatch origin for this call must be _Signed_."]
        #[doc = ""]
        #[doc = "# <weight>"]
        #[doc = "- O(1)."]
        #[doc = "- Limited storage reads."]
        #[doc = "- One DB write (event)."]
        #[doc = "- Weight of derivative `call` execution + 10,000."]
        #[doc = "# </weight>"]
        pub fn sudo_as(
          &self,
          who: ::subxt::sp_runtime::MultiAddress<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
          >,
          call: runtime_types::lagoon_runtime::Call,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SudoAs, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SudoAs>()?
          };
          if runtime_call_hash
            == [
              1u8, 41u8, 104u8, 252u8, 129u8, 161u8, 135u8, 13u8, 154u8, 9u8, 89u8, 29u8, 94u8,
              238u8, 222u8, 115u8, 155u8, 214u8, 138u8, 37u8, 49u8, 73u8, 110u8, 207u8, 209u8,
              189u8, 154u8, 128u8, 36u8, 179u8, 175u8, 202u8,
            ]
          {
            let call = SudoAs {
              who,
              call: ::std::boxed::Box::new(call),
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_sudo::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A sudo just took place. \\[result\\]"]
      pub struct Sudid {
        pub sudo_result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
      }
      impl ::subxt::Event for Sudid {
        const PALLET: &'static str = "Sudo";
        const EVENT: &'static str = "Sudid";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
      pub struct KeyChanged {
        pub old_sudoer: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
      }
      impl ::subxt::Event for KeyChanged {
        const PALLET: &'static str = "Sudo";
        const EVENT: &'static str = "KeyChanged";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A sudo just took place. \\[result\\]"]
      pub struct SudoAsDone {
        pub sudo_result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
      }
      impl ::subxt::Event for SudoAsDone {
        const PALLET: &'static str = "Sudo";
        const EVENT: &'static str = "SudoAsDone";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Key;
      impl ::subxt::StorageEntry for Key {
        const PALLET: &'static str = "Sudo";
        const STORAGE: &'static str = "Key";
        type Value = ::subxt::sp_core::crypto::AccountId32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The `AccountId` of the sudo key."]
        pub async fn key(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Key>()?
          };
          if runtime_storage_hash
            == [
              222u8, 90u8, 158u8, 233u8, 184u8, 23u8, 141u8, 135u8, 81u8, 187u8, 47u8, 100u8, 30u8,
              81u8, 239u8, 197u8, 249u8, 253u8, 73u8, 207u8, 161u8, 141u8, 174u8, 59u8, 74u8,
              181u8, 10u8, 90u8, 22u8, 109u8, 62u8, 27u8,
            ]
          {
            let entry = Key;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod tidefi {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Transfer {
        pub destination_id: ::subxt::sp_core::crypto::AccountId32,
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Call for Transfer {
        const PALLET: &'static str = "Tidefi";
        const FUNCTION: &'static str = "transfer";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Withdrawal {
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub amount: ::core::primitive::u128,
        pub external_address: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Call for Withdrawal {
        const PALLET: &'static str = "Tidefi";
        const FUNCTION: &'static str = "withdrawal";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Swap {
        pub currency_id_from: runtime_types::tidefi_primitives::CurrencyId,
        pub amount_from: ::core::primitive::u128,
        pub currency_id_to: runtime_types::tidefi_primitives::CurrencyId,
        pub amount_to: ::core::primitive::u128,
        pub swap_type: runtime_types::tidefi_primitives::SwapType,
        pub slippage_tolerance:
          ::core::option::Option<runtime_types::sp_arithmetic::per_things::Permill>,
      }
      impl ::subxt::Call for Swap {
        const PALLET: &'static str = "Tidefi";
        const FUNCTION: &'static str = "swap";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct CancelSwap {
        pub request_id: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for CancelSwap {
        const PALLET: &'static str = "Tidefi";
        const FUNCTION: &'static str = "cancel_swap";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Transfer funds from one account into another."]
        #[doc = ""]
        #[doc = "- `destination_id`: Destination account"]
        #[doc = "- `currency_id`: The currency to transfer"]
        #[doc = "- `amount`: The amount to transfer"]
        #[doc = ""]
        #[doc = "Emits `Transfer` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn transfer(
          &self,
          destination_id: ::subxt::sp_core::crypto::AccountId32,
          currency_id: runtime_types::tidefi_primitives::CurrencyId,
          amount: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Transfer, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Transfer>()?
          };
          if runtime_call_hash
            == [
              249u8, 171u8, 167u8, 176u8, 37u8, 143u8, 148u8, 188u8, 68u8, 123u8, 34u8, 49u8,
              112u8, 184u8, 182u8, 117u8, 120u8, 216u8, 59u8, 95u8, 233u8, 108u8, 47u8, 184u8,
              12u8, 29u8, 178u8, 44u8, 114u8, 251u8, 176u8, 11u8,
            ]
          {
            let call = Transfer {
              destination_id,
              currency_id,
              amount,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Submit asset withdrawal to the Quorum."]
        #[doc = ""]
        #[doc = "- `currency_id`: The currency to withdraw."]
        #[doc = "- `amount`: The amount to transfer"]
        #[doc = "- `external_address`: External address where to send funds."]
        #[doc = ""]
        #[doc = "Emits `Withdrawal` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn withdrawal(
          &self,
          currency_id: runtime_types::tidefi_primitives::CurrencyId,
          amount: ::core::primitive::u128,
          external_address: ::std::vec::Vec<::core::primitive::u8>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Withdrawal, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Withdrawal>()?
          };
          if runtime_call_hash
            == [
              175u8, 10u8, 232u8, 2u8, 26u8, 95u8, 245u8, 59u8, 112u8, 205u8, 189u8, 217u8, 232u8,
              73u8, 249u8, 95u8, 95u8, 208u8, 186u8, 20u8, 14u8, 178u8, 100u8, 162u8, 96u8, 252u8,
              188u8, 10u8, 119u8, 113u8, 3u8, 134u8,
            ]
          {
            let call = Withdrawal {
              currency_id,
              amount,
              external_address,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Swap through the market makers."]
        #[doc = ""]
        #[doc = "This will register a new request and will be queued for the oracle, do"]
        #[doc = "not expect an immediate response."]
        #[doc = ""]
        #[doc = "- `currency_id_from`: The currency to send."]
        #[doc = "- `amount_from`: The amount to send."]
        #[doc = "- `currency_id_to`: The currency to receive."]
        #[doc = "- `amount_to`: The expected amount to receive with a 10% margin."]
        #[doc = ""]
        #[doc = "Emits `Swap` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn swap(
          &self,
          currency_id_from: runtime_types::tidefi_primitives::CurrencyId,
          amount_from: ::core::primitive::u128,
          currency_id_to: runtime_types::tidefi_primitives::CurrencyId,
          amount_to: ::core::primitive::u128,
          swap_type: runtime_types::tidefi_primitives::SwapType,
          slippage_tolerance: ::core::option::Option<
            runtime_types::sp_arithmetic::per_things::Permill,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Swap, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Swap>()?
          };
          if runtime_call_hash
            == [
              148u8, 33u8, 223u8, 130u8, 253u8, 132u8, 185u8, 61u8, 110u8, 71u8, 68u8, 137u8,
              208u8, 1u8, 44u8, 232u8, 179u8, 187u8, 47u8, 239u8, 171u8, 164u8, 57u8, 202u8, 170u8,
              211u8, 156u8, 214u8, 223u8, 66u8, 161u8, 64u8,
            ]
          {
            let call = Swap {
              currency_id_from,
              amount_from,
              currency_id_to,
              amount_to,
              swap_type,
              slippage_tolerance,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Cancel swap and release funds."]
        #[doc = ""]
        #[doc = "This will cancel a swap request and release remaining funds, if the swap is partially filled."]
        #[doc = ""]
        #[doc = "- `request_id`: The request ID to cancel."]
        #[doc = ""]
        #[doc = "Emits `SwapCancelled` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn cancel_swap(
          &self,
          request_id: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, CancelSwap, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CancelSwap>()?
          };
          if runtime_call_hash
            == [
              153u8, 23u8, 73u8, 248u8, 0u8, 168u8, 254u8, 228u8, 251u8, 67u8, 110u8, 123u8, 224u8,
              204u8, 169u8, 106u8, 40u8, 181u8, 63u8, 230u8, 87u8, 154u8, 201u8, 172u8, 137u8,
              175u8, 53u8, 130u8, 108u8, 231u8, 147u8, 200u8,
            ]
          {
            let call = CancelSwap { request_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_tidefi::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Event emitted when transfer is processed."]
      pub struct Transfer {
        pub from_account_id: ::subxt::sp_core::crypto::AccountId32,
        pub to_account_id: ::subxt::sp_core::crypto::AccountId32,
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for Transfer {
        const PALLET: &'static str = "Tidefi";
        const EVENT: &'static str = "Transfer";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Event emitted when widthdraw is initialized."]
      pub struct Withdrawal {
        pub account: ::subxt::sp_core::crypto::AccountId32,
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub amount: ::core::primitive::u128,
        pub external_address: ::std::vec::Vec<::core::primitive::u8>,
      }
      impl ::subxt::Event for Withdrawal {
        const PALLET: &'static str = "Tidefi";
        const EVENT: &'static str = "Withdrawal";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Event emitted when swap is initialized."]
      pub struct Swap {
        pub request_id: ::subxt::sp_core::H256,
        pub account: ::subxt::sp_core::crypto::AccountId32,
        pub currency_id_from: runtime_types::tidefi_primitives::CurrencyId,
        pub amount_from: ::core::primitive::u128,
        pub currency_id_to: runtime_types::tidefi_primitives::CurrencyId,
        pub amount_to: ::core::primitive::u128,
        pub extrinsic_hash: [::core::primitive::u8; 32usize],
        pub slippage_tolerance: runtime_types::sp_arithmetic::per_things::Permill,
        pub swap_type: runtime_types::tidefi_primitives::SwapType,
        pub is_market_maker: ::core::primitive::bool,
      }
      impl ::subxt::Event for Swap {
        const PALLET: &'static str = "Tidefi";
        const EVENT: &'static str = "Swap";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "User cancelled the initial swap and the funds has been released"]
      pub struct SwapCancelled {
        pub request_id: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for SwapCancelled {
        const PALLET: &'static str = "Tidefi";
        const EVENT: &'static str = "SwapCancelled";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
      }
    }
  }
  pub mod tidefi_staking {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Stake {
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub amount: ::core::primitive::u128,
        pub duration: ::core::primitive::u32,
      }
      impl ::subxt::Call for Stake {
        const PALLET: &'static str = "TidefiStaking";
        const FUNCTION: &'static str = "stake";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Unstake {
        pub stake_id: ::subxt::sp_core::H256,
        pub force_unstake: ::core::primitive::bool,
      }
      impl ::subxt::Call for Unstake {
        const PALLET: &'static str = "TidefiStaking";
        const FUNCTION: &'static str = "unstake";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Stake currency"]
        #[doc = ""]
        #[doc = "- `currency_id`: The currency to stake"]
        #[doc = "- `amount`: The amount to stake"]
        #[doc = "- `duration`: The duration is in numbers of blocks. (blocks are ~6seconds)"]
        #[doc = ""]
        #[doc = "Emits `Staked` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn stake(
          &self,
          currency_id: runtime_types::tidefi_primitives::CurrencyId,
          amount: ::core::primitive::u128,
          duration: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Stake, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Stake>()?
          };
          if runtime_call_hash
            == [
              70u8, 58u8, 132u8, 122u8, 246u8, 179u8, 208u8, 135u8, 203u8, 6u8, 97u8, 41u8, 166u8,
              251u8, 21u8, 17u8, 130u8, 179u8, 36u8, 232u8, 38u8, 95u8, 5u8, 127u8, 115u8, 230u8,
              127u8, 160u8, 185u8, 70u8, 129u8, 239u8,
            ]
          {
            let call = Stake {
              currency_id,
              amount,
              duration,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Unstake"]
        #[doc = ""]
        #[doc = "- `stake_id`: Unique Stake ID"]
        #[doc = "- `force_unstake`: Unstake with extra fees, even if the staking is not expired"]
        #[doc = ""]
        #[doc = "Emits `Unstaked` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn unstake(
          &self,
          stake_id: ::subxt::sp_core::H256,
          force_unstake: ::core::primitive::bool,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Unstake, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Unstake>()?
          };
          if runtime_call_hash
            == [
              55u8, 64u8, 16u8, 184u8, 39u8, 92u8, 173u8, 57u8, 2u8, 179u8, 228u8, 27u8, 47u8,
              177u8, 136u8, 48u8, 235u8, 180u8, 102u8, 54u8, 113u8, 125u8, 33u8, 126u8, 225u8,
              103u8, 236u8, 106u8, 34u8, 241u8, 2u8, 47u8,
            ]
          {
            let call = Unstake {
              stake_id,
              force_unstake,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_tidefi_stake::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The assets get staked successfully"]
      pub struct Staked {
        pub request_id: ::subxt::sp_core::H256,
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub amount: ::core::primitive::u128,
        pub duration: ::core::primitive::u32,
      }
      impl ::subxt::Event for Staked {
        const PALLET: &'static str = "TidefiStaking";
        const EVENT: &'static str = "Staked";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The assets unstaking has been queued"]
      pub struct UnstakeQueued {
        pub request_id: ::subxt::sp_core::H256,
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for UnstakeQueued {
        const PALLET: &'static str = "TidefiStaking";
        const EVENT: &'static str = "UnstakeQueued";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The assets get `unstaked` successfully"]
      pub struct Unstaked {
        pub request_id: ::subxt::sp_core::H256,
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub initial_balance: ::core::primitive::u128,
        pub final_balance: ::core::primitive::u128,
      }
      impl ::subxt::Event for Unstaked {
        const PALLET: &'static str = "TidefiStaking";
        const EVENT: &'static str = "Unstaked";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct StakingPool<'a>(pub &'a runtime_types::tidefi_primitives::CurrencyId);
      impl ::subxt::StorageEntry for StakingPool<'_> {
        const PALLET: &'static str = "TidefiStaking";
        const STORAGE: &'static str = "StakingPool";
        type Value = ::core::primitive::u128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct StakingPeriodRewards;
      impl ::subxt::StorageEntry for StakingPeriodRewards {
        const PALLET: &'static str = "TidefiStaking";
        const STORAGE: &'static str = "StakingPeriodRewards";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
          ::core::primitive::u32,
          runtime_types::sp_arithmetic::per_things::Percent,
        )>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StakingCurrencyMeta<'a>(pub &'a runtime_types::tidefi_primitives::CurrencyId);
      impl ::subxt::StorageEntry for StakingCurrencyMeta<'_> {
        const PALLET: &'static str = "TidefiStaking";
        const STORAGE: &'static str = "StakingCurrencyMeta";
        type Value = runtime_types::tidefi_primitives::StakeCurrencyMeta<::core::primitive::u128>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct UnstakeFee;
      impl ::subxt::StorageEntry for UnstakeFee {
        const PALLET: &'static str = "TidefiStaking";
        const STORAGE: &'static str = "UnstakeFee";
        type Value = runtime_types::sp_arithmetic::per_things::Percent;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct InterestCompoundLastSession;
      impl ::subxt::StorageEntry for InterestCompoundLastSession {
        const PALLET: &'static str = "TidefiStaking";
        const STORAGE: &'static str = "InterestCompoundLastSession";
        type Value = ::core::primitive::u64;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct UnstakeQueue;
      impl ::subxt::StorageEntry for UnstakeQueue {
        const PALLET: &'static str = "TidefiStaking";
        const STORAGE: &'static str = "UnstakeQueue";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
          ::subxt::sp_core::crypto::AccountId32,
          ::subxt::sp_core::H256,
          ::core::primitive::u32,
        )>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct PendingStoredSessions<'a>(pub &'a ::core::primitive::u64);
      impl ::subxt::StorageEntry for PendingStoredSessions<'_> {
        const PALLET: &'static str = "TidefiStaking";
        const STORAGE: &'static str = "PendingStoredSessions";
        type Value = ();
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct CounterForPendingStoredSessions;
      impl ::subxt::StorageEntry for CounterForPendingStoredSessions {
        const PALLET: &'static str = "TidefiStaking";
        const STORAGE: &'static str = "CounterForPendingStoredSessions";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct SessionTotalFees<'a>(
        pub &'a ::core::primitive::u64,
        pub &'a runtime_types::tidefi_primitives::CurrencyId,
      );
      impl ::subxt::StorageEntry for SessionTotalFees<'_> {
        const PALLET: &'static str = "TidefiStaking";
        const STORAGE: &'static str = "SessionTotalFees";
        type Value = ::core::primitive::u128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Blake2_128Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Blake2_128Concat),
          ])
        }
      }
      pub struct AccountStakes<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for AccountStakes<'_> {
        const PALLET: &'static str = "TidefiStaking";
        const STORAGE: &'static str = "AccountStakes";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
          runtime_types::tidefi_primitives::Stake<::core::primitive::u128, ::core::primitive::u32>,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct CounterForAccountStakes;
      impl ::subxt::StorageEntry for CounterForAccountStakes {
        const PALLET: &'static str = "TidefiStaking";
        const STORAGE: &'static str = "CounterForAccountStakes";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Staking pool"]
        pub async fn staking_pool(
          &self,
          _0: &runtime_types::tidefi_primitives::CurrencyId,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::u128>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StakingPool>()?
          };
          if runtime_storage_hash
            == [
              105u8, 243u8, 208u8, 130u8, 181u8, 45u8, 28u8, 22u8, 124u8, 172u8, 110u8, 28u8,
              146u8, 155u8, 91u8, 140u8, 199u8, 6u8, 1u8, 59u8, 83u8, 51u8, 213u8, 252u8, 74u8,
              235u8, 111u8, 85u8, 230u8, 174u8, 240u8, 19u8,
            ]
          {
            let entry = StakingPool(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Staking pool"]
        pub async fn staking_pool_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, StakingPool<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StakingPool>()?
          };
          if runtime_storage_hash
            == [
              105u8, 243u8, 208u8, 130u8, 181u8, 45u8, 28u8, 22u8, 124u8, 172u8, 110u8, 28u8,
              146u8, 155u8, 91u8, 140u8, 199u8, 6u8, 1u8, 59u8, 83u8, 51u8, 213u8, 252u8, 74u8,
              235u8, 111u8, 85u8, 230u8, 174u8, 240u8, 19u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Staking rewards defined by the council"]
        pub async fn staking_period_rewards(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
            ::core::primitive::u32,
            runtime_types::sp_arithmetic::per_things::Percent,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StakingPeriodRewards>()?
          };
          if runtime_storage_hash
            == [
              137u8, 13u8, 229u8, 42u8, 4u8, 66u8, 15u8, 164u8, 62u8, 61u8, 218u8, 111u8, 242u8,
              7u8, 169u8, 91u8, 147u8, 17u8, 144u8, 64u8, 181u8, 142u8, 124u8, 174u8, 155u8, 140u8,
              228u8, 172u8, 201u8, 229u8, 98u8, 72u8,
            ]
          {
            let entry = StakingPeriodRewards;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Staking metadata defined by the council (minimum and maximum stake amount)"]
        pub async fn staking_currency_meta(
          &self,
          _0: &runtime_types::tidefi_primitives::CurrencyId,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::tidefi_primitives::StakeCurrencyMeta<::core::primitive::u128>,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StakingCurrencyMeta>()?
          };
          if runtime_storage_hash
            == [
              230u8, 10u8, 175u8, 219u8, 223u8, 157u8, 19u8, 2u8, 9u8, 79u8, 3u8, 29u8, 91u8,
              195u8, 52u8, 117u8, 162u8, 209u8, 119u8, 45u8, 233u8, 162u8, 241u8, 253u8, 116u8,
              186u8, 144u8, 191u8, 55u8, 77u8, 31u8, 175u8,
            ]
          {
            let entry = StakingCurrencyMeta(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Staking metadata defined by the council (minimum and maximum stake amount)"]
        pub async fn staking_currency_meta_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, StakingCurrencyMeta<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StakingCurrencyMeta>()?
          };
          if runtime_storage_hash
            == [
              230u8, 10u8, 175u8, 219u8, 223u8, 157u8, 19u8, 2u8, 9u8, 79u8, 3u8, 29u8, 91u8,
              195u8, 52u8, 117u8, 162u8, 209u8, 119u8, 45u8, 233u8, 162u8, 241u8, 253u8, 116u8,
              186u8, 144u8, 191u8, 55u8, 77u8, 31u8, 175u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The percentage of fee when unstake is done before the ending."]
        pub async fn unstake_fee(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::per_things::Percent,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<UnstakeFee>()?
          };
          if runtime_storage_hash
            == [
              83u8, 134u8, 72u8, 101u8, 153u8, 97u8, 113u8, 209u8, 216u8, 225u8, 196u8, 239u8,
              36u8, 177u8, 206u8, 8u8, 91u8, 36u8, 8u8, 91u8, 77u8, 129u8, 146u8, 252u8, 35u8,
              31u8, 69u8, 2u8, 134u8, 35u8, 202u8, 231u8,
            ]
          {
            let entry = UnstakeFee;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The last session we should compound the account interests."]
        pub async fn interest_compound_last_session(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<InterestCompoundLastSession>()?
          };
          if runtime_storage_hash
            == [
              94u8, 238u8, 28u8, 234u8, 156u8, 4u8, 143u8, 154u8, 98u8, 115u8, 129u8, 128u8, 22u8,
              121u8, 123u8, 203u8, 74u8, 129u8, 96u8, 156u8, 4u8, 148u8, 178u8, 204u8, 95u8, 35u8,
              59u8, 199u8, 241u8, 146u8, 12u8, 162u8,
            ]
          {
            let entry = InterestCompoundLastSession;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Manage which we should pay off to."]
        pub async fn unstake_queue(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
            ::subxt::sp_core::crypto::AccountId32,
            ::subxt::sp_core::H256,
            ::core::primitive::u32,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<UnstakeQueue>()?
          };
          if runtime_storage_hash
            == [
              71u8, 25u8, 207u8, 154u8, 45u8, 116u8, 50u8, 51u8, 142u8, 58u8, 184u8, 215u8, 137u8,
              91u8, 98u8, 68u8, 188u8, 102u8, 191u8, 171u8, 102u8, 198u8, 106u8, 225u8, 212u8,
              11u8, 26u8, 63u8, 188u8, 213u8, 96u8, 45u8,
            ]
          {
            let entry = UnstakeQueue;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Map from all pending stored sessions."]
        pub async fn pending_stored_sessions(
          &self,
          _0: &::core::primitive::u64,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::option::Option<()>, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<PendingStoredSessions>()?
          };
          if runtime_storage_hash
            == [
              5u8, 99u8, 214u8, 65u8, 109u8, 137u8, 233u8, 154u8, 52u8, 95u8, 154u8, 161u8, 225u8,
              96u8, 115u8, 44u8, 176u8, 120u8, 67u8, 104u8, 130u8, 141u8, 42u8, 179u8, 91u8, 156u8,
              141u8, 141u8, 218u8, 246u8, 160u8, 141u8,
            ]
          {
            let entry = PendingStoredSessions(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Map from all pending stored sessions."]
        pub async fn pending_stored_sessions_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, PendingStoredSessions<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<PendingStoredSessions>()?
          };
          if runtime_storage_hash
            == [
              5u8, 99u8, 214u8, 65u8, 109u8, 137u8, 233u8, 154u8, 52u8, 95u8, 154u8, 161u8, 225u8,
              96u8, 115u8, 44u8, 176u8, 120u8, 67u8, 104u8, 130u8, 141u8, 42u8, 179u8, 91u8, 156u8,
              141u8, 141u8, 218u8, 246u8, 160u8, 141u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Counter for the related counted storage map"]
        pub async fn counter_for_pending_stored_sessions(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CounterForPendingStoredSessions>()?
          };
          if runtime_storage_hash
            == [
              35u8, 175u8, 239u8, 114u8, 60u8, 172u8, 74u8, 190u8, 161u8, 48u8, 216u8, 61u8, 90u8,
              191u8, 0u8, 166u8, 20u8, 17u8, 169u8, 58u8, 227u8, 68u8, 108u8, 190u8, 80u8, 24u8,
              202u8, 122u8, 214u8, 101u8, 223u8, 214u8,
            ]
          {
            let entry = CounterForPendingStoredSessions;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The total fees for the session."]
        #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
        pub async fn session_total_fees(
          &self,
          _0: &::core::primitive::u64,
          _1: &runtime_types::tidefi_primitives::CurrencyId,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SessionTotalFees>()?
          };
          if runtime_storage_hash
            == [
              171u8, 248u8, 193u8, 89u8, 112u8, 202u8, 106u8, 214u8, 97u8, 212u8, 163u8, 147u8,
              6u8, 109u8, 44u8, 89u8, 6u8, 93u8, 51u8, 74u8, 154u8, 1u8, 16u8, 60u8, 100u8, 189u8,
              218u8, 145u8, 8u8, 216u8, 43u8, 107u8,
            ]
          {
            let entry = SessionTotalFees(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The total fees for the session."]
        #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
        pub async fn session_total_fees_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, SessionTotalFees<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SessionTotalFees>()?
          };
          if runtime_storage_hash
            == [
              171u8, 248u8, 193u8, 89u8, 112u8, 202u8, 106u8, 214u8, 97u8, 212u8, 163u8, 147u8,
              6u8, 109u8, 44u8, 89u8, 6u8, 93u8, 51u8, 74u8, 154u8, 1u8, 16u8, 60u8, 100u8, 189u8,
              218u8, 145u8, 8u8, 216u8, 43u8, 107u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Account staking by CurrencyID"]
        pub async fn account_stakes(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            runtime_types::tidefi_primitives::Stake<
              ::core::primitive::u128,
              ::core::primitive::u32,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AccountStakes>()?
          };
          if runtime_storage_hash
            == [
              57u8, 33u8, 88u8, 36u8, 240u8, 242u8, 239u8, 109u8, 228u8, 215u8, 57u8, 164u8, 88u8,
              166u8, 10u8, 47u8, 6u8, 22u8, 0u8, 78u8, 17u8, 225u8, 145u8, 8u8, 247u8, 190u8,
              220u8, 250u8, 161u8, 95u8, 159u8, 53u8,
            ]
          {
            let entry = AccountStakes(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Account staking by CurrencyID"]
        pub async fn account_stakes_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, AccountStakes<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AccountStakes>()?
          };
          if runtime_storage_hash
            == [
              57u8, 33u8, 88u8, 36u8, 240u8, 242u8, 239u8, 109u8, 228u8, 215u8, 57u8, 164u8, 88u8,
              166u8, 10u8, 47u8, 6u8, 22u8, 0u8, 78u8, 17u8, 225u8, 145u8, 8u8, 247u8, 190u8,
              220u8, 250u8, 161u8, 95u8, 159u8, 53u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Counter for the related counted storage map"]
        pub async fn counter_for_account_stakes(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CounterForAccountStakes>()?
          };
          if runtime_storage_hash
            == [
              7u8, 163u8, 221u8, 232u8, 98u8, 2u8, 117u8, 118u8, 59u8, 175u8, 84u8, 96u8, 250u8,
              136u8, 106u8, 165u8, 207u8, 84u8, 10u8, 132u8, 75u8, 159u8, 16u8, 24u8, 251u8, 115u8,
              199u8, 19u8, 50u8, 22u8, 74u8, 87u8,
            ]
          {
            let entry = CounterForAccountStakes;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Pallet ID"]
        pub fn stake_pallet_id(
          &self,
        ) -> ::core::result::Result<runtime_types::frame_support::PalletId, ::subxt::BasicError>
        {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("TidefiStaking", "StakePalletId")?
            == [
              248u8, 63u8, 221u8, 219u8, 141u8, 9u8, 35u8, 48u8, 9u8, 234u8, 48u8, 141u8, 212u8,
              246u8, 61u8, 217u8, 211u8, 140u8, 228u8, 213u8, 165u8, 106u8, 209u8, 174u8, 202u8,
              2u8, 215u8, 64u8, 102u8, 80u8, 250u8, 81u8,
            ]
          {
            let pallet = metadata.pallet("TidefiStaking")?;
            let constant = pallet.constant("StakePalletId")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Unstake queue's capacity"]
        pub fn unstake_queue_cap(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("TidefiStaking", "UnstakeQueueCap")?
            == [
              243u8, 48u8, 226u8, 212u8, 203u8, 59u8, 160u8, 201u8, 144u8, 102u8, 253u8, 225u8,
              84u8, 89u8, 17u8, 164u8, 74u8, 98u8, 129u8, 153u8, 73u8, 88u8, 133u8, 162u8, 50u8,
              22u8, 18u8, 121u8, 237u8, 128u8, 118u8, 237u8,
            ]
          {
            let pallet = metadata.pallet("TidefiStaking")?;
            let constant = pallet.constant("UnstakeQueueCap")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Maximum active stake / account"]
        pub fn stake_account_cap(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("TidefiStaking", "StakeAccountCap")?
            == [
              47u8, 174u8, 80u8, 98u8, 158u8, 107u8, 1u8, 112u8, 161u8, 232u8, 132u8, 70u8, 137u8,
              224u8, 65u8, 238u8, 206u8, 119u8, 13u8, 69u8, 231u8, 54u8, 100u8, 244u8, 96u8, 195u8,
              55u8, 81u8, 118u8, 132u8, 216u8, 202u8,
            ]
          {
            let pallet = metadata.pallet("TidefiStaking")?;
            let constant = pallet.constant("StakeAccountCap")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Maximum number of periods defined"]
        pub fn staking_reward_cap(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("TidefiStaking", "StakingRewardCap")?
            == [
              77u8, 110u8, 80u8, 227u8, 112u8, 232u8, 107u8, 127u8, 64u8, 41u8, 215u8, 246u8,
              146u8, 251u8, 221u8, 235u8, 147u8, 70u8, 112u8, 135u8, 104u8, 223u8, 151u8, 1u8,
              116u8, 159u8, 151u8, 44u8, 147u8, 7u8, 204u8, 115u8,
            ]
          {
            let pallet = metadata.pallet("TidefiStaking")?;
            let constant = pallet.constant("StakingRewardCap")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Number of block to wait before unstake if forced."]
        pub fn blocks_force_unstake(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("TidefiStaking", "BlocksForceUnstake")?
            == [
              123u8, 212u8, 125u8, 102u8, 81u8, 36u8, 180u8, 98u8, 11u8, 38u8, 238u8, 219u8, 88u8,
              68u8, 11u8, 187u8, 43u8, 173u8, 51u8, 131u8, 24u8, 98u8, 37u8, 23u8, 243u8, 247u8,
              137u8, 220u8, 95u8, 213u8, 6u8, 125u8,
            ]
          {
            let pallet = metadata.pallet("TidefiStaking")?;
            let constant = pallet.constant("BlocksForceUnstake")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod quorum {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SubmitProposal {
        pub proposal: runtime_types::tidefi_primitives::ProposalType<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
          ::std::vec::Vec<::core::primitive::u8>,
          ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        >,
      }
      impl ::subxt::Call for SubmitProposal {
        const PALLET: &'static str = "Quorum";
        const FUNCTION: &'static str = "submit_proposal";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AcknowledgeProposal {
        pub proposal: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for AcknowledgeProposal {
        const PALLET: &'static str = "Quorum";
        const FUNCTION: &'static str = "acknowledge_proposal";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AcknowledgeBurned {
        pub proposal: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for AcknowledgeBurned {
        const PALLET: &'static str = "Quorum";
        const FUNCTION: &'static str = "acknowledge_burned";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RejectProposal {
        pub proposal: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for RejectProposal {
        const PALLET: &'static str = "Quorum";
        const FUNCTION: &'static str = "reject_proposal";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct EvalProposalState {
        pub proposal: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for EvalProposalState {
        const PALLET: &'static str = "Quorum";
        const FUNCTION: &'static str = "eval_proposal_state";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SubmitPublicKeys {
        pub public_keys: ::std::vec::Vec<(
          ::core::primitive::u32,
          ::std::vec::Vec<::core::primitive::u8>,
        )>,
      }
      impl ::subxt::Call for SubmitPublicKeys {
        const PALLET: &'static str = "Quorum";
        const FUNCTION: &'static str = "submit_public_keys";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Quorum member submit proposal"]
        pub fn submit_proposal(
          &self,
          proposal: runtime_types::tidefi_primitives::ProposalType<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
            ::std::vec::Vec<::core::primitive::u8>,
            ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          >,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SubmitProposal, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SubmitProposal>()?
          };
          if runtime_call_hash
            == [
              52u8, 199u8, 140u8, 220u8, 208u8, 109u8, 232u8, 131u8, 178u8, 127u8, 24u8, 244u8,
              131u8, 186u8, 90u8, 228u8, 61u8, 65u8, 136u8, 223u8, 133u8, 150u8, 150u8, 116u8,
              33u8, 153u8, 231u8, 168u8, 254u8, 62u8, 239u8, 17u8,
            ]
          {
            let call = SubmitProposal { proposal };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Quorum member acknowledge to a proposal"]
        pub fn acknowledge_proposal(
          &self,
          proposal: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            AcknowledgeProposal,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AcknowledgeProposal>()?
          };
          if runtime_call_hash
            == [
              8u8, 113u8, 230u8, 63u8, 66u8, 165u8, 96u8, 5u8, 150u8, 79u8, 216u8, 13u8, 59u8,
              17u8, 87u8, 185u8, 106u8, 43u8, 175u8, 232u8, 216u8, 28u8, 134u8, 130u8, 32u8, 64u8,
              235u8, 45u8, 245u8, 247u8, 127u8, 134u8,
            ]
          {
            let call = AcknowledgeProposal { proposal };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Quorum member acknowledge a burned item and started the process."]
        pub fn acknowledge_burned(
          &self,
          proposal: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            AcknowledgeBurned,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AcknowledgeBurned>()?
          };
          if runtime_call_hash
            == [
              21u8, 156u8, 250u8, 33u8, 124u8, 17u8, 102u8, 233u8, 190u8, 51u8, 119u8, 75u8, 163u8,
              80u8, 131u8, 51u8, 231u8, 188u8, 38u8, 95u8, 28u8, 251u8, 199u8, 121u8, 232u8, 250u8,
              232u8, 211u8, 85u8, 252u8, 9u8, 224u8,
            ]
          {
            let call = AcknowledgeBurned { proposal };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Quorum member reject a proposal"]
        pub fn reject_proposal(
          &self,
          proposal: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, RejectProposal, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RejectProposal>()?
          };
          if runtime_call_hash
            == [
              219u8, 71u8, 63u8, 145u8, 54u8, 15u8, 165u8, 217u8, 185u8, 77u8, 144u8, 242u8, 45u8,
              59u8, 122u8, 78u8, 225u8, 143u8, 50u8, 115u8, 207u8, 65u8, 167u8, 24u8, 205u8, 249u8,
              139u8, 229u8, 88u8, 124u8, 133u8, 66u8,
            ]
          {
            let call = RejectProposal { proposal };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Evaluate the state of a proposal given the current vote threshold"]
        pub fn eval_proposal_state(
          &self,
          proposal: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            EvalProposalState,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<EvalProposalState>()?
          };
          if runtime_call_hash
            == [
              141u8, 121u8, 161u8, 48u8, 230u8, 119u8, 229u8, 3u8, 6u8, 165u8, 26u8, 55u8, 168u8,
              10u8, 11u8, 221u8, 141u8, 58u8, 169u8, 102u8, 13u8, 9u8, 115u8, 166u8, 18u8, 51u8,
              219u8, 70u8, 105u8, 3u8, 171u8, 190u8,
            ]
          {
            let call = EvalProposalState { proposal };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Quorum member submit his own public keys"]
        pub fn submit_public_keys(
          &self,
          public_keys: ::std::vec::Vec<(
            ::core::primitive::u32,
            ::std::vec::Vec<::core::primitive::u8>,
          )>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SubmitPublicKeys, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SubmitPublicKeys>()?
          };
          if runtime_call_hash
            == [
              139u8, 152u8, 46u8, 122u8, 242u8, 233u8, 158u8, 131u8, 137u8, 106u8, 81u8, 43u8,
              147u8, 13u8, 63u8, 140u8, 119u8, 73u8, 154u8, 227u8, 156u8, 59u8, 248u8, 113u8,
              253u8, 231u8, 199u8, 60u8, 222u8, 49u8, 123u8, 80u8,
            ]
          {
            let call = SubmitPublicKeys { public_keys };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_quorum::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Quorum status changed"]
      pub struct StatusChanged {
        pub is_enabled: ::core::primitive::bool,
      }
      impl ::subxt::Event for StatusChanged {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "StatusChanged";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Quorum account changed"]
      pub struct AccountChanged {
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for AccountChanged {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "AccountChanged";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Quorum minted token to the account"]
      pub struct Minted {
        pub proposal_id: ::subxt::sp_core::H256,
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub amount: ::core::primitive::u128,
        pub transaction_id: ::std::vec::Vec<::core::primitive::u8>,
        pub compliance_level: runtime_types::tidefi_primitives::ComplianceLevel,
      }
      impl ::subxt::Event for Minted {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "Minted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "A new transaction has been added to the watch list"]
      pub struct WatchTransactionAdded {
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub amount: ::core::primitive::u128,
        pub compliance_level: runtime_types::tidefi_primitives::ComplianceLevel,
        pub transaction_id: ::std::vec::Vec<::core::primitive::u8>,
        pub watch_action: runtime_types::tidefi_primitives::WatchListAction,
      }
      impl ::subxt::Event for WatchTransactionAdded {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "WatchTransactionAdded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Quorum burned token to the account from tidechain"]
      pub struct BurnedInitialized {
        pub proposal_id: ::subxt::sp_core::H256,
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub amount: ::core::primitive::u128,
      }
      impl ::subxt::Event for BurnedInitialized {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "BurnedInitialized";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Quorum member acknowledged the burned and initiated the process"]
      pub struct BurnedAcknowledged {
        pub proposal_id: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for BurnedAcknowledged {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "BurnedAcknowledged";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Member voted for a proposal"]
      pub struct VoteFor {
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
        pub proposal_id: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for VoteFor {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "VoteFor";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Member voted against a proposal"]
      pub struct VoteAgainst {
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
        pub proposal_id: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for VoteAgainst {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "VoteAgainst";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Proposal has been processed successfully"]
      pub struct ProposalSubmitted {
        pub proposal_id: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for ProposalSubmitted {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "ProposalSubmitted";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Proposal has been approved"]
      pub struct ProposalApproved {
        pub proposal_id: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for ProposalApproved {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "ProposalApproved";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Proposal has been processed successfully"]
      pub struct ProposalProcessed {
        pub proposal_id: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for ProposalProcessed {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "ProposalProcessed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Proposal has been rejected"]
      pub struct ProposalRejected {
        pub proposal_id: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for ProposalRejected {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "ProposalRejected";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "The quorum configuration has been updated, all elected members should re-submit public keys"]
      pub struct ConfigurationUpdated {
        pub members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
        pub threshold: ::core::primitive::u16,
      }
      impl ::subxt::Event for ConfigurationUpdated {
        const PALLET: &'static str = "Quorum";
        const EVENT: &'static str = "ConfigurationUpdated";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct QuorumStatus;
      impl ::subxt::StorageEntry for QuorumStatus {
        const PALLET: &'static str = "Quorum";
        const STORAGE: &'static str = "QuorumStatus";
        type Value = ::core::primitive::bool;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct PublicKeys<'a>(pub &'a ::core::primitive::u32);
      impl ::subxt::StorageEntry for PublicKeys<'_> {
        const PALLET: &'static str = "Quorum";
        const STORAGE: &'static str = "PublicKeys";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
          ::subxt::sp_core::crypto::AccountId32,
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>,
        )>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct AccountWatchList<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for AccountWatchList<'_> {
        const PALLET: &'static str = "Quorum";
        const STORAGE: &'static str = "AccountWatchList";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
          runtime_types::tidefi_primitives::WatchList<
            ::core::primitive::u32,
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct Threshold;
      impl ::subxt::StorageEntry for Threshold {
        const PALLET: &'static str = "Quorum";
        const STORAGE: &'static str = "Threshold";
        type Value = ::core::primitive::u16;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Proposals;
      impl ::subxt::StorageEntry for Proposals {
        const PALLET: &'static str = "Quorum";
        const STORAGE: &'static str = "Proposals";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
          ::subxt::sp_core::H256,
          ::core::primitive::u32,
          runtime_types::tidefi_primitives::ProposalType<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>,
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<
              ::subxt::sp_core::crypto::AccountId32,
            >,
          >,
        )>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Votes<'a>(pub &'a ::subxt::sp_core::H256);
      impl ::subxt::StorageEntry for Votes<'_> {
        const PALLET: &'static str = "Quorum";
        const STORAGE: &'static str = "Votes";
        type Value = runtime_types::tidefi_primitives::ProposalVotes<
          ::core::primitive::u32,
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            ::subxt::sp_core::crypto::AccountId32,
          >,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct Members<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for Members<'_> {
        const PALLET: &'static str = "Quorum";
        const STORAGE: &'static str = "Members";
        type Value = ::core::primitive::bool;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct CounterForMembers;
      impl ::subxt::StorageEntry for CounterForMembers {
        const PALLET: &'static str = "Quorum";
        const STORAGE: &'static str = "CounterForMembers";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct BurnedQueue;
      impl ::subxt::StorageEntry for BurnedQueue {
        const PALLET: &'static str = "Quorum";
        const STORAGE: &'static str = "BurnedQueue";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
          ::subxt::sp_core::H256,
          runtime_types::tidefi_primitives::Withdrawal<
            ::subxt::sp_core::crypto::AccountId32,
            ::core::primitive::u32,
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>,
          >,
        )>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Quorum status"]
        pub async fn quorum_status(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::bool, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<QuorumStatus>()?
          };
          if runtime_storage_hash
            == [
              255u8, 225u8, 178u8, 148u8, 251u8, 238u8, 120u8, 92u8, 149u8, 19u8, 87u8, 123u8,
              34u8, 78u8, 115u8, 177u8, 228u8, 167u8, 7u8, 104u8, 229u8, 228u8, 23u8, 97u8, 29u8,
              145u8, 135u8, 234u8, 221u8, 184u8, 164u8, 29u8,
            ]
          {
            let entry = QuorumStatus;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Quorum public keys for all chains"]
        pub async fn public_keys(
          &self,
          _0: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
            ::subxt::sp_core::crypto::AccountId32,
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<PublicKeys>()?
          };
          if runtime_storage_hash
            == [
              8u8, 228u8, 182u8, 161u8, 233u8, 9u8, 160u8, 151u8, 110u8, 163u8, 65u8, 58u8, 51u8,
              189u8, 240u8, 214u8, 200u8, 171u8, 195u8, 30u8, 34u8, 77u8, 72u8, 171u8, 20u8, 63u8,
              86u8, 38u8, 115u8, 38u8, 252u8, 176u8,
            ]
          {
            let entry = PublicKeys(_0);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Quorum public keys for all chains"]
        pub async fn public_keys_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, PublicKeys<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<PublicKeys>()?
          };
          if runtime_storage_hash
            == [
              8u8, 228u8, 182u8, 161u8, 233u8, 9u8, 160u8, 151u8, 110u8, 163u8, 65u8, 58u8, 51u8,
              189u8, 240u8, 214u8, 200u8, 171u8, 195u8, 30u8, 34u8, 77u8, 72u8, 171u8, 20u8, 63u8,
              86u8, 38u8, 115u8, 38u8, 252u8, 176u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Set of active transaction to watch"]
        pub async fn account_watch_list(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<
              runtime_types::tidefi_primitives::WatchList<
                ::core::primitive::u32,
                runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                  ::core::primitive::u8,
                >,
              >,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AccountWatchList>()?
          };
          if runtime_storage_hash
            == [
              174u8, 196u8, 201u8, 93u8, 92u8, 140u8, 123u8, 59u8, 117u8, 169u8, 188u8, 180u8,
              138u8, 35u8, 219u8, 66u8, 84u8, 191u8, 104u8, 236u8, 9u8, 226u8, 194u8, 14u8, 173u8,
              178u8, 239u8, 126u8, 86u8, 28u8, 119u8, 247u8,
            ]
          {
            let entry = AccountWatchList(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Set of active transaction to watch"]
        pub async fn account_watch_list_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, AccountWatchList<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AccountWatchList>()?
          };
          if runtime_storage_hash
            == [
              174u8, 196u8, 201u8, 93u8, 92u8, 140u8, 123u8, 59u8, 117u8, 169u8, 188u8, 180u8,
              138u8, 35u8, 219u8, 66u8, 84u8, 191u8, 104u8, 236u8, 9u8, 226u8, 194u8, 14u8, 173u8,
              178u8, 239u8, 126u8, 86u8, 28u8, 119u8, 247u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The threshold required for a proposal to process"]
        pub async fn threshold(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u16, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Threshold>()?
          };
          if runtime_storage_hash
            == [
              187u8, 94u8, 201u8, 176u8, 84u8, 172u8, 174u8, 31u8, 217u8, 88u8, 244u8, 16u8, 46u8,
              124u8, 225u8, 21u8, 104u8, 160u8, 41u8, 5u8, 181u8, 119u8, 38u8, 214u8, 47u8, 37u8,
              246u8, 249u8, 113u8, 21u8, 181u8, 146u8,
            ]
          {
            let entry = Threshold;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Set of proposals for the Quorum"]
        pub async fn proposals(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
            ::subxt::sp_core::H256,
            ::core::primitive::u32,
            runtime_types::tidefi_primitives::ProposalType<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
              runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>,
              runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                ::subxt::sp_core::crypto::AccountId32,
              >,
            >,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Proposals>()?
          };
          if runtime_storage_hash
            == [
              9u8, 83u8, 67u8, 190u8, 195u8, 12u8, 162u8, 56u8, 34u8, 14u8, 120u8, 255u8, 221u8,
              46u8, 205u8, 102u8, 163u8, 5u8, 94u8, 73u8, 213u8, 70u8, 61u8, 96u8, 148u8, 83u8,
              202u8, 252u8, 11u8, 232u8, 12u8, 118u8,
            ]
          {
            let entry = Proposals;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Set of Votes for each proposal"]
        pub async fn votes(
          &self,
          _0: &::subxt::sp_core::H256,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::tidefi_primitives::ProposalVotes<
              ::core::primitive::u32,
              runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                ::subxt::sp_core::crypto::AccountId32,
              >,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Votes>()?
          };
          if runtime_storage_hash
            == [
              95u8, 80u8, 46u8, 105u8, 48u8, 95u8, 129u8, 201u8, 49u8, 122u8, 162u8, 178u8, 4u8,
              246u8, 185u8, 73u8, 0u8, 61u8, 97u8, 135u8, 72u8, 77u8, 224u8, 178u8, 136u8, 27u8,
              175u8, 34u8, 156u8, 40u8, 14u8, 63u8,
            ]
          {
            let entry = Votes(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Set of Votes for each proposal"]
        pub async fn votes_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Votes<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Votes>()?
          };
          if runtime_storage_hash
            == [
              95u8, 80u8, 46u8, 105u8, 48u8, 95u8, 129u8, 201u8, 49u8, 122u8, 162u8, 178u8, 4u8,
              246u8, 185u8, 73u8, 0u8, 61u8, 97u8, 135u8, 72u8, 77u8, 224u8, 178u8, 136u8, 27u8,
              175u8, 34u8, 156u8, 40u8, 14u8, 63u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Set of active quorum members"]
        pub async fn members(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::bool>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Members>()?
          };
          if runtime_storage_hash
            == [
              1u8, 142u8, 116u8, 45u8, 231u8, 82u8, 67u8, 117u8, 92u8, 142u8, 101u8, 229u8, 45u8,
              231u8, 133u8, 219u8, 28u8, 94u8, 169u8, 77u8, 91u8, 74u8, 159u8, 181u8, 78u8, 60u8,
              218u8, 212u8, 51u8, 15u8, 16u8, 133u8,
            ]
          {
            let entry = Members(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Set of active quorum members"]
        pub async fn members_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Members<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Members>()?
          };
          if runtime_storage_hash
            == [
              1u8, 142u8, 116u8, 45u8, 231u8, 82u8, 67u8, 117u8, 92u8, 142u8, 101u8, 229u8, 45u8,
              231u8, 133u8, 219u8, 28u8, 94u8, 169u8, 77u8, 91u8, 74u8, 159u8, 181u8, 78u8, 60u8,
              218u8, 212u8, 51u8, 15u8, 16u8, 133u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Counter for the related counted storage map"]
        pub async fn counter_for_members(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CounterForMembers>()?
          };
          if runtime_storage_hash
            == [
              221u8, 156u8, 131u8, 217u8, 72u8, 128u8, 25u8, 153u8, 178u8, 127u8, 192u8, 96u8,
              233u8, 215u8, 31u8, 91u8, 8u8, 250u8, 201u8, 36u8, 62u8, 229u8, 67u8, 66u8, 24u8,
              3u8, 48u8, 24u8, 15u8, 147u8, 85u8, 131u8,
            ]
          {
            let entry = CounterForMembers;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Burned queue"]
        pub async fn burned_queue(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
            ::subxt::sp_core::H256,
            runtime_types::tidefi_primitives::Withdrawal<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
              runtime_types::frame_support::storage::bounded_vec::BoundedVec<::core::primitive::u8>,
            >,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<BurnedQueue>()?
          };
          if runtime_storage_hash
            == [
              142u8, 8u8, 231u8, 219u8, 185u8, 178u8, 232u8, 73u8, 198u8, 52u8, 14u8, 177u8, 241u8,
              246u8, 192u8, 143u8, 122u8, 37u8, 29u8, 218u8, 239u8, 105u8, 113u8, 99u8, 34u8, 13u8,
              151u8, 210u8, 135u8, 162u8, 89u8, 220u8,
            ]
          {
            let entry = BurnedQueue;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Pallet ID"]
        pub fn quorum_pallet_id(
          &self,
        ) -> ::core::result::Result<runtime_types::frame_support::PalletId, ::subxt::BasicError>
        {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Quorum", "QuorumPalletId")?
            == [
              90u8, 135u8, 198u8, 183u8, 254u8, 132u8, 216u8, 167u8, 69u8, 168u8, 20u8, 167u8,
              216u8, 173u8, 119u8, 235u8, 50u8, 185u8, 231u8, 48u8, 164u8, 68u8, 75u8, 205u8,
              183u8, 62u8, 134u8, 171u8, 193u8, 75u8, 77u8, 7u8,
            ]
          {
            let pallet = metadata.pallet("Quorum")?;
            let constant = pallet.constant("QuorumPalletId")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Proposals capacity"]
        pub fn proposals_cap(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Quorum", "ProposalsCap")?
            == [
              163u8, 228u8, 62u8, 244u8, 127u8, 145u8, 228u8, 199u8, 14u8, 3u8, 88u8, 114u8, 246u8,
              40u8, 243u8, 40u8, 78u8, 48u8, 66u8, 11u8, 86u8, 199u8, 104u8, 136u8, 64u8, 215u8,
              222u8, 96u8, 26u8, 93u8, 177u8, 228u8,
            ]
          {
            let pallet = metadata.pallet("Quorum")?;
            let constant = pallet.constant("ProposalsCap")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Burned queue capacity"]
        pub fn burned_cap(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Quorum", "BurnedCap")?
            == [
              129u8, 113u8, 67u8, 193u8, 27u8, 208u8, 176u8, 99u8, 91u8, 203u8, 78u8, 95u8, 169u8,
              208u8, 101u8, 91u8, 52u8, 15u8, 145u8, 82u8, 127u8, 71u8, 126u8, 171u8, 90u8, 217u8,
              136u8, 223u8, 1u8, 84u8, 205u8, 202u8,
            ]
          {
            let pallet = metadata.pallet("Quorum")?;
            let constant = pallet.constant("BurnedCap")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Proposals lifetime"]
        pub fn proposal_lifetime(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Quorum", "ProposalLifetime")?
            == [
              145u8, 49u8, 8u8, 49u8, 149u8, 236u8, 204u8, 80u8, 37u8, 50u8, 238u8, 134u8, 185u8,
              38u8, 37u8, 104u8, 118u8, 69u8, 140u8, 90u8, 164u8, 39u8, 104u8, 129u8, 40u8, 208u8,
              177u8, 49u8, 255u8, 47u8, 209u8, 135u8,
            ]
          {
            let pallet = metadata.pallet("Quorum")?;
            let constant = pallet.constant("ProposalLifetime")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum length of string (public keys etc..)"]
        pub fn string_limit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Quorum", "StringLimit")?
            == [
              125u8, 85u8, 67u8, 30u8, 6u8, 25u8, 161u8, 15u8, 136u8, 186u8, 218u8, 241u8, 180u8,
              149u8, 205u8, 114u8, 61u8, 169u8, 236u8, 124u8, 214u8, 246u8, 180u8, 77u8, 208u8,
              1u8, 252u8, 232u8, 246u8, 244u8, 3u8, 220u8,
            ]
          {
            let pallet = metadata.pallet("Quorum")?;
            let constant = pallet.constant("StringLimit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of votes per proposal"]
        pub fn votes_limit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Quorum", "VotesLimit")?
            == [
              247u8, 33u8, 159u8, 89u8, 51u8, 158u8, 218u8, 10u8, 224u8, 255u8, 175u8, 194u8,
              147u8, 71u8, 138u8, 130u8, 80u8, 249u8, 41u8, 120u8, 59u8, 50u8, 84u8, 71u8, 96u8,
              27u8, 81u8, 142u8, 126u8, 225u8, 216u8, 60u8,
            ]
          {
            let pallet = metadata.pallet("Quorum")?;
            let constant = pallet.constant("VotesLimit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of proposals per account watch list"]
        pub fn watch_list_limit(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Quorum", "WatchListLimit")?
            == [
              104u8, 149u8, 246u8, 48u8, 31u8, 1u8, 85u8, 68u8, 180u8, 57u8, 0u8, 30u8, 50u8,
              234u8, 183u8, 229u8, 44u8, 59u8, 49u8, 186u8, 198u8, 125u8, 107u8, 89u8, 58u8, 147u8,
              203u8, 0u8, 64u8, 154u8, 172u8, 24u8,
            ]
          {
            let pallet = metadata.pallet("Quorum")?;
            let constant = pallet.constant("WatchListLimit")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The pubkey per asset (should always be more than current member size)"]
        pub fn pubkey_limit_per_asset(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Quorum", "PubkeyLimitPerAsset")?
            == [
              135u8, 236u8, 100u8, 126u8, 182u8, 4u8, 124u8, 148u8, 43u8, 35u8, 109u8, 94u8, 157u8,
              29u8, 40u8, 133u8, 132u8, 176u8, 182u8, 47u8, 227u8, 187u8, 82u8, 97u8, 99u8, 75u8,
              132u8, 86u8, 100u8, 37u8, 201u8, 51u8,
            ]
          {
            let pallet = metadata.pallet("Quorum")?;
            let constant = pallet.constant("PubkeyLimitPerAsset")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod oracle {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ConfirmSwap {
        pub request_id: ::subxt::sp_core::H256,
        pub market_makers: ::std::vec::Vec<runtime_types::tidefi_primitives::SwapConfirmation>,
      }
      impl ::subxt::Call for ConfirmSwap {
        const PALLET: &'static str = "Oracle";
        const FUNCTION: &'static str = "confirm_swap";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct CancelSwap {
        pub request_id: ::subxt::sp_core::H256,
      }
      impl ::subxt::Call for CancelSwap {
        const PALLET: &'static str = "Oracle";
        const FUNCTION: &'static str = "cancel_swap";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetAccountId {
        pub new_account_id: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for SetAccountId {
        const PALLET: &'static str = "Oracle";
        const FUNCTION: &'static str = "set_account_id";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetStatus {
        pub is_enabled: ::core::primitive::bool,
      }
      impl ::subxt::Call for SetStatus {
        const PALLET: &'static str = "Oracle";
        const FUNCTION: &'static str = "set_status";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ImAlive {
        pub im_alive: runtime_types::tidefi_primitives::OracleImAlive,
      }
      impl ::subxt::Call for ImAlive {
        const PALLET: &'static str = "Oracle";
        const FUNCTION: &'static str = "im_alive";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AddMarketMaker {
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for AddMarketMaker {
        const PALLET: &'static str = "Oracle";
        const FUNCTION: &'static str = "add_market_maker";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RemoveMarketMaker {
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Call for RemoveMarketMaker {
        const PALLET: &'static str = "Oracle";
        const FUNCTION: &'static str = "remove_market_maker";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Oracle have confirmation and confirm the trade."]
        #[doc = ""]
        #[doc = "- `request_id`: Unique request ID."]
        #[doc = "- `market_makers`: Vector of `SwapConfirmation` who represent the allocation of multiple source."]
        #[doc = ""]
        #[doc = "Emits `SwapProcessed` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn confirm_swap(
          &self,
          request_id: ::subxt::sp_core::H256,
          market_makers: ::std::vec::Vec<runtime_types::tidefi_primitives::SwapConfirmation>,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ConfirmSwap, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ConfirmSwap>()?
          };
          if runtime_call_hash
            == [
              153u8, 123u8, 188u8, 70u8, 194u8, 117u8, 9u8, 185u8, 33u8, 165u8, 0u8, 45u8, 119u8,
              119u8, 241u8, 155u8, 23u8, 89u8, 2u8, 50u8, 141u8, 13u8, 191u8, 160u8, 244u8, 21u8,
              204u8, 183u8, 194u8, 31u8, 68u8, 205u8,
            ]
          {
            let call = ConfirmSwap {
              request_id,
              market_makers,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Oracle cancel a swap request and release remaining funds"]
        #[doc = ""]
        #[doc = "- `request_id`: Unique request ID."]
        #[doc = ""]
        #[doc = "Emits `SwapCancelled` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn cancel_swap(
          &self,
          request_id: ::subxt::sp_core::H256,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, CancelSwap, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<CancelSwap>()?
          };
          if runtime_call_hash
            == [
              153u8, 23u8, 73u8, 248u8, 0u8, 168u8, 254u8, 228u8, 251u8, 67u8, 110u8, 123u8, 224u8,
              204u8, 169u8, 106u8, 40u8, 181u8, 63u8, 230u8, 87u8, 154u8, 201u8, 172u8, 137u8,
              175u8, 53u8, 130u8, 108u8, 231u8, 147u8, 200u8,
            ]
          {
            let call = CancelSwap { request_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Oracle change the account ID who can confirm trade."]
        #[doc = ""]
        #[doc = "Make sure to have access to the `account_id` otherwise"]
        #[doc = "only `root` will be able to update the oracle account."]
        #[doc = ""]
        #[doc = "- `new_account_id`: The new Oracle account id."]
        #[doc = ""]
        #[doc = "Emits `AccountChanged` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn set_account_id(
          &self,
          new_account_id: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetAccountId, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetAccountId>()?
          };
          if runtime_call_hash
            == [
              17u8, 189u8, 74u8, 124u8, 198u8, 73u8, 40u8, 53u8, 190u8, 58u8, 190u8, 97u8, 236u8,
              249u8, 78u8, 199u8, 247u8, 10u8, 12u8, 203u8, 254u8, 169u8, 28u8, 120u8, 132u8,
              158u8, 183u8, 22u8, 237u8, 165u8, 139u8, 200u8,
            ]
          {
            let call = SetAccountId { new_account_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Change Oracle status."]
        #[doc = ""]
        #[doc = "- `is_enabled`: Is the oracle enabled?"]
        #[doc = ""]
        #[doc = "Emits `StatusChanged` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn set_status(
          &self,
          is_enabled: ::core::primitive::bool,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetStatus, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetStatus>()?
          };
          if runtime_call_hash
            == [
              40u8, 18u8, 96u8, 211u8, 27u8, 129u8, 165u8, 25u8, 168u8, 194u8, 220u8, 67u8, 29u8,
              222u8, 14u8, 98u8, 176u8, 94u8, 74u8, 64u8, 131u8, 50u8, 36u8, 77u8, 126u8, 4u8,
              149u8, 1u8, 74u8, 139u8, 42u8, 133u8,
            ]
          {
            let call = SetStatus { is_enabled };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Change Oracle status."]
        #[doc = ""]
        #[doc = "- `is_enabled`: Is the oracle enabled?"]
        #[doc = ""]
        #[doc = "Emits `StatusChanged` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn im_alive(
          &self,
          im_alive: runtime_types::tidefi_primitives::OracleImAlive,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, ImAlive, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ImAlive>()?
          };
          if runtime_call_hash
            == [
              244u8, 72u8, 46u8, 11u8, 24u8, 11u8, 83u8, 10u8, 149u8, 10u8, 112u8, 154u8, 246u8,
              148u8, 47u8, 92u8, 3u8, 221u8, 149u8, 15u8, 162u8, 250u8, 162u8, 140u8, 175u8, 198u8,
              92u8, 99u8, 10u8, 112u8, 208u8, 208u8,
            ]
          {
            let call = ImAlive { im_alive };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Add market maker to the local storage"]
        #[doc = ""]
        #[doc = "Emits `StatusChanged` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn add_market_maker(
          &self,
          account_id: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, AddMarketMaker, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<AddMarketMaker>()?
          };
          if runtime_call_hash
            == [
              123u8, 174u8, 71u8, 173u8, 24u8, 36u8, 131u8, 179u8, 86u8, 16u8, 31u8, 64u8, 35u8,
              155u8, 196u8, 250u8, 44u8, 254u8, 4u8, 125u8, 93u8, 172u8, 194u8, 186u8, 8u8, 200u8,
              160u8, 142u8, 218u8, 121u8, 31u8, 84u8,
            ]
          {
            let call = AddMarketMaker { account_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Remove market maker to the local storage"]
        #[doc = ""]
        #[doc = "- `delete_orders`: Should we delete all existing swaps on chain for this user?"]
        #[doc = ""]
        #[doc = "Emits `StatusChanged` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn remove_market_maker(
          &self,
          account_id: ::subxt::sp_core::crypto::AccountId32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            RemoveMarketMaker,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<RemoveMarketMaker>()?
          };
          if runtime_call_hash
            == [
              66u8, 137u8, 150u8, 52u8, 178u8, 233u8, 219u8, 56u8, 127u8, 181u8, 38u8, 186u8, 37u8,
              92u8, 125u8, 221u8, 65u8, 232u8, 233u8, 139u8, 228u8, 100u8, 76u8, 2u8, 189u8, 125u8,
              54u8, 219u8, 114u8, 20u8, 64u8, 90u8,
            ]
          {
            let call = RemoveMarketMaker { account_id };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_oracle::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Oracle status changed"]
      pub struct StatusChanged {
        pub is_enabled: ::core::primitive::bool,
      }
      impl ::subxt::Event for StatusChanged {
        const PALLET: &'static str = "Oracle";
        const EVENT: &'static str = "StatusChanged";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Oracle account changed"]
      pub struct AccountChanged {
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for AccountChanged {
        const PALLET: &'static str = "Oracle";
        const EVENT: &'static str = "AccountChanged";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Oracle added a market maker"]
      pub struct MarketMakerAdded {
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for MarketMakerAdded {
        const PALLET: &'static str = "Oracle";
        const EVENT: &'static str = "MarketMakerAdded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Oracle removed a market maker"]
      pub struct MarketMakerRemoved {
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
      }
      impl ::subxt::Event for MarketMakerRemoved {
        const PALLET: &'static str = "Oracle";
        const EVENT: &'static str = "MarketMakerRemoved";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Oracle processed the initial swap"]
      pub struct SwapProcessed {
        pub request_id: ::subxt::sp_core::H256,
        pub status: runtime_types::tidefi_primitives::SwapStatus,
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
        pub currency_from: runtime_types::tidefi_primitives::CurrencyId,
        pub currency_amount_from: ::core::primitive::u128,
        pub currency_to: runtime_types::tidefi_primitives::CurrencyId,
        pub currency_amount_to: ::core::primitive::u128,
        pub initial_extrinsic_hash: [::core::primitive::u8; 32usize],
      }
      impl ::subxt::Event for SwapProcessed {
        const PALLET: &'static str = "Oracle";
        const EVENT: &'static str = "SwapProcessed";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Oracle cancelled the initial swap and released the funds"]
      pub struct SwapCancelled {
        pub request_id: ::subxt::sp_core::H256,
      }
      impl ::subxt::Event for SwapCancelled {
        const PALLET: &'static str = "Oracle";
        const EVENT: &'static str = "SwapCancelled";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct OracleStatus;
      impl ::subxt::StorageEntry for OracleStatus {
        const PALLET: &'static str = "Oracle";
        const STORAGE: &'static str = "OracleStatus";
        type Value = ::core::primitive::bool;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct LastSeen;
      impl ::subxt::StorageEntry for LastSeen {
        const PALLET: &'static str = "Oracle";
        const STORAGE: &'static str = "LastSeen";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct OracleAccountId;
      impl ::subxt::StorageEntry for OracleAccountId {
        const PALLET: &'static str = "Oracle";
        const STORAGE: &'static str = "OracleAccountId";
        type Value = ::subxt::sp_core::crypto::AccountId32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct Swaps<'a>(pub &'a ::subxt::sp_core::H256);
      impl ::subxt::StorageEntry for Swaps<'_> {
        const PALLET: &'static str = "Oracle";
        const STORAGE: &'static str = "Swaps";
        type Value = runtime_types::tidefi_primitives::Swap<
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u32,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct AccountSwaps<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for AccountSwaps<'_> {
        const PALLET: &'static str = "Oracle";
        const STORAGE: &'static str = "AccountSwaps";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
          ::subxt::sp_core::H256,
          runtime_types::tidefi_primitives::SwapStatus,
        )>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct CounterForAccountSwaps;
      impl ::subxt::StorageEntry for CounterForAccountSwaps {
        const PALLET: &'static str = "Oracle";
        const STORAGE: &'static str = "CounterForAccountSwaps";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct MarketMakers<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
      impl ::subxt::StorageEntry for MarketMakers<'_> {
        const PALLET: &'static str = "Oracle";
        const STORAGE: &'static str = "MarketMakers";
        type Value = ::core::primitive::bool;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Oracle is enabled"]
        pub async fn oracle_status(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::bool, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<OracleStatus>()?
          };
          if runtime_storage_hash
            == [
              56u8, 32u8, 98u8, 152u8, 217u8, 177u8, 213u8, 201u8, 180u8, 222u8, 65u8, 41u8, 44u8,
              117u8, 167u8, 2u8, 40u8, 172u8, 126u8, 174u8, 88u8, 85u8, 64u8, 164u8, 28u8, 25u8,
              165u8, 118u8, 162u8, 168u8, 208u8, 94u8,
            ]
          {
            let entry = OracleStatus;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Oracle last seen"]
        pub async fn last_seen(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<LastSeen>()?
          };
          if runtime_storage_hash
            == [
              134u8, 5u8, 100u8, 67u8, 201u8, 190u8, 178u8, 192u8, 90u8, 111u8, 187u8, 197u8,
              190u8, 150u8, 14u8, 167u8, 240u8, 94u8, 217u8, 197u8, 57u8, 107u8, 77u8, 7u8, 254u8,
              133u8, 118u8, 17u8, 154u8, 81u8, 158u8, 248u8,
            ]
          {
            let entry = LastSeen;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Oracle Account ID"]
        pub async fn oracle_account_id(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<OracleAccountId>()?
          };
          if runtime_storage_hash
            == [
              71u8, 226u8, 119u8, 12u8, 46u8, 173u8, 230u8, 239u8, 61u8, 67u8, 7u8, 64u8, 238u8,
              107u8, 239u8, 117u8, 91u8, 51u8, 196u8, 200u8, 141u8, 149u8, 97u8, 123u8, 125u8,
              168u8, 205u8, 9u8, 206u8, 218u8, 113u8, 166u8,
            ]
          {
            let entry = OracleAccountId;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Mapping of pending Swaps"]
        pub async fn swaps(
          &self,
          _0: &::subxt::sp_core::H256,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::tidefi_primitives::Swap<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Swaps>()?
          };
          if runtime_storage_hash
            == [
              239u8, 81u8, 217u8, 176u8, 100u8, 126u8, 68u8, 91u8, 152u8, 2u8, 130u8, 110u8, 34u8,
              98u8, 80u8, 65u8, 239u8, 239u8, 36u8, 158u8, 161u8, 161u8, 134u8, 16u8, 42u8, 174u8,
              189u8, 52u8, 205u8, 165u8, 62u8, 130u8,
            ]
          {
            let entry = Swaps(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Mapping of pending Swaps"]
        pub async fn swaps_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, Swaps<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Swaps>()?
          };
          if runtime_storage_hash
            == [
              239u8, 81u8, 217u8, 176u8, 100u8, 126u8, 68u8, 91u8, 152u8, 2u8, 130u8, 110u8, 34u8,
              98u8, 80u8, 65u8, 239u8, 239u8, 36u8, 158u8, 161u8, 161u8, 134u8, 16u8, 42u8, 174u8,
              189u8, 52u8, 205u8, 165u8, 62u8, 130u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Mapping of pending Swaps by AccountId"]
        pub async fn account_swaps(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
              ::subxt::sp_core::H256,
              runtime_types::tidefi_primitives::SwapStatus,
            )>,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AccountSwaps>()?
          };
          if runtime_storage_hash
            == [
              185u8, 106u8, 56u8, 42u8, 128u8, 234u8, 74u8, 227u8, 37u8, 203u8, 230u8, 253u8, 92u8,
              22u8, 210u8, 1u8, 107u8, 246u8, 151u8, 1u8, 92u8, 71u8, 133u8, 105u8, 86u8, 11u8,
              102u8, 45u8, 213u8, 123u8, 52u8, 93u8,
            ]
          {
            let entry = AccountSwaps(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Mapping of pending Swaps by AccountId"]
        pub async fn account_swaps_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, AccountSwaps<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AccountSwaps>()?
          };
          if runtime_storage_hash
            == [
              185u8, 106u8, 56u8, 42u8, 128u8, 234u8, 74u8, 227u8, 37u8, 203u8, 230u8, 253u8, 92u8,
              22u8, 210u8, 1u8, 107u8, 246u8, 151u8, 1u8, 92u8, 71u8, 133u8, 105u8, 86u8, 11u8,
              102u8, 45u8, 213u8, 123u8, 52u8, 93u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Counter for the related counted storage map"]
        pub async fn counter_for_account_swaps(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CounterForAccountSwaps>()?
          };
          if runtime_storage_hash
            == [
              177u8, 21u8, 126u8, 159u8, 199u8, 171u8, 185u8, 50u8, 160u8, 100u8, 179u8, 164u8,
              239u8, 125u8, 187u8, 174u8, 188u8, 84u8, 62u8, 135u8, 188u8, 211u8, 5u8, 108u8,
              238u8, 242u8, 178u8, 18u8, 245u8, 186u8, 187u8, 49u8,
            ]
          {
            let entry = CounterForAccountSwaps;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Set of active market makers"]
        pub async fn market_makers(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::core::primitive::bool>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<MarketMakers>()?
          };
          if runtime_storage_hash
            == [
              15u8, 216u8, 103u8, 226u8, 4u8, 2u8, 208u8, 122u8, 207u8, 53u8, 98u8, 115u8, 28u8,
              94u8, 33u8, 248u8, 11u8, 164u8, 75u8, 164u8, 170u8, 57u8, 227u8, 9u8, 102u8, 20u8,
              107u8, 53u8, 252u8, 175u8, 240u8, 209u8,
            ]
          {
            let entry = MarketMakers(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Set of active market makers"]
        pub async fn market_makers_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, MarketMakers<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<MarketMakers>()?
          };
          if runtime_storage_hash
            == [
              15u8, 216u8, 103u8, 226u8, 4u8, 2u8, 208u8, 122u8, 207u8, 53u8, 98u8, 115u8, 28u8,
              94u8, 33u8, 248u8, 11u8, 164u8, 75u8, 164u8, 170u8, 57u8, 227u8, 9u8, 102u8, 20u8,
              107u8, 53u8, 252u8, 175u8, 240u8, 209u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Pallet ID"]
        pub fn oracle_pallet_id(
          &self,
        ) -> ::core::result::Result<runtime_types::frame_support::PalletId, ::subxt::BasicError>
        {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Oracle", "OraclePalletId")?
            == [
              118u8, 28u8, 207u8, 90u8, 219u8, 159u8, 93u8, 160u8, 143u8, 60u8, 185u8, 47u8, 154u8,
              239u8, 74u8, 64u8, 107u8, 30u8, 152u8, 173u8, 140u8, 78u8, 94u8, 127u8, 134u8, 92u8,
              49u8, 246u8, 251u8, 4u8, 59u8, 8u8,
            ]
          {
            let pallet = metadata.pallet("Oracle")?;
            let constant = pallet.constant("OraclePalletId")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The maximum number of active swaps per account id"]
        pub fn swap_limit_by_account(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Oracle", "SwapLimitByAccount")?
            == [
              138u8, 200u8, 130u8, 35u8, 156u8, 128u8, 113u8, 46u8, 168u8, 174u8, 175u8, 195u8,
              113u8, 131u8, 79u8, 181u8, 140u8, 144u8, 202u8, 236u8, 44u8, 78u8, 219u8, 156u8,
              47u8, 106u8, 232u8, 185u8, 231u8, 80u8, 13u8, 179u8,
            ]
          {
            let pallet = metadata.pallet("Oracle")?;
            let constant = pallet.constant("SwapLimitByAccount")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod security {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetStatus {
        pub status_code: runtime_types::tidefi_primitives::StatusCode,
      }
      impl ::subxt::Call for SetStatus {
        const PALLET: &'static str = "Security";
        const FUNCTION: &'static str = "set_status";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Change chain status."]
        #[doc = ""]
        #[doc = "This should be used only as emergency as you can disable Oracle or"]
        #[doc = "Quorum independently. You can also disable a currency if it's a known issue with"]
        #[doc = "a bridge. All transactions will be rejected, even from the Oracle"]
        #[doc = "and the Quorum for security reason."]
        #[doc = ""]
        #[doc = "This will also stop the staking blocks increment, so even if the Validators"]
        #[doc = "are still building blocks, they are not counted for the rewards."]
        #[doc = ""]
        #[doc = "- `status_code`: New chain `StatusCode`"]
        #[doc = ""]
        #[doc = "Emits `StatusChanged` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `0`"]
        pub fn set_status(
          &self,
          status_code: runtime_types::tidefi_primitives::StatusCode,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetStatus, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetStatus>()?
          };
          if runtime_call_hash
            == [
              37u8, 52u8, 200u8, 34u8, 10u8, 106u8, 78u8, 33u8, 106u8, 254u8, 7u8, 133u8, 72u8,
              22u8, 62u8, 49u8, 70u8, 78u8, 254u8, 220u8, 120u8, 174u8, 61u8, 148u8, 24u8, 114u8,
              165u8, 107u8, 54u8, 228u8, 253u8, 145u8,
            ]
          {
            let call = SetStatus { status_code };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_security::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct StatusChanged(pub runtime_types::tidefi_primitives::StatusCode);
      impl ::subxt::Event for StatusChanged {
        const PALLET: &'static str = "Security";
        const EVENT: &'static str = "StatusChanged";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      pub struct UpdateCurrentBlock(pub ::core::primitive::u32);
      impl ::subxt::Event for UpdateCurrentBlock {
        const PALLET: &'static str = "Security";
        const EVENT: &'static str = "UpdateCurrentBlock";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct Nonce;
      impl ::subxt::StorageEntry for Nonce {
        const PALLET: &'static str = "Security";
        const STORAGE: &'static str = "Nonce";
        type Value = runtime_types::primitive_types::U256;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct ChainStatus;
      impl ::subxt::StorageEntry for ChainStatus {
        const PALLET: &'static str = "Security";
        const STORAGE: &'static str = "ChainStatus";
        type Value = runtime_types::tidefi_primitives::StatusCode;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct CurrentBlockCount;
      impl ::subxt::StorageEntry for CurrentBlockCount {
        const PALLET: &'static str = "Security";
        const STORAGE: &'static str = "CurrentBlockCount";
        type Value = ::core::primitive::u32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Integer increment-only counter"]
        pub async fn nonce(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<runtime_types::primitive_types::U256, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<Nonce>()?
          };
          if runtime_storage_hash
            == [
              48u8, 69u8, 145u8, 100u8, 190u8, 5u8, 103u8, 11u8, 67u8, 188u8, 137u8, 74u8, 44u8,
              182u8, 100u8, 83u8, 94u8, 56u8, 185u8, 11u8, 220u8, 81u8, 123u8, 54u8, 174u8, 106u8,
              239u8, 245u8, 124u8, 33u8, 88u8, 216u8,
            ]
          {
            let entry = Nonce;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Chain status, currently support maintenance mode/running state"]
        pub async fn chain_status(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<runtime_types::tidefi_primitives::StatusCode, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ChainStatus>()?
          };
          if runtime_storage_hash
            == [
              249u8, 33u8, 147u8, 229u8, 33u8, 198u8, 151u8, 38u8, 125u8, 32u8, 29u8, 221u8, 247u8,
              31u8, 177u8, 185u8, 26u8, 178u8, 152u8, 30u8, 250u8, 150u8, 143u8, 157u8, 246u8,
              82u8, 112u8, 235u8, 33u8, 31u8, 107u8, 230u8,
            ]
          {
            let entry = ChainStatus;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Current block number (when the chain is paused, the block count is not incremented,"]
        #[doc = " so we don't give rewards on staking)"]
        pub async fn current_block_count(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CurrentBlockCount>()?
          };
          if runtime_storage_hash
            == [
              173u8, 100u8, 174u8, 19u8, 53u8, 125u8, 67u8, 128u8, 205u8, 156u8, 38u8, 62u8, 68u8,
              142u8, 4u8, 209u8, 22u8, 212u8, 208u8, 252u8, 227u8, 93u8, 83u8, 135u8, 133u8, 231u8,
              58u8, 246u8, 59u8, 15u8, 166u8, 187u8,
            ]
          {
            let entry = CurrentBlockCount;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod fees {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      pub struct ClaimSunriseRewards {
        pub era_index: ::core::primitive::u32,
      }
      impl ::subxt::Call for ClaimSunriseRewards {
        const PALLET: &'static str = "Fees";
        const FUNCTION: &'static str = "claim_sunrise_rewards";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Claim available sunrise rewards"]
        #[doc = ""]
        #[doc = "- `era_index`: Era to claim rewards"]
        #[doc = ""]
        #[doc = "Emits `SunriseRewardsClaimed` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn claim_sunrise_rewards(
          &self,
          era_index: ::core::primitive::u32,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<
            'a,
            T,
            X,
            ClaimSunriseRewards,
            DispatchError,
            root_mod::Event,
          >,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<ClaimSunriseRewards>()?
          };
          if runtime_call_hash
            == [
              221u8, 129u8, 69u8, 129u8, 216u8, 203u8, 162u8, 247u8, 150u8, 16u8, 187u8, 182u8,
              71u8, 55u8, 127u8, 191u8, 245u8, 157u8, 204u8, 33u8, 200u8, 230u8, 155u8, 87u8,
              104u8, 52u8, 162u8, 43u8, 8u8, 151u8, 212u8, 238u8,
            ]
          {
            let call = ClaimSunriseRewards { era_index };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_fees::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct FeesPercentageUpdated(pub runtime_types::sp_arithmetic::per_things::Percent);
      impl ::subxt::Event for FeesPercentageUpdated {
        const PALLET: &'static str = "Fees";
        const EVENT: &'static str = "FeesPercentageUpdated";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SessionEnded {
        pub era_index: ::core::primitive::u32,
        pub session_index: ::core::primitive::u64,
        pub session_fees_by_currency: ::std::vec::Vec<(
          runtime_types::tidefi_primitives::CurrencyId,
          ::core::primitive::u128,
        )>,
      }
      impl ::subxt::Event for SessionEnded {
        const PALLET: &'static str = "Fees";
        const EVENT: &'static str = "SessionEnded";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      pub struct EraStarted {
        pub era_index: ::core::primitive::u32,
      }
      impl ::subxt::Event for EraStarted {
        const PALLET: &'static str = "Fees";
        const EVENT: &'static str = "EraStarted";
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      pub struct EraEnded {
        pub era_index: ::core::primitive::u32,
      }
      impl ::subxt::Event for EraEnded {
        const PALLET: &'static str = "Fees";
        const EVENT: &'static str = "EraEnded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SunriseRewarded {
        pub era_index: ::core::primitive::u32,
        pub pool_id: ::core::primitive::u8,
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
        pub reward: ::core::primitive::u128,
      }
      impl ::subxt::Event for SunriseRewarded {
        const PALLET: &'static str = "Fees";
        const EVENT: &'static str = "SunriseRewarded";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SunriseClaimed {
        pub era_index: ::core::primitive::u32,
        pub account_id: ::subxt::sp_core::crypto::AccountId32,
        pub reward: ::core::primitive::u128,
      }
      impl ::subxt::Event for SunriseClaimed {
        const PALLET: &'static str = "Fees";
        const EVENT: &'static str = "SunriseClaimed";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct ActiveEra;
      impl ::subxt::StorageEntry for ActiveEra {
        const PALLET: &'static str = "Fees";
        const STORAGE: &'static str = "ActiveEra";
        type Value = runtime_types::tidefi_primitives::ActiveEraInfo<::core::primitive::u32>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct SunrisePools;
      impl ::subxt::StorageEntry for SunrisePools {
        const PALLET: &'static str = "Fees";
        const STORAGE: &'static str = "SunrisePools";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
          runtime_types::tidefi_primitives::SunriseSwapPool,
        >;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct CurrentSession;
      impl ::subxt::StorageEntry for CurrentSession {
        const PALLET: &'static str = "Fees";
        const STORAGE: &'static str = "CurrentSession";
        type Value = ::core::primitive::u64;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct EraTotalFees<'a>(
        pub &'a ::core::primitive::u32,
        pub &'a runtime_types::tidefi_primitives::CurrencyId,
      );
      impl ::subxt::StorageEntry for EraTotalFees<'_> {
        const PALLET: &'static str = "Fees";
        const STORAGE: &'static str = "EraTotalFees";
        type Value = runtime_types::tidefi_primitives::Fee;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Blake2_128Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Blake2_128Concat),
          ])
        }
      }
      pub struct StoredSessions<'a>(pub &'a ::core::primitive::u64);
      impl ::subxt::StorageEntry for StoredSessions<'_> {
        const PALLET: &'static str = "Fees";
        const STORAGE: &'static str = "StoredSessions";
        type Value = ();
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
            &self.0,
            ::subxt::StorageHasher::Blake2_128Concat,
          )])
        }
      }
      pub struct OrderBookPrice<'a>(
        pub &'a runtime_types::tidefi_primitives::CurrencyId,
        pub &'a runtime_types::tidefi_primitives::CurrencyId,
      );
      impl ::subxt::StorageEntry for OrderBookPrice<'_> {
        const PALLET: &'static str = "Fees";
        const STORAGE: &'static str = "OrderBookPrice";
        type Value = runtime_types::sp_arithmetic::fixed_point::FixedU128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Blake2_128Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Blake2_128Concat),
          ])
        }
      }
      pub struct SessionTotalFees<'a>(
        pub &'a ::core::primitive::u64,
        pub &'a runtime_types::tidefi_primitives::CurrencyId,
      );
      impl ::subxt::StorageEntry for SessionTotalFees<'_> {
        const PALLET: &'static str = "Fees";
        const STORAGE: &'static str = "SessionTotalFees";
        type Value = runtime_types::tidefi_primitives::Fee;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Blake2_128Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Blake2_128Concat),
          ])
        }
      }
      pub struct AccountFees<'a>(
        pub &'a ::core::primitive::u32,
        pub &'a ::subxt::sp_core::crypto::AccountId32,
      );
      impl ::subxt::StorageEntry for AccountFees<'_> {
        const PALLET: &'static str = "Fees";
        const STORAGE: &'static str = "AccountFees";
        type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
          runtime_types::tidefi_primitives::CurrencyId,
          runtime_types::tidefi_primitives::Fee,
        )>;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Blake2_128Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Blake2_128Concat),
          ])
        }
      }
      pub struct SunriseRewards<'a>(
        pub &'a ::subxt::sp_core::crypto::AccountId32,
        pub &'a ::core::primitive::u32,
      );
      impl ::subxt::StorageEntry for SunriseRewards<'_> {
        const PALLET: &'static str = "Fees";
        const STORAGE: &'static str = "SunriseRewards";
        type Value = ::core::primitive::u128;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Map(vec![
            ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Blake2_128Concat),
            ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Blake2_128Concat),
          ])
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " The active era information, it holds index and start."]
        #[doc = ""]
        #[doc = " The active era is the era being currently rewarded."]
        pub async fn active_era(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<
            runtime_types::tidefi_primitives::ActiveEraInfo<::core::primitive::u32>,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<ActiveEra>()?
          };
          if runtime_storage_hash
            == [
              11u8, 138u8, 166u8, 252u8, 74u8, 157u8, 111u8, 86u8, 135u8, 194u8, 143u8, 147u8,
              188u8, 36u8, 140u8, 58u8, 148u8, 163u8, 27u8, 86u8, 85u8, 158u8, 106u8, 226u8, 186u8,
              50u8, 54u8, 181u8, 219u8, 184u8, 233u8, 138u8,
            ]
          {
            let entry = ActiveEra;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The active sunrise tier availables."]
        pub async fn sunrise_pools(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            runtime_types::tidefi_primitives::SunriseSwapPool,
          >,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SunrisePools>()?
          };
          if runtime_storage_hash
            == [
              180u8, 0u8, 199u8, 243u8, 204u8, 164u8, 44u8, 92u8, 187u8, 2u8, 146u8, 189u8, 33u8,
              237u8, 85u8, 97u8, 124u8, 194u8, 70u8, 167u8, 36u8, 49u8, 82u8, 242u8, 229u8, 55u8,
              48u8, 161u8, 184u8, 101u8, 224u8, 49u8,
            ]
          {
            let entry = SunrisePools;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The current session of the era."]
        pub async fn current_session(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<CurrentSession>()?
          };
          if runtime_storage_hash
            == [
              232u8, 78u8, 2u8, 113u8, 156u8, 246u8, 134u8, 200u8, 38u8, 70u8, 106u8, 140u8, 29u8,
              2u8, 39u8, 16u8, 73u8, 20u8, 141u8, 8u8, 195u8, 202u8, 13u8, 46u8, 95u8, 94u8, 28u8,
              100u8, 212u8, 79u8, 7u8, 34u8,
            ]
          {
            let entry = CurrentSession;
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The total fees for the era."]
        #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
        pub async fn era_total_fees(
          &self,
          _0: &::core::primitive::u32,
          _1: &runtime_types::tidefi_primitives::CurrencyId,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<runtime_types::tidefi_primitives::Fee, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<EraTotalFees>()?
          };
          if runtime_storage_hash
            == [
              148u8, 128u8, 187u8, 228u8, 29u8, 224u8, 11u8, 91u8, 188u8, 234u8, 235u8, 118u8,
              115u8, 210u8, 155u8, 237u8, 231u8, 230u8, 113u8, 5u8, 71u8, 152u8, 203u8, 6u8, 63u8,
              46u8, 227u8, 133u8, 72u8, 49u8, 134u8, 141u8,
            ]
          {
            let entry = EraTotalFees(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The total fees for the era."]
        #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
        pub async fn era_total_fees_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, EraTotalFees<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<EraTotalFees>()?
          };
          if runtime_storage_hash
            == [
              148u8, 128u8, 187u8, 228u8, 29u8, 224u8, 11u8, 91u8, 188u8, 234u8, 235u8, 118u8,
              115u8, 210u8, 155u8, 237u8, 231u8, 230u8, 113u8, 5u8, 71u8, 152u8, 203u8, 6u8, 63u8,
              46u8, 227u8, 133u8, 72u8, 49u8, 134u8, 141u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Map from all stored sessions."]
        pub async fn stored_sessions(
          &self,
          _0: &::core::primitive::u64,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::option::Option<()>, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StoredSessions>()?
          };
          if runtime_storage_hash
            == [
              118u8, 5u8, 194u8, 229u8, 0u8, 196u8, 206u8, 207u8, 197u8, 254u8, 167u8, 92u8, 67u8,
              85u8, 24u8, 202u8, 14u8, 245u8, 64u8, 113u8, 245u8, 28u8, 198u8, 97u8, 213u8, 93u8,
              80u8, 130u8, 56u8, 4u8, 211u8, 48u8,
            ]
          {
            let entry = StoredSessions(_0);
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Map from all stored sessions."]
        pub async fn stored_sessions_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, StoredSessions<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<StoredSessions>()?
          };
          if runtime_storage_hash
            == [
              118u8, 5u8, 194u8, 229u8, 0u8, 196u8, 206u8, 207u8, 197u8, 254u8, 167u8, 92u8, 67u8,
              85u8, 24u8, 202u8, 14u8, 245u8, 64u8, 113u8, 245u8, 28u8, 198u8, 97u8, 213u8, 93u8,
              80u8, 130u8, 56u8, 4u8, 211u8, 48u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Tdfy price of the orderbook reported by oracle every X minutes at the current market price."]
        #[doc = " We keep in sync order book of USDT values for our sunrise pool."]
        #[doc = ""]
        #[doc = " CurrencyId → USDT"]
        #[doc = " USDT → TDFY"]
        #[doc = ""]
        #[doc = " To get current TDFY USDT value;"]
        #[doc = ""]
        pub async fn order_book_price(
          &self,
          _0: &runtime_types::tidefi_primitives::CurrencyId,
          _1: &runtime_types::tidefi_primitives::CurrencyId,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::fixed_point::FixedU128,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<OrderBookPrice>()?
          };
          if runtime_storage_hash
            == [
              85u8, 84u8, 16u8, 178u8, 163u8, 141u8, 231u8, 173u8, 213u8, 45u8, 212u8, 230u8,
              143u8, 198u8, 100u8, 127u8, 220u8, 198u8, 6u8, 96u8, 126u8, 63u8, 183u8, 217u8, 44u8,
              91u8, 170u8, 64u8, 161u8, 184u8, 97u8, 58u8,
            ]
          {
            let entry = OrderBookPrice(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Tdfy price of the orderbook reported by oracle every X minutes at the current market price."]
        #[doc = " We keep in sync order book of USDT values for our sunrise pool."]
        #[doc = ""]
        #[doc = " CurrencyId → USDT"]
        #[doc = " USDT → TDFY"]
        #[doc = ""]
        #[doc = " To get current TDFY USDT value;"]
        #[doc = ""]
        pub async fn order_book_price_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, OrderBookPrice<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<OrderBookPrice>()?
          };
          if runtime_storage_hash
            == [
              85u8, 84u8, 16u8, 178u8, 163u8, 141u8, 231u8, 173u8, 213u8, 45u8, 212u8, 230u8,
              143u8, 198u8, 100u8, 127u8, 220u8, 198u8, 6u8, 96u8, 126u8, 63u8, 183u8, 217u8, 44u8,
              91u8, 170u8, 64u8, 161u8, 184u8, 97u8, 58u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The total fees for the session."]
        #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
        pub async fn session_total_fees(
          &self,
          _0: &::core::primitive::u64,
          _1: &runtime_types::tidefi_primitives::CurrencyId,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<runtime_types::tidefi_primitives::Fee, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SessionTotalFees>()?
          };
          if runtime_storage_hash
            == [
              18u8, 82u8, 131u8, 54u8, 128u8, 129u8, 83u8, 247u8, 72u8, 75u8, 234u8, 236u8, 9u8,
              164u8, 11u8, 124u8, 52u8, 252u8, 74u8, 77u8, 164u8, 110u8, 156u8, 138u8, 187u8, 29u8,
              230u8, 201u8, 121u8, 42u8, 249u8, 4u8,
            ]
          {
            let entry = SessionTotalFees(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " The total fees for the session."]
        #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
        pub async fn session_total_fees_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::subxt::KeyIter<'a, T, SessionTotalFees<'a>>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SessionTotalFees>()?
          };
          if runtime_storage_hash
            == [
              18u8, 82u8, 131u8, 54u8, 128u8, 129u8, 83u8, 247u8, 72u8, 75u8, 234u8, 236u8, 9u8,
              164u8, 11u8, 124u8, 52u8, 252u8, 74u8, 77u8, 164u8, 110u8, 156u8, 138u8, 187u8, 29u8,
              230u8, 201u8, 121u8, 42u8, 249u8, 4u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Account fees accumulated by eras"]
        pub async fn account_fees(
          &self,
          _0: &::core::primitive::u32,
          _1: &::subxt::sp_core::crypto::AccountId32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
            runtime_types::tidefi_primitives::CurrencyId,
            runtime_types::tidefi_primitives::Fee,
          )>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AccountFees>()?
          };
          if runtime_storage_hash
            == [
              58u8, 221u8, 146u8, 183u8, 123u8, 159u8, 208u8, 241u8, 138u8, 139u8, 165u8, 150u8,
              242u8, 147u8, 75u8, 40u8, 16u8, 176u8, 147u8, 229u8, 234u8, 46u8, 72u8, 198u8, 110u8,
              84u8, 193u8, 93u8, 206u8, 162u8, 134u8, 98u8,
            ]
          {
            let entry = AccountFees(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Account fees accumulated by eras"]
        pub async fn account_fees_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, AccountFees<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AccountFees>()?
          };
          if runtime_storage_hash
            == [
              58u8, 221u8, 146u8, 183u8, 123u8, 159u8, 208u8, 241u8, 138u8, 139u8, 165u8, 150u8,
              242u8, 147u8, 75u8, 40u8, 16u8, 176u8, 147u8, 229u8, 234u8, 46u8, 72u8, 198u8, 110u8,
              84u8, 193u8, 93u8, 206u8, 162u8, 134u8, 98u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Account fees for current era"]
        pub async fn sunrise_rewards(
          &self,
          _0: &::subxt::sp_core::crypto::AccountId32,
          _1: &::core::primitive::u32,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError> {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SunriseRewards>()?
          };
          if runtime_storage_hash
            == [
              60u8, 101u8, 145u8, 238u8, 69u8, 95u8, 145u8, 68u8, 184u8, 138u8, 235u8, 216u8, 14u8,
              243u8, 219u8, 17u8, 37u8, 235u8, 189u8, 244u8, 211u8, 185u8, 113u8, 26u8, 185u8,
              139u8, 109u8, 31u8, 20u8, 190u8, 40u8, 108u8,
            ]
          {
            let entry = SunriseRewards(_0, _1);
            self
              .client
              .storage()
              .fetch_or_default(&entry, block_hash)
              .await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Account fees for current era"]
        pub async fn sunrise_rewards_iter(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<::subxt::KeyIter<'a, T, SunriseRewards<'a>>, ::subxt::BasicError>
        {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<SunriseRewards>()?
          };
          if runtime_storage_hash
            == [
              60u8, 101u8, 145u8, 238u8, 69u8, 95u8, 145u8, 68u8, 184u8, 138u8, 235u8, 216u8, 14u8,
              243u8, 219u8, 17u8, 37u8, 235u8, 189u8, 244u8, 211u8, 185u8, 113u8, 26u8, 185u8,
              139u8, 109u8, 31u8, 20u8, 190u8, 40u8, 108u8,
            ]
          {
            self.client.storage().iter(block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Pallet ID"]
        pub fn fees_pallet_id(
          &self,
        ) -> ::core::result::Result<runtime_types::frame_support::PalletId, ::subxt::BasicError>
        {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Fees", "FeesPalletId")?
            == [
              230u8, 70u8, 183u8, 43u8, 11u8, 254u8, 43u8, 175u8, 108u8, 39u8, 247u8, 248u8, 174u8,
              240u8, 20u8, 159u8, 245u8, 126u8, 63u8, 31u8, 110u8, 200u8, 169u8, 229u8, 57u8, 52u8,
              180u8, 58u8, 156u8, 87u8, 47u8, 149u8,
            ]
          {
            let pallet = metadata.pallet("Fees")?;
            let constant = pallet.constant("FeesPalletId")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Number of sessions per era"]
        pub fn sessions_per_era(
          &self,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Fees", "SessionsPerEra")?
            == [
              36u8, 111u8, 81u8, 132u8, 61u8, 231u8, 194u8, 186u8, 130u8, 209u8, 45u8, 20u8, 229u8,
              220u8, 40u8, 22u8, 195u8, 63u8, 143u8, 26u8, 211u8, 87u8, 88u8, 155u8, 102u8, 155u8,
              4u8, 29u8, 229u8, 250u8, 41u8, 46u8,
            ]
          {
            let pallet = metadata.pallet("Fees")?;
            let constant = pallet.constant("SessionsPerEra")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Number of sessions to keep in archive"]
        pub fn sessions_archive(
          &self,
        ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Fees", "SessionsArchive")?
            == [
              148u8, 148u8, 202u8, 26u8, 123u8, 23u8, 138u8, 32u8, 107u8, 241u8, 22u8, 126u8,
              211u8, 188u8, 100u8, 150u8, 1u8, 248u8, 108u8, 7u8, 219u8, 168u8, 113u8, 88u8, 252u8,
              9u8, 198u8, 150u8, 250u8, 235u8, 56u8, 92u8,
            ]
          {
            let pallet = metadata.pallet("Fees")?;
            let constant = pallet.constant("SessionsArchive")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Number of block per session"]
        pub fn blocks_per_session(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Fees", "BlocksPerSession")?
            == [
              52u8, 203u8, 248u8, 94u8, 80u8, 242u8, 36u8, 166u8, 234u8, 85u8, 207u8, 47u8, 216u8,
              225u8, 221u8, 219u8, 145u8, 35u8, 78u8, 245u8, 198u8, 236u8, 22u8, 112u8, 144u8,
              130u8, 243u8, 248u8, 159u8, 236u8, 248u8, 53u8,
            ]
          {
            let pallet = metadata.pallet("Fees")?;
            let constant = pallet.constant("BlocksPerSession")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Number of blocks to wait before allowing users to claim their sunrise rewards, after an era is completed."]
        pub fn blocks_sunrise_claims(
          &self,
        ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError> {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Fees", "BlocksSunriseClaims")?
            == [
              192u8, 118u8, 118u8, 195u8, 64u8, 137u8, 50u8, 126u8, 8u8, 65u8, 197u8, 31u8, 236u8,
              167u8, 52u8, 158u8, 33u8, 149u8, 37u8, 212u8, 60u8, 119u8, 149u8, 253u8, 212u8, 12u8,
              249u8, 52u8, 197u8, 195u8, 119u8, 57u8,
            ]
          {
            let pallet = metadata.pallet("Fees")?;
            let constant = pallet.constant("BlocksSunriseClaims")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Retail user swap fee"]
        pub fn fee_amount(
          &self,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::per_things::Permill,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Fees", "FeeAmount")?
            == [
              30u8, 33u8, 110u8, 229u8, 96u8, 177u8, 149u8, 130u8, 143u8, 12u8, 237u8, 99u8, 48u8,
              64u8, 136u8, 22u8, 239u8, 112u8, 243u8, 191u8, 42u8, 135u8, 133u8, 57u8, 117u8,
              180u8, 78u8, 99u8, 158u8, 176u8, 109u8, 157u8,
            ]
          {
            let pallet = metadata.pallet("Fees")?;
            let constant = pallet.constant("FeeAmount")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Market maker market order fee"]
        pub fn market_maker_fee_amount(
          &self,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::per_things::Permill,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Fees", "MarketMakerFeeAmount")?
            == [
              97u8, 26u8, 133u8, 37u8, 194u8, 237u8, 32u8, 16u8, 99u8, 207u8, 40u8, 234u8, 198u8,
              97u8, 34u8, 114u8, 54u8, 46u8, 159u8, 146u8, 242u8, 94u8, 163u8, 18u8, 162u8, 201u8,
              160u8, 88u8, 252u8, 15u8, 199u8, 41u8,
            ]
          {
            let pallet = metadata.pallet("Fees")?;
            let constant = pallet.constant("MarketMakerFeeAmount")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = " Market maker limit order fee"]
        pub fn market_maker_limit_fee_amount(
          &self,
        ) -> ::core::result::Result<
          runtime_types::sp_arithmetic::per_things::Permill,
          ::subxt::BasicError,
        > {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("Fees", "MarketMakerLimitFeeAmount")?
            == [
              229u8, 75u8, 198u8, 230u8, 67u8, 10u8, 93u8, 235u8, 173u8, 197u8, 125u8, 30u8, 30u8,
              215u8, 84u8, 78u8, 35u8, 74u8, 130u8, 217u8, 94u8, 153u8, 48u8, 254u8, 8u8, 95u8,
              121u8, 113u8, 104u8, 59u8, 149u8, 230u8,
            ]
          {
            let pallet = metadata.pallet("Fees")?;
            let constant = pallet.constant("MarketMakerLimitFeeAmount")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod asset_registry {
    use super::root_mod;
    use super::runtime_types;
    pub mod calls {
      use super::root_mod;
      use super::runtime_types;
      type DispatchError = runtime_types::sp_runtime::DispatchError;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Register {
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub name: ::std::vec::Vec<::core::primitive::u8>,
        pub symbol: ::std::vec::Vec<::core::primitive::u8>,
        pub decimals: ::core::primitive::u8,
        pub existential_deposit: ::core::primitive::u128,
      }
      impl ::subxt::Call for Register {
        const PALLET: &'static str = "AssetRegistry";
        const FUNCTION: &'static str = "register";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SetStatus {
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub is_enabled: ::core::primitive::bool,
      }
      impl ::subxt::Call for SetStatus {
        const PALLET: &'static str = "AssetRegistry";
        const FUNCTION: &'static str = "set_status";
      }
      pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
      }
      impl<'a, T, X> TransactionApi<'a, T, X>
      where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
      {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self {
            client,
            marker: ::core::marker::PhantomData,
          }
        }
        #[doc = "Register new asset on chain."]
        #[doc = ""]
        #[doc = "- `currency_id`: The currency ID to register"]
        #[doc = "- `name`: Currency name. Ex: `Bitcoin`"]
        #[doc = "- `symbol`: Currency symbol. Ex: `BTC`"]
        #[doc = "- `decimals`: Number of decimals for the asset. Ex: `8`"]
        #[doc = "- `existential_deposit`: Number of token required to keep the balance alive. Ex: `1`"]
        #[doc = ""]
        #[doc = "Emits `Registered` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn register(
          &self,
          currency_id: runtime_types::tidefi_primitives::CurrencyId,
          name: ::std::vec::Vec<::core::primitive::u8>,
          symbol: ::std::vec::Vec<::core::primitive::u8>,
          decimals: ::core::primitive::u8,
          existential_deposit: ::core::primitive::u128,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, Register, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<Register>()?
          };
          if runtime_call_hash
            == [
              133u8, 60u8, 151u8, 161u8, 208u8, 50u8, 49u8, 51u8, 178u8, 15u8, 36u8, 115u8, 202u8,
              250u8, 155u8, 77u8, 166u8, 242u8, 4u8, 26u8, 29u8, 152u8, 61u8, 86u8, 51u8, 23u8,
              136u8, 243u8, 23u8, 125u8, 97u8, 69u8,
            ]
          {
            let call = Register {
              currency_id,
              name,
              symbol,
              decimals,
              existential_deposit,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
        #[doc = "Update asset status."]
        #[doc = ""]
        #[doc = "- `currency_id`: The currency ID to register"]
        #[doc = "- `is_enabled`: Is the currency enabled on chain?"]
        #[doc = ""]
        #[doc = "Emits `StatusChanged` event when successful."]
        #[doc = ""]
        #[doc = "Weight: `O(1)`"]
        pub fn set_status(
          &self,
          currency_id: runtime_types::tidefi_primitives::CurrencyId,
          is_enabled: ::core::primitive::bool,
        ) -> Result<
          ::subxt::SubmittableExtrinsic<'a, T, X, SetStatus, DispatchError, root_mod::Event>,
          ::subxt::BasicError,
        > {
          let runtime_call_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.call_hash::<SetStatus>()?
          };
          if runtime_call_hash
            == [
              168u8, 109u8, 74u8, 241u8, 142u8, 168u8, 184u8, 93u8, 53u8, 250u8, 193u8, 17u8,
              191u8, 200u8, 75u8, 138u8, 14u8, 57u8, 82u8, 156u8, 11u8, 221u8, 116u8, 125u8, 87u8,
              127u8, 51u8, 227u8, 87u8, 185u8, 195u8, 128u8,
            ]
          {
            let call = SetStatus {
              currency_id,
              is_enabled,
            };
            Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub type Event = runtime_types::pallet_asset_registry::pallet::Event;
    pub mod events {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Asset was registered. \\[currency_id\\]"]
      pub struct Registered(pub runtime_types::tidefi_primitives::CurrencyId);
      impl ::subxt::Event for Registered {
        const PALLET: &'static str = "AssetRegistry";
        const EVENT: &'static str = "Registered";
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      #[doc = "Asset was updated. \\[currency_id, is_enabled\\]"]
      pub struct StatusChanged(
        pub runtime_types::tidefi_primitives::CurrencyId,
        pub ::core::primitive::bool,
      );
      impl ::subxt::Event for StatusChanged {
        const PALLET: &'static str = "AssetRegistry";
        const EVENT: &'static str = "StatusChanged";
      }
    }
    pub mod storage {
      use super::runtime_types;
      pub struct AssetRegistryAccountId;
      impl ::subxt::StorageEntry for AssetRegistryAccountId {
        const PALLET: &'static str = "AssetRegistry";
        const STORAGE: &'static str = "AssetRegistryAccountId";
        type Value = ::subxt::sp_core::crypto::AccountId32;
        fn key(&self) -> ::subxt::StorageEntryKey {
          ::subxt::StorageEntryKey::Plain
        }
      }
      pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Assets Account ID owner"]
        pub async fn asset_registry_account_id(
          &self,
          block_hash: ::core::option::Option<T::Hash>,
        ) -> ::core::result::Result<
          ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          ::subxt::BasicError,
        > {
          let runtime_storage_hash = {
            let locked_metadata = self.client.metadata();
            let metadata = locked_metadata.read();
            metadata.storage_hash::<AssetRegistryAccountId>()?
          };
          if runtime_storage_hash
            == [
              51u8, 207u8, 28u8, 62u8, 67u8, 65u8, 128u8, 204u8, 10u8, 78u8, 33u8, 115u8, 221u8,
              27u8, 67u8, 26u8, 188u8, 165u8, 185u8, 45u8, 212u8, 171u8, 0u8, 74u8, 40u8, 31u8,
              13u8, 143u8, 177u8, 190u8, 176u8, 60u8,
            ]
          {
            let entry = AssetRegistryAccountId;
            self.client.storage().fetch(&entry, block_hash).await
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
    pub mod constants {
      use super::runtime_types;
      pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
      }
      impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn new(client: &'a ::subxt::Client<T>) -> Self {
          Self { client }
        }
        #[doc = " Pallet ID"]
        pub fn asset_registry_pallet_id(
          &self,
        ) -> ::core::result::Result<runtime_types::frame_support::PalletId, ::subxt::BasicError>
        {
          let locked_metadata = self.client.metadata();
          let metadata = locked_metadata.read();
          if metadata.constant_hash("AssetRegistry", "AssetRegistryPalletId")?
            == [
              148u8, 125u8, 242u8, 19u8, 98u8, 220u8, 38u8, 128u8, 72u8, 157u8, 228u8, 205u8,
              144u8, 196u8, 7u8, 220u8, 26u8, 251u8, 208u8, 234u8, 138u8, 84u8, 182u8, 255u8,
              253u8, 90u8, 128u8, 146u8, 225u8, 66u8, 41u8, 104u8,
            ]
          {
            let pallet = metadata.pallet("AssetRegistry")?;
            let constant = pallet.constant("AssetRegistryPalletId")?;
            let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
            Ok(value)
          } else {
            Err(::subxt::MetadataError::IncompatibleMetadata.into())
          }
        }
      }
    }
  }
  pub mod runtime_types {
    use super::runtime_types;
    pub mod finality_grandpa {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Equivocation<_0, _1, _2> {
        pub round_number: ::core::primitive::u64,
        pub identity: _0,
        pub first: (_1, _2),
        pub second: (_1, _2),
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Precommit<_0, _1> {
        pub target_hash: _0,
        pub target_number: _1,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Prevote<_0, _1> {
        pub target_hash: _0,
        pub target_number: _1,
      }
    }
    pub mod frame_support {
      use super::runtime_types;
      pub mod dispatch {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum RawOrigin<_0> {
          #[codec(index = 0)]
          Root,
          #[codec(index = 1)]
          Signed(_0),
          #[codec(index = 2)]
          None,
        }
      }
      pub mod storage {
        use super::runtime_types;
        pub mod bounded_btree_map {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct BoundedBTreeMap<_0, _1>(pub ::subxt::KeyedVec<_0, _1>);
        }
        pub mod bounded_vec {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
        }
        pub mod weak_bounded_vec {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
        }
      }
      pub mod traits {
        use super::runtime_types;
        pub mod misc {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct WrapperKeepOpaque<_0>(#[codec(compact)] pub ::core::primitive::u32, pub _0);
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct WrapperOpaque<_0>(#[codec(compact)] pub ::core::primitive::u32, pub _0);
        }
        pub mod schedule {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub enum LookupError {
            #[codec(index = 0)]
            Unknown,
            #[codec(index = 1)]
            BadFormat,
          }
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub enum MaybeHashed<_0, _1> {
            #[codec(index = 0)]
            Value(_0),
            #[codec(index = 1)]
            Hash(_1),
          }
        }
        pub mod tokens {
          use super::runtime_types;
          pub mod misc {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
            pub enum BalanceStatus {
              #[codec(index = 0)]
              Free,
              #[codec(index = 1)]
              Reserved,
            }
          }
        }
      }
      pub mod weights {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum DispatchClass {
          #[codec(index = 0)]
          Normal,
          #[codec(index = 1)]
          Operational,
          #[codec(index = 2)]
          Mandatory,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct DispatchInfo {
          pub weight: ::core::primitive::u64,
          pub class: runtime_types::frame_support::weights::DispatchClass,
          pub pays_fee: runtime_types::frame_support::weights::Pays,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Pays {
          #[codec(index = 0)]
          Yes,
          #[codec(index = 1)]
          No,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct PerDispatchClass<_0> {
          pub normal: _0,
          pub operational: _0,
          pub mandatory: _0,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct RuntimeDbWeight {
          pub read: ::core::primitive::u64,
          pub write: ::core::primitive::u64,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct WeightToFeeCoefficient<_0> {
          pub coeff_integer: _0,
          pub coeff_frac: runtime_types::sp_arithmetic::per_things::Perbill,
          pub negative: ::core::primitive::bool,
          pub degree: ::core::primitive::u8,
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct PalletId(pub [::core::primitive::u8; 8usize]);
    }
    pub mod frame_system {
      use super::runtime_types;
      pub mod extensions {
        use super::runtime_types;
        pub mod check_genesis {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct CheckGenesis;
        }
        pub mod check_mortality {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
        }
        pub mod check_nonce {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
        }
        pub mod check_spec_version {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct CheckSpecVersion;
        }
        pub mod check_tx_version {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct CheckTxVersion;
        }
        pub mod check_weight {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct CheckWeight;
        }
      }
      pub mod limits {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct BlockLength {
          pub max: runtime_types::frame_support::weights::PerDispatchClass<::core::primitive::u32>,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct BlockWeights {
          pub base_block: ::core::primitive::u64,
          pub max_block: ::core::primitive::u64,
          pub per_class: runtime_types::frame_support::weights::PerDispatchClass<
            runtime_types::frame_system::limits::WeightsPerClass,
          >,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct WeightsPerClass {
          pub base_extrinsic: ::core::primitive::u64,
          pub max_extrinsic: ::core::option::Option<::core::primitive::u64>,
          pub max_total: ::core::option::Option<::core::primitive::u64>,
          pub reserved: ::core::option::Option<::core::primitive::u64>,
        }
      }
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "A dispatch that will fill the block weight up to the given ratio."]
          fill_block {
            ratio: runtime_types::sp_arithmetic::per_things::Perbill,
          },
          #[codec(index = 1)]
          #[doc = "Make some on-chain remark."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(1)`"]
          #[doc = "# </weight>"]
          remark {
            remark: ::std::vec::Vec<::core::primitive::u8>,
          },
          #[codec(index = 2)]
          #[doc = "Set the number of pages in the WebAssembly environment's heap."]
          set_heap_pages { pages: ::core::primitive::u64 },
          #[codec(index = 3)]
          #[doc = "Set the new runtime code."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
          #[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
          #[doc = "  expensive)."]
          #[doc = "- 1 storage write (codec `O(C)`)."]
          #[doc = "- 1 digest item."]
          #[doc = "- 1 event."]
          #[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
          #[doc = "expensive. We will treat this as a full block."]
          #[doc = "# </weight>"]
          set_code {
            code: ::std::vec::Vec<::core::primitive::u8>,
          },
          #[codec(index = 4)]
          #[doc = "Set the new runtime code without doing any checks of the given `code`."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(C)` where `C` length of `code`"]
          #[doc = "- 1 storage write (codec `O(C)`)."]
          #[doc = "- 1 digest item."]
          #[doc = "- 1 event."]
          #[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
          #[doc = "block. # </weight>"]
          set_code_without_checks {
            code: ::std::vec::Vec<::core::primitive::u8>,
          },
          #[codec(index = 5)]
          #[doc = "Set some items of storage."]
          set_storage {
            items: ::std::vec::Vec<(
              ::std::vec::Vec<::core::primitive::u8>,
              ::std::vec::Vec<::core::primitive::u8>,
            )>,
          },
          #[codec(index = 6)]
          #[doc = "Kill some items from storage."]
          kill_storage {
            keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
          },
          #[codec(index = 7)]
          #[doc = "Kill all storage items with a key that starts with the given prefix."]
          #[doc = ""]
          #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
          #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
          kill_prefix {
            prefix: ::std::vec::Vec<::core::primitive::u8>,
            subkeys: ::core::primitive::u32,
          },
          #[codec(index = 8)]
          #[doc = "Make some on-chain remark and emit event."]
          remark_with_event {
            remark: ::std::vec::Vec<::core::primitive::u8>,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "The name of specification does not match between the current runtime"]
          #[doc = "and the new runtime."]
          InvalidSpecName,
          #[codec(index = 1)]
          #[doc = "The specification version is not allowed to decrease between the current runtime"]
          #[doc = "and the new runtime."]
          SpecVersionNeedsToIncrease,
          #[codec(index = 2)]
          #[doc = "Failed to extract the runtime version from the new runtime."]
          #[doc = ""]
          #[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
          FailedToExtractRuntimeVersion,
          #[codec(index = 3)]
          #[doc = "Suicide called when the account has non-default composite data."]
          NonDefaultComposite,
          #[codec(index = 4)]
          #[doc = "There is a non-zero reference count preventing the account from being purged."]
          NonZeroRefCount,
          #[codec(index = 5)]
          #[doc = "The origin filter prevent the call to be dispatched."]
          CallFiltered,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "An extrinsic completed successfully."]
          ExtrinsicSuccess {
            dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
          },
          #[codec(index = 1)]
          #[doc = "An extrinsic failed."]
          ExtrinsicFailed {
            dispatch_error: runtime_types::sp_runtime::DispatchError,
            dispatch_info: runtime_types::frame_support::weights::DispatchInfo,
          },
          #[codec(index = 2)]
          #[doc = "`:code` was updated."]
          CodeUpdated,
          #[codec(index = 3)]
          #[doc = "A new account was created."]
          NewAccount {
            account: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 4)]
          #[doc = "An account was reaped."]
          KilledAccount {
            account: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 5)]
          #[doc = "On on-chain remark happened."]
          Remarked {
            sender: ::subxt::sp_core::crypto::AccountId32,
            hash: ::subxt::sp_core::H256,
          },
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AccountInfo<_0, _1> {
        pub nonce: _0,
        pub consumers: _0,
        pub providers: _0,
        pub sufficients: _0,
        pub data: _1,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct EventRecord<_0, _1> {
        pub phase: runtime_types::frame_system::Phase,
        pub event: _0,
        pub topics: ::std::vec::Vec<_1>,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct LastRuntimeUpgradeInfo {
        #[codec(compact)]
        pub spec_version: ::core::primitive::u32,
        pub spec_name: ::std::string::String,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Phase {
        #[codec(index = 0)]
        ApplyExtrinsic(::core::primitive::u32),
        #[codec(index = 1)]
        Finalization,
        #[codec(index = 2)]
        Initialization,
      }
    }
    pub mod lagoon_runtime {
      use super::runtime_types;
      pub mod config {
        use super::runtime_types;
        pub mod consensus {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct NposCompactSolution16 {
            pub votes1: ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u16)>,
            pub votes2: ::std::vec::Vec<(
              ::core::primitive::u32,
              (
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ),
              ::core::primitive::u16,
            )>,
            pub votes3: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 2usize],
              ::core::primitive::u16,
            )>,
            pub votes4: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 3usize],
              ::core::primitive::u16,
            )>,
            pub votes5: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 4usize],
              ::core::primitive::u16,
            )>,
            pub votes6: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 5usize],
              ::core::primitive::u16,
            )>,
            pub votes7: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 6usize],
              ::core::primitive::u16,
            )>,
            pub votes8: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 7usize],
              ::core::primitive::u16,
            )>,
            pub votes9: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 8usize],
              ::core::primitive::u16,
            )>,
            pub votes10: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 9usize],
              ::core::primitive::u16,
            )>,
            pub votes11: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 10usize],
              ::core::primitive::u16,
            )>,
            pub votes12: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 11usize],
              ::core::primitive::u16,
            )>,
            pub votes13: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 12usize],
              ::core::primitive::u16,
            )>,
            pub votes14: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 13usize],
              ::core::primitive::u16,
            )>,
            pub votes15: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 14usize],
              ::core::primitive::u16,
            )>,
            pub votes16: ::std::vec::Vec<(
              ::core::primitive::u32,
              [(
                ::core::primitive::u16,
                runtime_types::sp_arithmetic::per_things::PerU16,
              ); 15usize],
              ::core::primitive::u16,
            )>,
          }
        }
        pub mod proxy {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub enum ProxyType {
            #[codec(index = 0)]
            Any,
            #[codec(index = 1)]
            NonTransfer,
            #[codec(index = 2)]
            Governance,
            #[codec(index = 3)]
            Staking,
          }
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Call {
        #[codec(index = 0)]
        System(runtime_types::frame_system::pallet::Call),
        #[codec(index = 1)]
        Babe(runtime_types::pallet_babe::pallet::Call),
        #[codec(index = 2)]
        Timestamp(runtime_types::pallet_timestamp::pallet::Call),
        #[codec(index = 3)]
        Indices(runtime_types::pallet_indices::pallet::Call),
        #[codec(index = 4)]
        Balances(runtime_types::pallet_balances::pallet::Call),
        #[codec(index = 6)]
        Authorship(runtime_types::pallet_authorship::pallet::Call),
        #[codec(index = 7)]
        Staking(runtime_types::pallet_staking::pallet::pallet::Call),
        #[codec(index = 10)]
        Session(runtime_types::pallet_session::pallet::Call),
        #[codec(index = 11)]
        Grandpa(runtime_types::pallet_grandpa::pallet::Call),
        #[codec(index = 12)]
        ImOnline(runtime_types::pallet_im_online::pallet::Call),
        #[codec(index = 14)]
        Council(runtime_types::pallet_collective::pallet::Call),
        #[codec(index = 15)]
        TechnicalCommittee(runtime_types::pallet_collective::pallet::Call),
        #[codec(index = 16)]
        Elections(runtime_types::pallet_elections_phragmen::pallet::Call),
        #[codec(index = 17)]
        TechnicalMembership(runtime_types::pallet_membership::pallet::Call),
        #[codec(index = 18)]
        Treasury(runtime_types::pallet_treasury::pallet::Call),
        #[codec(index = 19)]
        Utility(runtime_types::pallet_utility::pallet::Call),
        #[codec(index = 20)]
        Identity(runtime_types::pallet_identity::pallet::Call),
        #[codec(index = 21)]
        ElectionProviderMultiPhase(
          runtime_types::pallet_election_provider_multi_phase::pallet::Call,
        ),
        #[codec(index = 22)]
        Recovery(runtime_types::pallet_recovery::pallet::Call),
        #[codec(index = 23)]
        Scheduler(runtime_types::pallet_scheduler::pallet::Call),
        #[codec(index = 24)]
        Proxy(runtime_types::pallet_proxy::pallet::Call),
        #[codec(index = 25)]
        Multisig(runtime_types::pallet_multisig::pallet::Call),
        #[codec(index = 26)]
        Bounties(runtime_types::pallet_bounties::pallet::Call),
        #[codec(index = 27)]
        Assets(runtime_types::pallet_assets::pallet::Call),
        #[codec(index = 28)]
        BagsList(runtime_types::pallet_bags_list::pallet::Call),
        #[codec(index = 29)]
        Preimage(runtime_types::pallet_preimage::pallet::Call),
        #[codec(index = 30)]
        Sudo(runtime_types::pallet_sudo::pallet::Call),
        #[codec(index = 50)]
        Tidefi(runtime_types::pallet_tidefi::pallet::Call),
        #[codec(index = 51)]
        TidefiStaking(runtime_types::pallet_tidefi_stake::pallet::Call),
        #[codec(index = 52)]
        Quorum(runtime_types::pallet_quorum::pallet::Call),
        #[codec(index = 53)]
        Oracle(runtime_types::pallet_oracle::pallet::Call),
        #[codec(index = 54)]
        Security(runtime_types::pallet_security::pallet::Call),
        #[codec(index = 55)]
        Fees(runtime_types::pallet_fees::pallet::Call),
        #[codec(index = 56)]
        AssetRegistry(runtime_types::pallet_asset_registry::pallet::Call),
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Event {
        #[codec(index = 0)]
        System(runtime_types::frame_system::pallet::Event),
        #[codec(index = 3)]
        Indices(runtime_types::pallet_indices::pallet::Event),
        #[codec(index = 4)]
        Balances(runtime_types::pallet_balances::pallet::Event),
        #[codec(index = 7)]
        Staking(runtime_types::pallet_staking::pallet::pallet::Event),
        #[codec(index = 8)]
        Offences(runtime_types::pallet_offences::pallet::Event),
        #[codec(index = 10)]
        Session(runtime_types::pallet_session::pallet::Event),
        #[codec(index = 11)]
        Grandpa(runtime_types::pallet_grandpa::pallet::Event),
        #[codec(index = 12)]
        ImOnline(runtime_types::pallet_im_online::pallet::Event),
        #[codec(index = 14)]
        Council(runtime_types::pallet_collective::pallet::Event),
        #[codec(index = 15)]
        TechnicalCommittee(runtime_types::pallet_collective::pallet::Event),
        #[codec(index = 16)]
        Elections(runtime_types::pallet_elections_phragmen::pallet::Event),
        #[codec(index = 17)]
        TechnicalMembership(runtime_types::pallet_membership::pallet::Event),
        #[codec(index = 18)]
        Treasury(runtime_types::pallet_treasury::pallet::Event),
        #[codec(index = 19)]
        Utility(runtime_types::pallet_utility::pallet::Event),
        #[codec(index = 20)]
        Identity(runtime_types::pallet_identity::pallet::Event),
        #[codec(index = 21)]
        ElectionProviderMultiPhase(
          runtime_types::pallet_election_provider_multi_phase::pallet::Event,
        ),
        #[codec(index = 22)]
        Recovery(runtime_types::pallet_recovery::pallet::Event),
        #[codec(index = 23)]
        Scheduler(runtime_types::pallet_scheduler::pallet::Event),
        #[codec(index = 24)]
        Proxy(runtime_types::pallet_proxy::pallet::Event),
        #[codec(index = 25)]
        Multisig(runtime_types::pallet_multisig::pallet::Event),
        #[codec(index = 26)]
        Bounties(runtime_types::pallet_bounties::pallet::Event),
        #[codec(index = 27)]
        Assets(runtime_types::pallet_assets::pallet::Event),
        #[codec(index = 28)]
        BagsList(runtime_types::pallet_bags_list::pallet::Event),
        #[codec(index = 29)]
        Preimage(runtime_types::pallet_preimage::pallet::Event),
        #[codec(index = 30)]
        Sudo(runtime_types::pallet_sudo::pallet::Event),
        #[codec(index = 50)]
        Tidefi(runtime_types::pallet_tidefi::pallet::Event),
        #[codec(index = 51)]
        TidefiStaking(runtime_types::pallet_tidefi_stake::pallet::Event),
        #[codec(index = 52)]
        Quorum(runtime_types::pallet_quorum::pallet::Event),
        #[codec(index = 53)]
        Oracle(runtime_types::pallet_oracle::pallet::Event),
        #[codec(index = 54)]
        Security(runtime_types::pallet_security::pallet::Event),
        #[codec(index = 55)]
        Fees(runtime_types::pallet_fees::pallet::Event),
        #[codec(index = 56)]
        AssetRegistry(runtime_types::pallet_asset_registry::pallet::Event),
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum OriginCaller {
        #[codec(index = 0)]
        system(
          runtime_types::frame_support::dispatch::RawOrigin<::subxt::sp_core::crypto::AccountId32>,
        ),
        #[codec(index = 14)]
        Council(runtime_types::pallet_collective::RawOrigin<::subxt::sp_core::crypto::AccountId32>),
        #[codec(index = 15)]
        TechnicalCommittee(
          runtime_types::pallet_collective::RawOrigin<::subxt::sp_core::crypto::AccountId32>,
        ),
        #[codec(index = 3)]
        Void(runtime_types::sp_core::Void),
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Runtime;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SessionKeys {
        pub grandpa: runtime_types::sp_finality_grandpa::app::Public,
        pub babe: runtime_types::sp_consensus_babe::app::Public,
        pub im_online: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
        pub authority_discovery: runtime_types::sp_authority_discovery::app::Public,
      }
    }
    pub mod pallet_asset_registry {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Register new asset on chain."]
          #[doc = ""]
          #[doc = "- `currency_id`: The currency ID to register"]
          #[doc = "- `name`: Currency name. Ex: `Bitcoin`"]
          #[doc = "- `symbol`: Currency symbol. Ex: `BTC`"]
          #[doc = "- `decimals`: Number of decimals for the asset. Ex: `8`"]
          #[doc = "- `existential_deposit`: Number of token required to keep the balance alive. Ex: `1`"]
          #[doc = ""]
          #[doc = "Emits `Registered` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          register {
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            name: ::std::vec::Vec<::core::primitive::u8>,
            symbol: ::std::vec::Vec<::core::primitive::u8>,
            decimals: ::core::primitive::u8,
            existential_deposit: ::core::primitive::u128,
          },
          #[codec(index = 1)]
          #[doc = "Update asset status."]
          #[doc = ""]
          #[doc = "- `currency_id`: The currency ID to register"]
          #[doc = "- `is_enabled`: Is the currency enabled on chain?"]
          #[doc = ""]
          #[doc = "Emits `StatusChanged` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          set_status {
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            is_enabled: ::core::primitive::bool,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "The access to the Asset registry pallet is not allowed for this account ID."]
          AccessDenied,
          #[codec(index = 1)]
          #[doc = "Asset ID is not registered in the asset-registry."]
          AssetNotRegistered,
          #[codec(index = 2)]
          #[doc = "Asset ID status is already the same as requested."]
          NoStatusChangeRequested,
          #[codec(index = 3)]
          #[doc = "Asset is already registered."]
          AssetAlreadyRegistered,
          #[codec(index = 4)]
          #[doc = "Invalid Currency Id"]
          CurrencyIdNotValid,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "Asset was registered. \\[currency_id\\]"]
          Registered(runtime_types::tidefi_primitives::CurrencyId),
          #[codec(index = 1)]
          #[doc = "Asset was updated. \\[currency_id, is_enabled\\]"]
          StatusChanged(
            runtime_types::tidefi_primitives::CurrencyId,
            ::core::primitive::bool,
          ),
        }
      }
    }
    pub mod pallet_assets {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Issue a new class of fungible assets from a public origin."]
          #[doc = ""]
          #[doc = "This new asset class has no assets initially and its owner is the origin."]
          #[doc = ""]
          #[doc = "The origin must be Signed and the sender must have sufficient funds free."]
          #[doc = ""]
          #[doc = "Funds of sender are reserved by `AssetDeposit`."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
          #[doc = "an existing asset."]
          #[doc = "- `admin`: The admin of this class of assets. The admin is the initial address of each"]
          #[doc = "member of the asset class's admin team."]
          #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
          #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
          #[doc = ""]
          #[doc = "Emits `Created` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          create {
            #[codec(compact)]
            id: ::core::primitive::u32,
            admin: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            min_balance: ::core::primitive::u128,
          },
          #[codec(index = 1)]
          #[doc = "Issue a new class of fungible assets from a privileged origin."]
          #[doc = ""]
          #[doc = "This new asset class has no assets initially."]
          #[doc = ""]
          #[doc = "The origin must conform to `ForceOrigin`."]
          #[doc = ""]
          #[doc = "Unlike `create`, no funds are reserved."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
          #[doc = "an existing asset."]
          #[doc = "- `owner`: The owner of this class of assets. The owner has full superuser permissions"]
          #[doc = "over this asset, but may later change and configure the permissions using"]
          #[doc = "`transfer_ownership` and `set_team`."]
          #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
          #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
          #[doc = ""]
          #[doc = "Emits `ForceCreated` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          force_create {
            #[codec(compact)]
            id: ::core::primitive::u32,
            owner: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            is_sufficient: ::core::primitive::bool,
            #[codec(compact)]
            min_balance: ::core::primitive::u128,
          },
          #[codec(index = 2)]
          #[doc = "Destroy are disabled in Tidechain"]
          destroy {
            #[codec(compact)]
            id: ::core::primitive::u32,
            witness: runtime_types::pallet_assets::types::DestroyWitness,
          },
          #[codec(index = 3)]
          #[doc = "Mint assets of a particular class."]
          #[doc = ""]
          #[doc = "The origin must be Signed and the sender must be the Issuer of the asset `id`."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to have some amount minted."]
          #[doc = "- `beneficiary`: The account to be credited with the minted assets."]
          #[doc = "- `amount`: The amount of the asset to be minted."]
          #[doc = ""]
          #[doc = "Emits `Issued` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          #[doc = "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."]
          mint {
            #[codec(compact)]
            id: ::core::primitive::u32,
            beneficiary: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            amount: ::core::primitive::u128,
          },
          #[codec(index = 4)]
          #[doc = "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`."]
          #[doc = ""]
          #[doc = "Origin must be Signed and the sender should be the Manager of the asset `id`."]
          #[doc = ""]
          #[doc = "Bails with `NoAccount` if the `who` is already dead."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to have some amount burned."]
          #[doc = "- `who`: The account to be debited from."]
          #[doc = "- `amount`: The maximum amount by which `who`'s balance should be reduced."]
          #[doc = ""]
          #[doc = "Emits `Burned` with the actual amount burned. If this takes the balance to below the"]
          #[doc = "minimum for the asset, then the amount burned is increased to take it to zero."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          #[doc = "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."]
          burn {
            #[codec(compact)]
            id: ::core::primitive::u32,
            who: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            amount: ::core::primitive::u128,
          },
          #[codec(index = 5)]
          #[doc = "Move some assets from the sender account to another."]
          #[doc = ""]
          #[doc = "Origin must be Signed."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
          #[doc = "- `target`: The account to be credited."]
          #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
          #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
          #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
          #[doc = "the minimum balance. Must be greater than zero."]
          #[doc = ""]
          #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
          #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
          #[doc = "to zero."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
          #[doc = "`target`."]
          transfer {
            #[codec(compact)]
            id: ::core::primitive::u32,
            target: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            amount: ::core::primitive::u128,
          },
          #[codec(index = 6)]
          #[doc = "Move some assets from the sender account to another, keeping the sender account alive."]
          #[doc = ""]
          #[doc = "Origin must be Signed."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
          #[doc = "- `target`: The account to be credited."]
          #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
          #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
          #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
          #[doc = "the minimum balance. Must be greater than zero."]
          #[doc = ""]
          #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
          #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
          #[doc = "to zero."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
          #[doc = "`target`."]
          transfer_keep_alive {
            #[codec(compact)]
            id: ::core::primitive::u32,
            target: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            amount: ::core::primitive::u128,
          },
          #[codec(index = 7)]
          #[doc = "Move some assets from one account to another."]
          #[doc = ""]
          #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
          #[doc = "- `source`: The account to be debited."]
          #[doc = "- `dest`: The account to be credited."]
          #[doc = "- `amount`: The amount by which the `source`'s balance of assets should be reduced and"]
          #[doc = "`dest`'s balance increased. The amount actually transferred may be slightly greater in"]
          #[doc = "the case that the transfer would otherwise take the `source` balance above zero but"]
          #[doc = "below the minimum balance. Must be greater than zero."]
          #[doc = ""]
          #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
          #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
          #[doc = "to zero."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          #[doc = "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of"]
          #[doc = "`dest`."]
          force_transfer {
            #[codec(compact)]
            id: ::core::primitive::u32,
            source: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            dest: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            amount: ::core::primitive::u128,
          },
          #[codec(index = 8)]
          #[doc = "Disallow further unprivileged transfers from an account."]
          #[doc = ""]
          #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to be frozen."]
          #[doc = "- `who`: The account to be frozen."]
          #[doc = ""]
          #[doc = "Emits `Frozen`."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          freeze {
            #[codec(compact)]
            id: ::core::primitive::u32,
            who: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          },
          #[codec(index = 9)]
          #[doc = "Allow unprivileged transfers from an account again."]
          #[doc = ""]
          #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to be frozen."]
          #[doc = "- `who`: The account to be unfrozen."]
          #[doc = ""]
          #[doc = "Emits `Thawed`."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          thaw {
            #[codec(compact)]
            id: ::core::primitive::u32,
            who: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          },
          #[codec(index = 10)]
          #[doc = "Disallow further unprivileged transfers for the asset class."]
          #[doc = ""]
          #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to be frozen."]
          #[doc = ""]
          #[doc = "Emits `Frozen`."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          freeze_asset {
            #[codec(compact)]
            id: ::core::primitive::u32,
          },
          #[codec(index = 11)]
          #[doc = "Allow unprivileged transfers for the asset again."]
          #[doc = ""]
          #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to be thawed."]
          #[doc = ""]
          #[doc = "Emits `Thawed`."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          thaw_asset {
            #[codec(compact)]
            id: ::core::primitive::u32,
          },
          #[codec(index = 12)]
          #[doc = "Change the Owner of an asset."]
          #[doc = ""]
          #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset."]
          #[doc = "- `owner`: The new Owner of this asset."]
          #[doc = ""]
          #[doc = "Emits `OwnerChanged`."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          transfer_ownership {
            #[codec(compact)]
            id: ::core::primitive::u32,
            owner: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          },
          #[codec(index = 13)]
          #[doc = "Change the Issuer, Admin and Freezer of an asset."]
          #[doc = ""]
          #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to be frozen."]
          #[doc = "- `issuer`: The new Issuer of this asset."]
          #[doc = "- `admin`: The new Admin of this asset."]
          #[doc = "- `freezer`: The new Freezer of this asset."]
          #[doc = ""]
          #[doc = "Emits `TeamChanged`."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          set_team {
            #[codec(compact)]
            id: ::core::primitive::u32,
            issuer: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            admin: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            freezer: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          },
          #[codec(index = 14)]
          #[doc = "Set the metadata for an asset."]
          #[doc = ""]
          #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
          #[doc = ""]
          #[doc = "Funds of sender are reserved according to the formula:"]
          #[doc = "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into"]
          #[doc = "account any already reserved funds."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to update."]
          #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
          #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
          #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
          #[doc = ""]
          #[doc = "Emits `MetadataSet`."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          set_metadata {
            #[codec(compact)]
            id: ::core::primitive::u32,
            name: ::std::vec::Vec<::core::primitive::u8>,
            symbol: ::std::vec::Vec<::core::primitive::u8>,
            decimals: ::core::primitive::u8,
          },
          #[codec(index = 15)]
          #[doc = "Clear the metadata for an asset."]
          #[doc = ""]
          #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
          #[doc = ""]
          #[doc = "Any deposit is freed for the asset owner."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to clear."]
          #[doc = ""]
          #[doc = "Emits `MetadataCleared`."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          clear_metadata {
            #[codec(compact)]
            id: ::core::primitive::u32,
          },
          #[codec(index = 16)]
          #[doc = "Force the metadata for an asset to some value."]
          #[doc = ""]
          #[doc = "Origin must be ForceOrigin."]
          #[doc = ""]
          #[doc = "Any deposit is left alone."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to update."]
          #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
          #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
          #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
          #[doc = ""]
          #[doc = "Emits `MetadataSet`."]
          #[doc = ""]
          #[doc = "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."]
          force_set_metadata {
            #[codec(compact)]
            id: ::core::primitive::u32,
            name: ::std::vec::Vec<::core::primitive::u8>,
            symbol: ::std::vec::Vec<::core::primitive::u8>,
            decimals: ::core::primitive::u8,
            is_frozen: ::core::primitive::bool,
          },
          #[codec(index = 17)]
          #[doc = "Clear the metadata for an asset."]
          #[doc = ""]
          #[doc = "Origin must be ForceOrigin."]
          #[doc = ""]
          #[doc = "Any deposit is returned."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset to clear."]
          #[doc = ""]
          #[doc = "Emits `MetadataCleared`."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          force_clear_metadata {
            #[codec(compact)]
            id: ::core::primitive::u32,
          },
          #[codec(index = 18)]
          #[doc = "Alter the attributes of a given asset."]
          #[doc = ""]
          #[doc = "Origin must be `ForceOrigin`."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset."]
          #[doc = "- `owner`: The new Owner of this asset."]
          #[doc = "- `issuer`: The new Issuer of this asset."]
          #[doc = "- `admin`: The new Admin of this asset."]
          #[doc = "- `freezer`: The new Freezer of this asset."]
          #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
          #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
          #[doc = "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient"]
          #[doc = "value to account for the state bloat associated with its balance storage. If set to"]
          #[doc = "`true`, then non-zero balances may be stored without a `consumer` reference (and thus"]
          #[doc = "an ED in the Balances pallet or whatever else is used to control user-account state"]
          #[doc = "growth)."]
          #[doc = "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin"]
          #[doc = "instructions."]
          #[doc = ""]
          #[doc = "Emits `AssetStatusChanged` with the identity of the asset."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          force_asset_status {
            #[codec(compact)]
            id: ::core::primitive::u32,
            owner: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            issuer: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            admin: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            freezer: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            min_balance: ::core::primitive::u128,
            is_sufficient: ::core::primitive::bool,
            is_frozen: ::core::primitive::bool,
          },
          #[codec(index = 19)]
          #[doc = "Approve an amount of asset for transfer by a delegated third-party account."]
          #[doc = ""]
          #[doc = "Origin must be Signed."]
          #[doc = ""]
          #[doc = "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account"]
          #[doc = "for the purpose of holding the approval. If some non-zero amount of assets is already"]
          #[doc = "approved from signing account to `delegate`, then it is topped up or unreserved to"]
          #[doc = "meet the right value."]
          #[doc = ""]
          #[doc = "NOTE: The signing account does not need to own `amount` of assets at the point of"]
          #[doc = "making this call."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset."]
          #[doc = "- `delegate`: The account to delegate permission to transfer asset."]
          #[doc = "- `amount`: The amount of asset that may be transferred by `delegate`. If there is"]
          #[doc = "already an approval in place, then this acts additively."]
          #[doc = ""]
          #[doc = "Emits `ApprovedTransfer` on success."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          approve_transfer {
            #[codec(compact)]
            id: ::core::primitive::u32,
            delegate: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            amount: ::core::primitive::u128,
          },
          #[codec(index = 20)]
          #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
          #[doc = ""]
          #[doc = "Origin must be Signed and there must be an approval in place between signer and"]
          #[doc = "`delegate`."]
          #[doc = ""]
          #[doc = "Unreserve any deposit previously reserved by `approve_transfer` for the approval."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset."]
          #[doc = "- `delegate`: The account delegated permission to transfer asset."]
          #[doc = ""]
          #[doc = "Emits `ApprovalCancelled` on success."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          cancel_approval {
            #[codec(compact)]
            id: ::core::primitive::u32,
            delegate: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          },
          #[codec(index = 21)]
          #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
          #[doc = ""]
          #[doc = "Origin must be either `ForceOrigin` or Signed origin with the signer being the Admin"]
          #[doc = "account of the asset `id`."]
          #[doc = ""]
          #[doc = "Unreserve any deposit previously reserved by `approve_transfer` for the approval."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset."]
          #[doc = "- `delegate`: The account delegated permission to transfer asset."]
          #[doc = ""]
          #[doc = "Emits `ApprovalCancelled` on success."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          force_cancel_approval {
            #[codec(compact)]
            id: ::core::primitive::u32,
            owner: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            delegate: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          },
          #[codec(index = 22)]
          #[doc = "Transfer some asset balance from a previously delegated account to some third-party"]
          #[doc = "account."]
          #[doc = ""]
          #[doc = "Origin must be Signed and there must be an approval in place by the `owner` to the"]
          #[doc = "signer."]
          #[doc = ""]
          #[doc = "If the entire amount approved for transfer is transferred, then any deposit previously"]
          #[doc = "reserved by `approve_transfer` is unreserved."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset."]
          #[doc = "- `owner`: The account which previously approved for a transfer of at least `amount` and"]
          #[doc = "from which the asset balance will be withdrawn."]
          #[doc = "- `destination`: The account to which the asset balance of `amount` will be transferred."]
          #[doc = "- `amount`: The amount of assets to transfer."]
          #[doc = ""]
          #[doc = "Emits `TransferredApproved` on success."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          transfer_approved {
            #[codec(compact)]
            id: ::core::primitive::u32,
            owner: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            destination: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            amount: ::core::primitive::u128,
          },
          #[codec(index = 23)]
          #[doc = "Create an asset account for non-provider assets."]
          #[doc = ""]
          #[doc = "A deposit will be taken from the signer account."]
          #[doc = ""]
          #[doc = "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit"]
          #[doc = "  to be taken."]
          #[doc = "- `id`: The identifier of the asset for the account to be created."]
          #[doc = ""]
          #[doc = "Emits `Touched` event when successful."]
          touch {
            #[codec(compact)]
            id: ::core::primitive::u32,
          },
          #[codec(index = 24)]
          #[doc = "Return the deposit (if any) of an asset account."]
          #[doc = ""]
          #[doc = "The origin must be Signed."]
          #[doc = ""]
          #[doc = "- `id`: The identifier of the asset for the account to be created."]
          #[doc = "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund."]
          #[doc = ""]
          #[doc = "Emits `Refunded` event when successful."]
          refund {
            #[codec(compact)]
            id: ::core::primitive::u32,
            allow_burn: ::core::primitive::bool,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Account balance must be greater than or equal to the transfer amount."]
          BalanceLow,
          #[codec(index = 1)]
          #[doc = "The account to alter does not exist."]
          NoAccount,
          #[codec(index = 2)]
          #[doc = "The signing account has no permission to do the operation."]
          NoPermission,
          #[codec(index = 3)]
          #[doc = "The given asset ID is unknown."]
          Unknown,
          #[codec(index = 4)]
          #[doc = "The origin account is frozen."]
          Frozen,
          #[codec(index = 5)]
          #[doc = "The asset ID is already taken."]
          InUse,
          #[codec(index = 6)]
          #[doc = "Invalid witness data given."]
          BadWitness,
          #[codec(index = 7)]
          #[doc = "Minimum balance should be non-zero."]
          MinBalanceZero,
          #[codec(index = 8)]
          #[doc = "Unable to increment the consumer reference counters on the account. Either no provider"]
          #[doc = "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the"]
          #[doc = "maximum number of consumers has been reached."]
          NoProvider,
          #[codec(index = 9)]
          #[doc = "Invalid metadata given."]
          BadMetadata,
          #[codec(index = 10)]
          #[doc = "No approval exists that would allow the transfer."]
          Unapproved,
          #[codec(index = 11)]
          #[doc = "The source account would not survive the transfer and it needs to stay alive."]
          WouldDie,
          #[codec(index = 12)]
          #[doc = "The asset-account already exists."]
          AlreadyExists,
          #[codec(index = 13)]
          #[doc = "The asset-account doesn't have an associated deposit."]
          NoDeposit,
          #[codec(index = 14)]
          #[doc = "The operation would result in funds being burned."]
          WouldBurn,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "Some asset class was created."]
          Created {
            asset_id: ::core::primitive::u32,
            creator: ::subxt::sp_core::crypto::AccountId32,
            owner: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 1)]
          #[doc = "Some assets were issued."]
          Issued {
            asset_id: ::core::primitive::u32,
            owner: ::subxt::sp_core::crypto::AccountId32,
            total_supply: ::core::primitive::u128,
          },
          #[codec(index = 2)]
          #[doc = "Some assets were transferred."]
          Transferred {
            asset_id: ::core::primitive::u32,
            from: ::subxt::sp_core::crypto::AccountId32,
            to: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 3)]
          #[doc = "Some assets were destroyed."]
          Burned {
            asset_id: ::core::primitive::u32,
            owner: ::subxt::sp_core::crypto::AccountId32,
            balance: ::core::primitive::u128,
          },
          #[codec(index = 4)]
          #[doc = "The management team changed."]
          TeamChanged {
            asset_id: ::core::primitive::u32,
            issuer: ::subxt::sp_core::crypto::AccountId32,
            admin: ::subxt::sp_core::crypto::AccountId32,
            freezer: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 5)]
          #[doc = "The owner changed."]
          OwnerChanged {
            asset_id: ::core::primitive::u32,
            owner: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 6)]
          #[doc = "Some account `who` was frozen."]
          Frozen {
            asset_id: ::core::primitive::u32,
            who: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 7)]
          #[doc = "Some account `who` was thawed."]
          Thawed {
            asset_id: ::core::primitive::u32,
            who: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 8)]
          #[doc = "Some asset `asset_id` was frozen."]
          AssetFrozen { asset_id: ::core::primitive::u32 },
          #[codec(index = 9)]
          #[doc = "Some asset `asset_id` was thawed."]
          AssetThawed { asset_id: ::core::primitive::u32 },
          #[codec(index = 10)]
          #[doc = "An asset class was destroyed."]
          Destroyed { asset_id: ::core::primitive::u32 },
          #[codec(index = 11)]
          #[doc = "Some asset class was force-created."]
          ForceCreated {
            asset_id: ::core::primitive::u32,
            owner: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 12)]
          #[doc = "New metadata has been set for an asset."]
          MetadataSet {
            asset_id: ::core::primitive::u32,
            name: ::std::vec::Vec<::core::primitive::u8>,
            symbol: ::std::vec::Vec<::core::primitive::u8>,
            decimals: ::core::primitive::u8,
            is_frozen: ::core::primitive::bool,
          },
          #[codec(index = 13)]
          #[doc = "Metadata has been cleared for an asset."]
          MetadataCleared { asset_id: ::core::primitive::u32 },
          #[codec(index = 14)]
          #[doc = "(Additional) funds have been approved for transfer to a destination account."]
          ApprovedTransfer {
            asset_id: ::core::primitive::u32,
            source: ::subxt::sp_core::crypto::AccountId32,
            delegate: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 15)]
          #[doc = "An approval for account `delegate` was cancelled by `owner`."]
          ApprovalCancelled {
            asset_id: ::core::primitive::u32,
            owner: ::subxt::sp_core::crypto::AccountId32,
            delegate: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 16)]
          #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
          #[doc = "the approved `delegate`."]
          TransferredApproved {
            asset_id: ::core::primitive::u32,
            owner: ::subxt::sp_core::crypto::AccountId32,
            delegate: ::subxt::sp_core::crypto::AccountId32,
            destination: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 17)]
          #[doc = "An asset has had its attributes changed by the `Force` origin."]
          AssetStatusChanged { asset_id: ::core::primitive::u32 },
        }
      }
      pub mod types {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Approval<_0, _1> {
          pub amount: _0,
          pub deposit: _0,
          #[codec(skip)]
          pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct AssetAccount<_0, _1, _2> {
          pub balance: _0,
          pub reserved: _0,
          pub is_frozen: ::core::primitive::bool,
          pub reason: runtime_types::pallet_assets::types::ExistenceReason<_0>,
          pub extra: _2,
          #[codec(skip)]
          pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct AssetDetails<_0, _1, _2> {
          pub owner: _1,
          pub issuer: _1,
          pub admin: _1,
          pub freezer: _1,
          pub supply: _0,
          pub deposit: _0,
          pub min_balance: _0,
          pub is_sufficient: ::core::primitive::bool,
          pub accounts: ::core::primitive::u32,
          pub sufficients: ::core::primitive::u32,
          pub approvals: ::core::primitive::u32,
          pub is_frozen: ::core::primitive::bool,
          #[codec(skip)]
          pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct AssetMetadata<_0, _1> {
          pub deposit: _0,
          pub name: _1,
          pub symbol: _1,
          pub decimals: ::core::primitive::u8,
          pub is_frozen: ::core::primitive::bool,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct DestroyWitness {
          #[codec(compact)]
          pub accounts: ::core::primitive::u32,
          #[codec(compact)]
          pub sufficients: ::core::primitive::u32,
          #[codec(compact)]
          pub approvals: ::core::primitive::u32,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum ExistenceReason<_0> {
          #[codec(index = 0)]
          Consumer,
          #[codec(index = 1)]
          Sufficient,
          #[codec(index = 2)]
          DepositHeld(_0),
          #[codec(index = 3)]
          DepositRefunded,
        }
      }
    }
    pub mod pallet_authorship {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Provide a set of uncles."]
          set_uncles {
            new_uncles: ::std::vec::Vec<
              runtime_types::sp_runtime::generic::header::Header<
                ::core::primitive::u32,
                runtime_types::sp_runtime::traits::BlakeTwo256,
              >,
            >,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "The uncle parent not in the chain."]
          InvalidUncleParent,
          #[codec(index = 1)]
          #[doc = "Uncles already set in the block."]
          UnclesAlreadySet,
          #[codec(index = 2)]
          #[doc = "Too many uncles."]
          TooManyUncles,
          #[codec(index = 3)]
          #[doc = "The uncle is genesis."]
          GenesisUncle,
          #[codec(index = 4)]
          #[doc = "The uncle is too high in chain."]
          TooHighUncle,
          #[codec(index = 5)]
          #[doc = "The uncle is already included."]
          UncleAlreadyIncluded,
          #[codec(index = 6)]
          #[doc = "The uncle isn't recent enough to be included."]
          OldUncle,
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum UncleEntryItem<_0, _1, _2> {
        #[codec(index = 0)]
        InclusionHeight(_0),
        #[codec(index = 1)]
        Uncle(_1, ::core::option::Option<_2>),
      }
    }
    pub mod pallet_babe {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Report authority equivocation/misbehavior. This method will verify"]
          #[doc = "the equivocation proof and validate the given key ownership proof"]
          #[doc = "against the extracted offender. If both are valid, the offence will"]
          #[doc = "be reported."]
          report_equivocation {
            equivocation_proof: ::std::boxed::Box<
              runtime_types::sp_consensus_slots::EquivocationProof<
                runtime_types::sp_runtime::generic::header::Header<
                  ::core::primitive::u32,
                  runtime_types::sp_runtime::traits::BlakeTwo256,
                >,
                runtime_types::sp_consensus_babe::app::Public,
              >,
            >,
            key_owner_proof: runtime_types::sp_session::MembershipProof,
          },
          #[codec(index = 1)]
          #[doc = "Report authority equivocation/misbehavior. This method will verify"]
          #[doc = "the equivocation proof and validate the given key ownership proof"]
          #[doc = "against the extracted offender. If both are valid, the offence will"]
          #[doc = "be reported."]
          #[doc = "This extrinsic must be called unsigned and it is expected that only"]
          #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
          #[doc = "if the block author is defined it will be defined as the equivocation"]
          #[doc = "reporter."]
          report_equivocation_unsigned {
            equivocation_proof: ::std::boxed::Box<
              runtime_types::sp_consensus_slots::EquivocationProof<
                runtime_types::sp_runtime::generic::header::Header<
                  ::core::primitive::u32,
                  runtime_types::sp_runtime::traits::BlakeTwo256,
                >,
                runtime_types::sp_consensus_babe::app::Public,
              >,
            >,
            key_owner_proof: runtime_types::sp_session::MembershipProof,
          },
          #[codec(index = 2)]
          #[doc = "Plan an epoch config change. The epoch config change is recorded and will be enacted on"]
          #[doc = "the next call to `enact_epoch_change`. The config will be activated one epoch after."]
          #[doc = "Multiple calls to this method will replace any existing planned config change that had"]
          #[doc = "not been enacted yet."]
          plan_config_change {
            config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
          InvalidEquivocationProof,
          #[codec(index = 1)]
          #[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
          InvalidKeyOwnershipProof,
          #[codec(index = 2)]
          #[doc = "A given equivocation report is valid but already previously reported."]
          DuplicateOffenceReport,
          #[codec(index = 3)]
          #[doc = "Submitted configuration is invalid."]
          InvalidConfiguration,
        }
      }
    }
    pub mod pallet_bags_list {
      use super::runtime_types;
      pub mod list {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Bag {
          pub head: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          pub tail: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum ListError {
          #[codec(index = 0)]
          Duplicate,
          #[codec(index = 1)]
          NotHeavier,
          #[codec(index = 2)]
          NotInSameBag,
          #[codec(index = 3)]
          NodeNotFound,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Node {
          pub id: ::subxt::sp_core::crypto::AccountId32,
          pub prev: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          pub next: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          pub bag_upper: ::core::primitive::u64,
        }
      }
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Declare that some `dislocated` account has, through rewards or penalties, sufficiently"]
          #[doc = "changed its score that it should properly fall into a different bag than its current"]
          #[doc = "one."]
          #[doc = ""]
          #[doc = "Anyone can call this function about any potentially dislocated account."]
          #[doc = ""]
          #[doc = "Will never return an error; if `dislocated` does not exist or doesn't need a rebag, then"]
          #[doc = "it is a noop and fees are still collected from `origin`."]
          rebag {
            dislocated: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 1)]
          #[doc = "Move the caller's Id directly in front of `lighter`."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and can only be called by the Id of"]
          #[doc = "the account going in front of `lighter`."]
          #[doc = ""]
          #[doc = "Only works if"]
          #[doc = "- both nodes are within the same bag,"]
          #[doc = "- and `origin` has a greater `Score` than `lighter`."]
          put_in_front_of {
            lighter: ::subxt::sp_core::crypto::AccountId32,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "A error in the list interface implementation."]
          List(runtime_types::pallet_bags_list::list::ListError),
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "Moved an account from one bag to another."]
          Rebagged {
            who: ::subxt::sp_core::crypto::AccountId32,
            from: ::core::primitive::u64,
            to: ::core::primitive::u64,
          },
        }
      }
    }
    pub mod pallet_balances {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Transfer some liquid free balance to another account."]
          #[doc = ""]
          #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
          #[doc = "If the sender's account is below the existential deposit as a result"]
          #[doc = "of the transfer, the account will be reaped."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
          #[doc = "  types. See related functions below."]
          #[doc = "- It contains a limited number of reads and writes internally and no complex"]
          #[doc = "  computation."]
          #[doc = ""]
          #[doc = "Related functions:"]
          #[doc = ""]
          #[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
          #[doc = "  - Transferring balances to accounts that did not exist before will cause"]
          #[doc = "    `T::OnNewAccount::on_new_account` to be called."]
          #[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
          #[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
          #[doc = "    that the transfer will not kill the origin account."]
          #[doc = "---------------------------------"]
          #[doc = "- Origin account is already in memory, so no DB operations for them."]
          #[doc = "# </weight>"]
          transfer {
            dest: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            value: ::core::primitive::u128,
          },
          #[codec(index = 1)]
          #[doc = "Set the balances of a given account."]
          #[doc = ""]
          #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
          #[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
          #[doc = "If the new free or reserved balance is below the existential deposit,"]
          #[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call is `root`."]
          set_balance {
            who: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            new_free: ::core::primitive::u128,
            #[codec(compact)]
            new_reserved: ::core::primitive::u128,
          },
          #[codec(index = 2)]
          #[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
          #[doc = "specified."]
          #[doc = "# <weight>"]
          #[doc = "- Same as transfer, but additional read and write because the source account is not"]
          #[doc = "  assumed to be in the overlay."]
          #[doc = "# </weight>"]
          force_transfer {
            source: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            dest: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            value: ::core::primitive::u128,
          },
          #[codec(index = 3)]
          #[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
          #[doc = "origin account."]
          #[doc = ""]
          #[doc = "99% of the time you want [`transfer`] instead."]
          #[doc = ""]
          #[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
          transfer_keep_alive {
            dest: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            value: ::core::primitive::u128,
          },
          #[codec(index = 4)]
          #[doc = "Transfer the entire transferable balance from the caller account."]
          #[doc = ""]
          #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
          #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
          #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
          #[doc = "you might need to prepare the account by removing any reference counters, storage"]
          #[doc = "deposits, etc..."]
          #[doc = ""]
          #[doc = "The dispatch origin of this call must be Signed."]
          #[doc = ""]
          #[doc = "- `dest`: The recipient of the transfer."]
          #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
          #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
          #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
          #[doc = "  keep the sender account alive (true). # <weight>"]
          #[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
          #[doc = "  #</weight>"]
          transfer_all {
            dest: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            keep_alive: ::core::primitive::bool,
          },
          #[codec(index = 5)]
          #[doc = "Unreserve some balance from a user by force."]
          #[doc = ""]
          #[doc = "Can only be called by ROOT."]
          force_unreserve {
            who: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            amount: ::core::primitive::u128,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Vesting balance too high to send value"]
          VestingBalance,
          #[codec(index = 1)]
          #[doc = "Account liquidity restrictions prevent withdrawal"]
          LiquidityRestrictions,
          #[codec(index = 2)]
          #[doc = "Balance too low to send value"]
          InsufficientBalance,
          #[codec(index = 3)]
          #[doc = "Value too low to create account due to existential deposit"]
          ExistentialDeposit,
          #[codec(index = 4)]
          #[doc = "Transfer/payment would kill account"]
          KeepAlive,
          #[codec(index = 5)]
          #[doc = "A vesting schedule already exists for this account"]
          ExistingVestingSchedule,
          #[codec(index = 6)]
          #[doc = "Beneficiary account must pre-exist"]
          DeadAccount,
          #[codec(index = 7)]
          #[doc = "Number of named reserves exceed MaxReserves"]
          TooManyReserves,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "An account was created with some free balance."]
          Endowed {
            account: ::subxt::sp_core::crypto::AccountId32,
            free_balance: ::core::primitive::u128,
          },
          #[codec(index = 1)]
          #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
          #[doc = "resulting in an outright loss."]
          DustLost {
            account: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 2)]
          #[doc = "Transfer succeeded."]
          Transfer {
            from: ::subxt::sp_core::crypto::AccountId32,
            to: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 3)]
          #[doc = "A balance was set by root."]
          BalanceSet {
            who: ::subxt::sp_core::crypto::AccountId32,
            free: ::core::primitive::u128,
            reserved: ::core::primitive::u128,
          },
          #[codec(index = 4)]
          #[doc = "Some balance was reserved (moved from free to reserved)."]
          Reserved {
            who: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 5)]
          #[doc = "Some balance was unreserved (moved from reserved to free)."]
          Unreserved {
            who: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 6)]
          #[doc = "Some balance was moved from the reserve of the first account to the second account."]
          #[doc = "Final argument indicates the destination balance type."]
          ReserveRepatriated {
            from: ::subxt::sp_core::crypto::AccountId32,
            to: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
            destination_status: runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
          },
          #[codec(index = 7)]
          #[doc = "Some amount was deposited (e.g. for transaction fees)."]
          Deposit {
            who: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 8)]
          #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
          Withdraw {
            who: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 9)]
          #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
          Slashed {
            who: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct AccountData<_0> {
        pub free: _0,
        pub reserved: _0,
        pub misc_frozen: _0,
        pub fee_frozen: _0,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct BalanceLock<_0> {
        pub id: [::core::primitive::u8; 8usize],
        pub amount: _0,
        pub reasons: runtime_types::pallet_balances::Reasons,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Reasons {
        #[codec(index = 0)]
        Fee,
        #[codec(index = 1)]
        Misc,
        #[codec(index = 2)]
        All,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Releases {
        #[codec(index = 0)]
        V1_0_0,
        #[codec(index = 1)]
        V2_0_0,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ReserveData<_0, _1> {
        pub id: _0,
        pub amount: _1,
      }
    }
    pub mod pallet_bounties {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Propose a new bounty."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as"]
          #[doc = "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,"]
          #[doc = "or slashed when rejected."]
          #[doc = ""]
          #[doc = "- `curator`: The curator account whom will manage this bounty."]
          #[doc = "- `fee`: The curator fee."]
          #[doc = "- `value`: The total payment amount of this bounty, curator fee included."]
          #[doc = "- `description`: The description of this bounty."]
          propose_bounty {
            #[codec(compact)]
            value: ::core::primitive::u128,
            description: ::std::vec::Vec<::core::primitive::u8>,
          },
          #[codec(index = 1)]
          #[doc = "Approve a bounty proposal. At a later time, the bounty will be funded and become active"]
          #[doc = "and the original deposit will be returned."]
          #[doc = ""]
          #[doc = "May only be called from `T::ApproveOrigin`."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "# </weight>"]
          approve_bounty {
            #[codec(compact)]
            bounty_id: ::core::primitive::u32,
          },
          #[codec(index = 2)]
          #[doc = "Assign a curator to a funded bounty."]
          #[doc = ""]
          #[doc = "May only be called from `T::ApproveOrigin`."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "# </weight>"]
          propose_curator {
            #[codec(compact)]
            bounty_id: ::core::primitive::u32,
            curator: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            #[codec(compact)]
            fee: ::core::primitive::u128,
          },
          #[codec(index = 3)]
          #[doc = "Unassign curator from a bounty."]
          #[doc = ""]
          #[doc = "This function can only be called by the `RejectOrigin` a signed origin."]
          #[doc = ""]
          #[doc = "If this function is called by the `RejectOrigin`, we assume that the curator is"]
          #[doc = "malicious or inactive. As a result, we will slash the curator when possible."]
          #[doc = ""]
          #[doc = "If the origin is the curator, we take this as a sign they are unable to do their job and"]
          #[doc = "they willingly give up. We could slash them, but for now we allow them to recover their"]
          #[doc = "deposit and exit without issue. (We may want to change this if it is abused.)"]
          #[doc = ""]
          #[doc = "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows"]
          #[doc = "anyone in the community to call out that a curator is not doing their due diligence, and"]
          #[doc = "we should pick a new curator. In this case the curator should also be slashed."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "# </weight>"]
          unassign_curator {
            #[codec(compact)]
            bounty_id: ::core::primitive::u32,
          },
          #[codec(index = 4)]
          #[doc = "Accept the curator role for a bounty."]
          #[doc = "A deposit will be reserved from curator and refund upon successful payout."]
          #[doc = ""]
          #[doc = "May only be called from the curator."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "# </weight>"]
          accept_curator {
            #[codec(compact)]
            bounty_id: ::core::primitive::u32,
          },
          #[codec(index = 5)]
          #[doc = "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds"]
          #[doc = "after a delay."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be the curator of this bounty."]
          #[doc = ""]
          #[doc = "- `bounty_id`: Bounty ID to award."]
          #[doc = "- `beneficiary`: The beneficiary account whom will receive the payout."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "# </weight>"]
          award_bounty {
            #[codec(compact)]
            bounty_id: ::core::primitive::u32,
            beneficiary: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          },
          #[codec(index = 6)]
          #[doc = "Claim the payout from an awarded bounty after payout delay."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be the beneficiary of this bounty."]
          #[doc = ""]
          #[doc = "- `bounty_id`: Bounty ID to claim."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "# </weight>"]
          claim_bounty {
            #[codec(compact)]
            bounty_id: ::core::primitive::u32,
          },
          #[codec(index = 7)]
          #[doc = "Cancel a proposed or active bounty. All the funds will be sent to treasury and"]
          #[doc = "the curator deposit will be unreserved if possible."]
          #[doc = ""]
          #[doc = "Only `T::RejectOrigin` is able to cancel a bounty."]
          #[doc = ""]
          #[doc = "- `bounty_id`: Bounty ID to cancel."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "# </weight>"]
          close_bounty {
            #[codec(compact)]
            bounty_id: ::core::primitive::u32,
          },
          #[codec(index = 8)]
          #[doc = "Extend the expiry time of an active bounty."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be the curator of this bounty."]
          #[doc = ""]
          #[doc = "- `bounty_id`: Bounty ID to extend."]
          #[doc = "- `remark`: additional information."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "# </weight>"]
          extend_bounty_expiry {
            #[codec(compact)]
            bounty_id: ::core::primitive::u32,
            remark: ::std::vec::Vec<::core::primitive::u8>,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Proposer's balance is too low."]
          InsufficientProposersBalance,
          #[codec(index = 1)]
          #[doc = "No proposal or bounty at that index."]
          InvalidIndex,
          #[codec(index = 2)]
          #[doc = "The reason given is just too big."]
          ReasonTooBig,
          #[codec(index = 3)]
          #[doc = "The bounty status is unexpected."]
          UnexpectedStatus,
          #[codec(index = 4)]
          #[doc = "Require bounty curator."]
          RequireCurator,
          #[codec(index = 5)]
          #[doc = "Invalid bounty value."]
          InvalidValue,
          #[codec(index = 6)]
          #[doc = "Invalid bounty fee."]
          InvalidFee,
          #[codec(index = 7)]
          #[doc = "A bounty payout is pending."]
          #[doc = "To cancel the bounty, you must unassign and slash the curator."]
          PendingPayout,
          #[codec(index = 8)]
          #[doc = "The bounties cannot be claimed/closed because it's still in the countdown period."]
          Premature,
          #[codec(index = 9)]
          #[doc = "The bounty cannot be closed because it has active child bounties."]
          HasActiveChildBounty,
          #[codec(index = 10)]
          #[doc = "Too many approvals are already queued."]
          TooManyQueued,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "New bounty proposal."]
          BountyProposed { index: ::core::primitive::u32 },
          #[codec(index = 1)]
          #[doc = "A bounty proposal was rejected; funds were slashed."]
          BountyRejected {
            index: ::core::primitive::u32,
            bond: ::core::primitive::u128,
          },
          #[codec(index = 2)]
          #[doc = "A bounty proposal is funded and became active."]
          BountyBecameActive { index: ::core::primitive::u32 },
          #[codec(index = 3)]
          #[doc = "A bounty is awarded to a beneficiary."]
          BountyAwarded {
            index: ::core::primitive::u32,
            beneficiary: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 4)]
          #[doc = "A bounty is claimed by beneficiary."]
          BountyClaimed {
            index: ::core::primitive::u32,
            payout: ::core::primitive::u128,
            beneficiary: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 5)]
          #[doc = "A bounty is cancelled."]
          BountyCanceled { index: ::core::primitive::u32 },
          #[codec(index = 6)]
          #[doc = "A bounty expiry is extended."]
          BountyExtended { index: ::core::primitive::u32 },
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Bounty<_0, _1, _2> {
        pub proposer: _0,
        pub value: _1,
        pub fee: _1,
        pub curator_deposit: _1,
        pub bond: _1,
        pub status: runtime_types::pallet_bounties::BountyStatus<_0, _2>,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum BountyStatus<_0, _1> {
        #[codec(index = 0)]
        Proposed,
        #[codec(index = 1)]
        Approved,
        #[codec(index = 2)]
        Funded,
        #[codec(index = 3)]
        CuratorProposed { curator: _0 },
        #[codec(index = 4)]
        Active { curator: _0, update_due: _1 },
        #[codec(index = 5)]
        PendingPayout {
          curator: _0,
          beneficiary: _0,
          unlock_at: _1,
        },
      }
    }
    pub mod pallet_collective {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Set the collective's membership."]
          #[doc = ""]
          #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
          #[doc = "- `prime`: The prime member whose vote sets the default."]
          #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
          #[doc = "  weight estimation."]
          #[doc = ""]
          #[doc = "Requires root origin."]
          #[doc = ""]
          #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
          #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
          #[doc = ""]
          #[doc = "# WARNING:"]
          #[doc = ""]
          #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
          #[doc = "implementation of the trait [`ChangeMembers`]."]
          #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
          #[doc = "with other logic managing the member set."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "## Weight"]
          #[doc = "- `O(MP + N)` where:"]
          #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
          #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
          #[doc = "  - `P` proposals-count (code-bounded)"]
          #[doc = "- DB:"]
          #[doc = "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the"]
          #[doc = "    members"]
          #[doc = "  - 1 storage read (codec `O(P)`) for reading the proposals"]
          #[doc = "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal"]
          #[doc = "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one"]
          #[doc = "# </weight>"]
          set_members {
            new_members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
            prime: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
            old_count: ::core::primitive::u32,
          },
          #[codec(index = 1)]
          #[doc = "Dispatch a proposal from a member using the `Member` origin."]
          #[doc = ""]
          #[doc = "Origin must be a member of the collective."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "## Weight"]
          #[doc = "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching"]
          #[doc = "  `proposal`"]
          #[doc = "- DB: 1 read (codec `O(M)`) + DB access of `proposal`"]
          #[doc = "- 1 event"]
          #[doc = "# </weight>"]
          execute {
            proposal: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
            #[codec(compact)]
            length_bound: ::core::primitive::u32,
          },
          #[codec(index = 2)]
          #[doc = "Add a new proposal to either be voted on or executed directly."]
          #[doc = ""]
          #[doc = "Requires the sender to be member."]
          #[doc = ""]
          #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
          #[doc = "or put up for voting."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "## Weight"]
          #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
          #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
          #[doc = "  - `M` is members-count (code- and governance-bounded)"]
          #[doc = "  - branching is influenced by `threshold` where:"]
          #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
          #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
          #[doc = "- DB:"]
          #[doc = "  - 1 storage read `is_member` (codec `O(M)`)"]
          #[doc = "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)"]
          #[doc = "  - DB accesses influenced by `threshold`:"]
          #[doc = "    - EITHER storage accesses done by `proposal` (`threshold < 2`)"]
          #[doc = "    - OR proposal insertion (`threshold <= 2`)"]
          #[doc = "      - 1 storage mutation `Proposals` (codec `O(P2)`)"]
          #[doc = "      - 1 storage mutation `ProposalCount` (codec `O(1)`)"]
          #[doc = "      - 1 storage write `ProposalOf` (codec `O(B)`)"]
          #[doc = "      - 1 storage write `Voting` (codec `O(M)`)"]
          #[doc = "  - 1 event"]
          #[doc = "# </weight>"]
          propose {
            #[codec(compact)]
            threshold: ::core::primitive::u32,
            proposal: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
            #[codec(compact)]
            length_bound: ::core::primitive::u32,
          },
          #[codec(index = 3)]
          #[doc = "Add an aye or nay vote for the sender to the given proposal."]
          #[doc = ""]
          #[doc = "Requires the sender to be a member."]
          #[doc = ""]
          #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
          #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
          #[doc = "fee."]
          #[doc = "# <weight>"]
          #[doc = "## Weight"]
          #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
          #[doc = "- DB:"]
          #[doc = "  - 1 storage read `Members` (codec `O(M)`)"]
          #[doc = "  - 1 storage mutation `Voting` (codec `O(M)`)"]
          #[doc = "- 1 event"]
          #[doc = "# </weight>"]
          vote {
            proposal: ::subxt::sp_core::H256,
            #[codec(compact)]
            index: ::core::primitive::u32,
            approve: ::core::primitive::bool,
          },
          #[codec(index = 4)]
          #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
          #[doc = ""]
          #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
          #[doc = ""]
          #[doc = "If called before the end of the voting period it will only close the vote if it is"]
          #[doc = "has enough votes to be approved or disapproved."]
          #[doc = ""]
          #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
          #[doc = "unless there is a prime member set and the prime member cast an approval."]
          #[doc = ""]
          #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
          #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
          #[doc = ""]
          #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
          #[doc = "proposal."]
          #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
          #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "## Weight"]
          #[doc = "- `O(B + M + P1 + P2)` where:"]
          #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
          #[doc = "  - `M` is members-count (code- and governance-bounded)"]
          #[doc = "  - `P1` is the complexity of `proposal` preimage."]
          #[doc = "  - `P2` is proposal-count (code-bounded)"]
          #[doc = "- DB:"]
          #[doc = " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)"]
          #[doc = " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec"]
          #[doc = "   `O(P2)`)"]
          #[doc = " - any mutations done while executing `proposal` (`P1`)"]
          #[doc = "- up to 3 events"]
          #[doc = "# </weight>"]
          close {
            proposal_hash: ::subxt::sp_core::H256,
            #[codec(compact)]
            index: ::core::primitive::u32,
            #[codec(compact)]
            proposal_weight_bound: ::core::primitive::u64,
            #[codec(compact)]
            length_bound: ::core::primitive::u32,
          },
          #[codec(index = 5)]
          #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
          #[doc = "state."]
          #[doc = ""]
          #[doc = "Must be called by the Root origin."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Complexity: O(P) where P is the number of max proposals"]
          #[doc = "DB Weight:"]
          #[doc = "* Reads: Proposals"]
          #[doc = "* Writes: Voting, Proposals, ProposalOf"]
          #[doc = "# </weight>"]
          disapprove_proposal {
            proposal_hash: ::subxt::sp_core::H256,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Account is not a member"]
          NotMember,
          #[codec(index = 1)]
          #[doc = "Duplicate proposals not allowed"]
          DuplicateProposal,
          #[codec(index = 2)]
          #[doc = "Proposal must exist"]
          ProposalMissing,
          #[codec(index = 3)]
          #[doc = "Mismatched index"]
          WrongIndex,
          #[codec(index = 4)]
          #[doc = "Duplicate vote ignored"]
          DuplicateVote,
          #[codec(index = 5)]
          #[doc = "Members are already initialized!"]
          AlreadyInitialized,
          #[codec(index = 6)]
          #[doc = "The close call was made too early, before the end of the voting."]
          TooEarly,
          #[codec(index = 7)]
          #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
          TooManyProposals,
          #[codec(index = 8)]
          #[doc = "The given weight bound for the proposal was too low."]
          WrongProposalWeight,
          #[codec(index = 9)]
          #[doc = "The given length bound for the proposal was too low."]
          WrongProposalLength,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
          #[doc = "`MemberCount`)."]
          Proposed {
            account: ::subxt::sp_core::crypto::AccountId32,
            proposal_index: ::core::primitive::u32,
            proposal_hash: ::subxt::sp_core::H256,
            threshold: ::core::primitive::u32,
          },
          #[codec(index = 1)]
          #[doc = "A motion (given hash) has been voted on by given account, leaving"]
          #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
          Voted {
            account: ::subxt::sp_core::crypto::AccountId32,
            proposal_hash: ::subxt::sp_core::H256,
            voted: ::core::primitive::bool,
            yes: ::core::primitive::u32,
            no: ::core::primitive::u32,
          },
          #[codec(index = 2)]
          #[doc = "A motion was approved by the required threshold."]
          Approved {
            proposal_hash: ::subxt::sp_core::H256,
          },
          #[codec(index = 3)]
          #[doc = "A motion was not approved by the required threshold."]
          Disapproved {
            proposal_hash: ::subxt::sp_core::H256,
          },
          #[codec(index = 4)]
          #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
          Executed {
            proposal_hash: ::subxt::sp_core::H256,
            result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
          },
          #[codec(index = 5)]
          #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
          MemberExecuted {
            proposal_hash: ::subxt::sp_core::H256,
            result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
          },
          #[codec(index = 6)]
          #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
          Closed {
            proposal_hash: ::subxt::sp_core::H256,
            yes: ::core::primitive::u32,
            no: ::core::primitive::u32,
          },
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum RawOrigin<_0> {
        #[codec(index = 0)]
        Members(::core::primitive::u32, ::core::primitive::u32),
        #[codec(index = 1)]
        Member(_0),
        #[codec(index = 2)]
        _Phantom,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Votes<_0, _1> {
        pub index: _1,
        pub threshold: _1,
        pub ayes: ::std::vec::Vec<_0>,
        pub nays: ::std::vec::Vec<_0>,
        pub end: _1,
      }
    }
    pub mod pallet_election_provider_multi_phase {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Submit a solution for the unsigned phase."]
          #[doc = ""]
          #[doc = "The dispatch origin fo this call must be __none__."]
          #[doc = ""]
          #[doc = "This submission is checked on the fly. Moreover, this unsigned solution is only"]
          #[doc = "validated when submitted to the pool from the **local** node. Effectively, this means"]
          #[doc = "that only active validators can submit this transaction when authoring a block (similar"]
          #[doc = "to an inherent)."]
          #[doc = ""]
          #[doc = "To prevent any incorrect solution (and thus wasted time/weight), this transaction will"]
          #[doc = "panic if the solution submitted by the validator is invalid in any way, effectively"]
          #[doc = "putting their authoring reward at risk."]
          #[doc = ""]
          #[doc = "No deposit or reward is associated with this submission."]
          submit_unsigned {
            raw_solution: ::std::boxed::Box<
              runtime_types::pallet_election_provider_multi_phase::RawSolution<
                runtime_types::lagoon_runtime::config::consensus::NposCompactSolution16,
              >,
            >,
            witness: runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
          },
          #[codec(index = 1)]
          #[doc = "Set a new value for `MinimumUntrustedScore`."]
          #[doc = ""]
          #[doc = "Dispatch origin must be aligned with `T::ForceOrigin`."]
          #[doc = ""]
          #[doc = "This check can be turned off by setting the value to `None`."]
          set_minimum_untrusted_score {
            maybe_next_score:
              ::core::option::Option<runtime_types::sp_npos_elections::ElectionScore>,
          },
          #[codec(index = 2)]
          #[doc = "Set a solution in the queue, to be handed out to the client of this pallet in the next"]
          #[doc = "call to `ElectionProvider::elect`."]
          #[doc = ""]
          #[doc = "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`."]
          #[doc = ""]
          #[doc = "The solution is not checked for any feasibility and is assumed to be trustworthy, as any"]
          #[doc = "feasibility check itself can in principle cause the election process to fail (due to"]
          #[doc = "memory/weight constrains)."]
          set_emergency_election_result {
            supports: ::std::vec::Vec<(
              ::subxt::sp_core::crypto::AccountId32,
              runtime_types::sp_npos_elections::Support<::subxt::sp_core::crypto::AccountId32>,
            )>,
          },
          #[codec(index = 3)]
          #[doc = "Submit a solution for the signed phase."]
          #[doc = ""]
          #[doc = "The dispatch origin fo this call must be __signed__."]
          #[doc = ""]
          #[doc = "The solution is potentially queued, based on the claimed score and processed at the end"]
          #[doc = "of the signed phase."]
          #[doc = ""]
          #[doc = "A deposit is reserved and recorded for the solution. Based on the outcome, the solution"]
          #[doc = "might be rewarded, slashed, or get all or a part of the deposit back."]
          submit {
            raw_solution: ::std::boxed::Box<
              runtime_types::pallet_election_provider_multi_phase::RawSolution<
                runtime_types::lagoon_runtime::config::consensus::NposCompactSolution16,
              >,
            >,
          },
          #[codec(index = 4)]
          #[doc = "Trigger the governance fallback."]
          #[doc = ""]
          #[doc = "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to"]
          #[doc = "calling [`Call::set_emergency_election_result`]."]
          governance_fallback {
            maybe_max_voters: ::core::option::Option<::core::primitive::u32>,
            maybe_max_targets: ::core::option::Option<::core::primitive::u32>,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Submission was too early."]
          PreDispatchEarlySubmission,
          #[codec(index = 1)]
          #[doc = "Wrong number of winners presented."]
          PreDispatchWrongWinnerCount,
          #[codec(index = 2)]
          #[doc = "Submission was too weak, score-wise."]
          PreDispatchWeakSubmission,
          #[codec(index = 3)]
          #[doc = "The queue was full, and the solution was not better than any of the existing ones."]
          SignedQueueFull,
          #[codec(index = 4)]
          #[doc = "The origin failed to pay the deposit."]
          SignedCannotPayDeposit,
          #[codec(index = 5)]
          #[doc = "Witness data to dispatchable is invalid."]
          SignedInvalidWitness,
          #[codec(index = 6)]
          #[doc = "The signed submission consumes too much weight"]
          SignedTooMuchWeight,
          #[codec(index = 7)]
          #[doc = "OCW submitted solution for wrong round"]
          OcwCallWrongEra,
          #[codec(index = 8)]
          #[doc = "Snapshot metadata should exist but didn't."]
          MissingSnapshotMetadata,
          #[codec(index = 9)]
          #[doc = "`Self::insert_submission` returned an invalid index."]
          InvalidSubmissionIndex,
          #[codec(index = 10)]
          #[doc = "The call is not allowed at this point."]
          CallNotAllowed,
          #[codec(index = 11)]
          #[doc = "The fallback failed"]
          FallbackFailed,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "A solution was stored with the given compute."]
          #[doc = ""]
          #[doc = "If the solution is signed, this means that it hasn't yet been processed. If the"]
          #[doc = "solution is unsigned, this means that it has also been processed."]
          #[doc = ""]
          #[doc = "The `bool` is `true` when a previous solution was ejected to make room for this one."]
          SolutionStored {
            election_compute: runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
            prev_ejected: ::core::primitive::bool,
          },
          #[codec(index = 1)]
          #[doc = "The election has been finalized, with `Some` of the given computation, or else if the"]
          #[doc = "election failed, `None`."]
          ElectionFinalized {
            election_compute: ::core::option::Option<
              runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
            >,
          },
          #[codec(index = 2)]
          #[doc = "An account has been rewarded for their signed submission being finalized."]
          Rewarded {
            account: ::subxt::sp_core::crypto::AccountId32,
            value: ::core::primitive::u128,
          },
          #[codec(index = 3)]
          #[doc = "An account has been slashed for submitting an invalid signed submission."]
          Slashed {
            account: ::subxt::sp_core::crypto::AccountId32,
            value: ::core::primitive::u128,
          },
          #[codec(index = 4)]
          #[doc = "The signed phase of the given round has started."]
          SignedPhaseStarted { round: ::core::primitive::u32 },
          #[codec(index = 5)]
          #[doc = "The unsigned phase of the given round has started."]
          UnsignedPhaseStarted { round: ::core::primitive::u32 },
        }
      }
      pub mod signed {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct SignedSubmission<_0, _1, _2> {
          pub who: _0,
          pub deposit: _1,
          pub raw_solution: runtime_types::pallet_election_provider_multi_phase::RawSolution<_2>,
          pub call_fee: _1,
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum ElectionCompute {
        #[codec(index = 0)]
        OnChain,
        #[codec(index = 1)]
        Signed,
        #[codec(index = 2)]
        Unsigned,
        #[codec(index = 3)]
        Fallback,
        #[codec(index = 4)]
        Emergency,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Phase<_0> {
        #[codec(index = 0)]
        Off,
        #[codec(index = 1)]
        Signed,
        #[codec(index = 2)]
        Unsigned((::core::primitive::bool, _0)),
        #[codec(index = 3)]
        Emergency,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RawSolution<_0> {
        pub solution: _0,
        pub score: runtime_types::sp_npos_elections::ElectionScore,
        pub round: ::core::primitive::u32,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ReadySolution<_0> {
        pub supports: ::std::vec::Vec<(_0, runtime_types::sp_npos_elections::Support<_0>)>,
        pub score: runtime_types::sp_npos_elections::ElectionScore,
        pub compute: runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RoundSnapshot {
        pub voters: ::std::vec::Vec<(
          ::subxt::sp_core::crypto::AccountId32,
          ::core::primitive::u64,
          runtime_types::frame_support::storage::bounded_vec::BoundedVec<
            ::subxt::sp_core::crypto::AccountId32,
          >,
        )>,
        pub targets: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SolutionOrSnapshotSize {
        #[codec(compact)]
        pub voters: ::core::primitive::u32,
        #[codec(compact)]
        pub targets: ::core::primitive::u32,
      }
    }
    pub mod pallet_elections_phragmen {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Vote for a set of candidates for the upcoming round of election. This can be called to"]
          #[doc = "set the initial votes, or update already existing votes."]
          #[doc = ""]
          #[doc = "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is"]
          #[doc = "reserved. The deposit is based on the number of votes and can be updated over time."]
          #[doc = ""]
          #[doc = "The `votes` should:"]
          #[doc = "  - not be empty."]
          #[doc = "  - be less than the number of possible candidates. Note that all current members and"]
          #[doc = "    runners-up are also automatically candidates for the next round."]
          #[doc = ""]
          #[doc = "If `value` is more than `who`'s free balance, then the maximum of the two is used."]
          #[doc = ""]
          #[doc = "The dispatch origin of this call must be signed."]
          #[doc = ""]
          #[doc = "### Warning"]
          #[doc = ""]
          #[doc = "It is the responsibility of the caller to **NOT** place all of their balance into the"]
          #[doc = "lock and keep some for further operations."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less."]
          #[doc = "# </weight>"]
          vote {
            votes: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
            #[codec(compact)]
            value: ::core::primitive::u128,
          },
          #[codec(index = 1)]
          #[doc = "Remove `origin` as a voter."]
          #[doc = ""]
          #[doc = "This removes the lock and returns the deposit."]
          #[doc = ""]
          #[doc = "The dispatch origin of this call must be signed and be a voter."]
          remove_voter,
          #[codec(index = 2)]
          #[doc = "Submit oneself for candidacy. A fixed amount of deposit is recorded."]
          #[doc = ""]
          #[doc = "All candidates are wiped at the end of the term. They either become a member/runner-up,"]
          #[doc = "or leave the system while their deposit is slashed."]
          #[doc = ""]
          #[doc = "The dispatch origin of this call must be signed."]
          #[doc = ""]
          #[doc = "### Warning"]
          #[doc = ""]
          #[doc = "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]"]
          #[doc = "to get their deposit back. Losing the spot in an election will always lead to a slash."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "The number of current candidates must be provided as witness data."]
          #[doc = "# </weight>"]
          submit_candidacy {
            #[codec(compact)]
            candidate_count: ::core::primitive::u32,
          },
          #[codec(index = 3)]
          #[doc = "Renounce one's intention to be a candidate for the next election round. 3 potential"]
          #[doc = "outcomes exist:"]
          #[doc = ""]
          #[doc = "- `origin` is a candidate and not elected in any set. In this case, the deposit is"]
          #[doc = "  unreserved, returned and origin is removed as a candidate."]
          #[doc = "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and"]
          #[doc = "  origin is removed as a runner-up."]
          #[doc = "- `origin` is a current member. In this case, the deposit is unreserved and origin is"]
          #[doc = "  removed as a member, consequently not being a candidate for the next round anymore."]
          #[doc = "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they"]
          #[doc = "  are immediately used. If the prime is renouncing, then no prime will exist until the"]
          #[doc = "  next round."]
          #[doc = ""]
          #[doc = "The dispatch origin of this call must be signed, and have one of the above roles."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "The type of renouncing must be provided as witness data."]
          #[doc = "# </weight>"]
          renounce_candidacy {
            renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
          },
          #[codec(index = 4)]
          #[doc = "Remove a particular member from the set. This is effective immediately and the bond of"]
          #[doc = "the outgoing member is slashed."]
          #[doc = ""]
          #[doc = "If a runner-up is available, then the best runner-up will be removed and replaces the"]
          #[doc = "outgoing member. Otherwise, a new phragmen election is started."]
          #[doc = ""]
          #[doc = "The dispatch origin of this call must be root."]
          #[doc = ""]
          #[doc = "Note that this does not affect the designated block number of the next election."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "If we have a replacement, we use a small weight. Else, since this is a root call and"]
          #[doc = "will go into phragmen, we assume full block for now."]
          #[doc = "# </weight>"]
          remove_member {
            who: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            has_replacement: ::core::primitive::bool,
          },
          #[codec(index = 5)]
          #[doc = "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The"]
          #[doc = "deposit of the removed voters are returned."]
          #[doc = ""]
          #[doc = "This is an root function to be used only for cleaning the state."]
          #[doc = ""]
          #[doc = "The dispatch origin of this call must be root."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "The total number of voters and those that are defunct must be provided as witness data."]
          #[doc = "# </weight>"]
          clean_defunct_voters {
            num_voters: ::core::primitive::u32,
            num_defunct: ::core::primitive::u32,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Cannot vote when no candidates or members exist."]
          UnableToVote,
          #[codec(index = 1)]
          #[doc = "Must vote for at least one candidate."]
          NoVotes,
          #[codec(index = 2)]
          #[doc = "Cannot vote more than candidates."]
          TooManyVotes,
          #[codec(index = 3)]
          #[doc = "Cannot vote more than maximum allowed."]
          MaximumVotesExceeded,
          #[codec(index = 4)]
          #[doc = "Cannot vote with stake less than minimum balance."]
          LowBalance,
          #[codec(index = 5)]
          #[doc = "Voter can not pay voting bond."]
          UnableToPayBond,
          #[codec(index = 6)]
          #[doc = "Must be a voter."]
          MustBeVoter,
          #[codec(index = 7)]
          #[doc = "Cannot report self."]
          ReportSelf,
          #[codec(index = 8)]
          #[doc = "Duplicated candidate submission."]
          DuplicatedCandidate,
          #[codec(index = 9)]
          #[doc = "Member cannot re-submit candidacy."]
          MemberSubmit,
          #[codec(index = 10)]
          #[doc = "Runner cannot re-submit candidacy."]
          RunnerUpSubmit,
          #[codec(index = 11)]
          #[doc = "Candidate does not have enough funds."]
          InsufficientCandidateFunds,
          #[codec(index = 12)]
          #[doc = "Not a member."]
          NotMember,
          #[codec(index = 13)]
          #[doc = "The provided count of number of candidates is incorrect."]
          InvalidWitnessData,
          #[codec(index = 14)]
          #[doc = "The provided count of number of votes is incorrect."]
          InvalidVoteCount,
          #[codec(index = 15)]
          #[doc = "The renouncing origin presented a wrong `Renouncing` parameter."]
          InvalidRenouncing,
          #[codec(index = 16)]
          #[doc = "Prediction regarding replacement after member removal is wrong."]
          InvalidReplacement,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "A new term with new_members. This indicates that enough candidates existed to run"]
          #[doc = "the election, not that enough have has been elected. The inner value must be examined"]
          #[doc = "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond"]
          #[doc = "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to"]
          #[doc = "begin with."]
          NewTerm {
            new_members: ::std::vec::Vec<(
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            )>,
          },
          #[codec(index = 1)]
          #[doc = "No (or not enough) candidates existed for this round. This is different from"]
          #[doc = "`NewTerm(\\[\\])`. See the description of `NewTerm`."]
          EmptyTerm,
          #[codec(index = 2)]
          #[doc = "Internal error happened while trying to perform election."]
          ElectionError,
          #[codec(index = 3)]
          #[doc = "A member has been removed. This should always be followed by either `NewTerm` or"]
          #[doc = "`EmptyTerm`."]
          MemberKicked {
            member: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 4)]
          #[doc = "Someone has renounced their candidacy."]
          Renounced {
            candidate: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 5)]
          #[doc = "A candidate was slashed by amount due to failing to obtain a seat as member or"]
          #[doc = "runner-up."]
          #[doc = ""]
          #[doc = "Note that old members and runners-up are also candidates."]
          CandidateSlashed {
            candidate: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 6)]
          #[doc = "A seat holder was slashed by amount by being forcefully removed from the set."]
          SeatHolderSlashed {
            seat_holder: ::subxt::sp_core::crypto::AccountId32,
            amount: ::core::primitive::u128,
          },
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Renouncing {
        #[codec(index = 0)]
        Member,
        #[codec(index = 1)]
        RunnerUp,
        #[codec(index = 2)]
        Candidate(#[codec(compact)] ::core::primitive::u32),
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SeatHolder<_0, _1> {
        pub who: _0,
        pub stake: _1,
        pub deposit: _1,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Voter<_0, _1> {
        pub votes: ::std::vec::Vec<_0>,
        pub stake: _1,
        pub deposit: _1,
      }
    }
    pub mod pallet_fees {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Claim available sunrise rewards"]
          #[doc = ""]
          #[doc = "- `era_index`: Era to claim rewards"]
          #[doc = ""]
          #[doc = "Emits `SunriseRewardsClaimed` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          claim_sunrise_rewards { era_index: ::core::primitive::u32 },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Invalid sunrise pool"]
          InvalidSunrisePool,
          #[codec(index = 1)]
          #[doc = "There is no rewards available for this account on this era"]
          NoRewardsAvailable,
          #[codec(index = 2)]
          #[doc = "Invalid era"]
          InvalidEra,
          #[codec(index = 3)]
          #[doc = "Invalid asset"]
          InvalidAsset,
          #[codec(index = 4)]
          #[doc = "There is no active Era"]
          NoActiveEra,
          #[codec(index = 5)]
          #[doc = "Era is not ready to be claimed yet, try again later"]
          EraNotReady,
          #[codec(index = 6)]
          #[doc = "Account fees overflow"]
          AccountFeeOverflow,
          #[codec(index = 7)]
          #[doc = "Balance overflow"]
          BalanceOverflow,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          FeesPercentageUpdated(runtime_types::sp_arithmetic::per_things::Percent),
          #[codec(index = 1)]
          SessionEnded {
            era_index: ::core::primitive::u32,
            session_index: ::core::primitive::u64,
            session_fees_by_currency: ::std::vec::Vec<(
              runtime_types::tidefi_primitives::CurrencyId,
              ::core::primitive::u128,
            )>,
          },
          #[codec(index = 2)]
          EraStarted { era_index: ::core::primitive::u32 },
          #[codec(index = 3)]
          EraEnded { era_index: ::core::primitive::u32 },
          #[codec(index = 4)]
          SunriseRewarded {
            era_index: ::core::primitive::u32,
            pool_id: ::core::primitive::u8,
            account_id: ::subxt::sp_core::crypto::AccountId32,
            reward: ::core::primitive::u128,
          },
          #[codec(index = 5)]
          SunriseClaimed {
            era_index: ::core::primitive::u32,
            account_id: ::subxt::sp_core::crypto::AccountId32,
            reward: ::core::primitive::u128,
          },
        }
      }
    }
    pub mod pallet_grandpa {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
          #[doc = "equivocation proof and validate the given key ownership proof"]
          #[doc = "against the extracted offender. If both are valid, the offence"]
          #[doc = "will be reported."]
          report_equivocation {
            equivocation_proof: ::std::boxed::Box<
              runtime_types::sp_finality_grandpa::EquivocationProof<
                ::subxt::sp_core::H256,
                ::core::primitive::u32,
              >,
            >,
            key_owner_proof: runtime_types::sp_session::MembershipProof,
          },
          #[codec(index = 1)]
          #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
          #[doc = "equivocation proof and validate the given key ownership proof"]
          #[doc = "against the extracted offender. If both are valid, the offence"]
          #[doc = "will be reported."]
          #[doc = ""]
          #[doc = "This extrinsic must be called unsigned and it is expected that only"]
          #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
          #[doc = "if the block author is defined it will be defined as the equivocation"]
          #[doc = "reporter."]
          report_equivocation_unsigned {
            equivocation_proof: ::std::boxed::Box<
              runtime_types::sp_finality_grandpa::EquivocationProof<
                ::subxt::sp_core::H256,
                ::core::primitive::u32,
              >,
            >,
            key_owner_proof: runtime_types::sp_session::MembershipProof,
          },
          #[codec(index = 2)]
          #[doc = "Note that the current authority set of the GRANDPA finality gadget has"]
          #[doc = "stalled. This will trigger a forced authority set change at the beginning"]
          #[doc = "of the next session, to be enacted `delay` blocks after that. The delay"]
          #[doc = "should be high enough to safely assume that the block signalling the"]
          #[doc = "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters"]
          #[doc = "will start the new authority set using the given finalized block as base."]
          #[doc = "Only callable by root."]
          note_stalled {
            delay: ::core::primitive::u32,
            best_finalized_block_number: ::core::primitive::u32,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Attempt to signal GRANDPA pause when the authority set isn't live"]
          #[doc = "(either paused or already pending pause)."]
          PauseFailed,
          #[codec(index = 1)]
          #[doc = "Attempt to signal GRANDPA resume when the authority set isn't paused"]
          #[doc = "(either live or already pending resume)."]
          ResumeFailed,
          #[codec(index = 2)]
          #[doc = "Attempt to signal GRANDPA change with one already pending."]
          ChangePending,
          #[codec(index = 3)]
          #[doc = "Cannot signal forced change so soon after last."]
          TooSoon,
          #[codec(index = 4)]
          #[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
          InvalidKeyOwnershipProof,
          #[codec(index = 5)]
          #[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
          InvalidEquivocationProof,
          #[codec(index = 6)]
          #[doc = "A given equivocation report is valid but already previously reported."]
          DuplicateOffenceReport,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "New authority set has been applied."]
          NewAuthorities {
            authority_set: ::std::vec::Vec<(
              runtime_types::sp_finality_grandpa::app::Public,
              ::core::primitive::u64,
            )>,
          },
          #[codec(index = 1)]
          #[doc = "Current authority set has been paused."]
          Paused,
          #[codec(index = 2)]
          #[doc = "Current authority set has been resumed."]
          Resumed,
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct StoredPendingChange<_0> {
        pub scheduled_at: _0,
        pub delay: _0,
        pub next_authorities:
          runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<(
            runtime_types::sp_finality_grandpa::app::Public,
            ::core::primitive::u64,
          )>,
        pub forced: ::core::option::Option<_0>,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum StoredState<_0> {
        #[codec(index = 0)]
        Live,
        #[codec(index = 1)]
        PendingPause { scheduled_at: _0, delay: _0 },
        #[codec(index = 2)]
        Paused,
        #[codec(index = 3)]
        PendingResume { scheduled_at: _0, delay: _0 },
      }
    }
    pub mod pallet_identity {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Add a registrar to the system."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
          #[doc = ""]
          #[doc = "- `account`: the account of the registrar."]
          #[doc = ""]
          #[doc = "Emits `RegistrarAdded` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."]
          #[doc = "- One storage mutation (codec `O(R)`)."]
          #[doc = "- One event."]
          #[doc = "# </weight>"]
          add_registrar {
            account: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 1)]
          #[doc = "Set an account's identity information and reserve the appropriate deposit."]
          #[doc = ""]
          #[doc = "If the account already has identity information, the deposit is taken as part payment"]
          #[doc = "for the new deposit."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "- `info`: The identity information."]
          #[doc = ""]
          #[doc = "Emits `IdentitySet` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(X + X' + R)`"]
          #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)"]
          #[doc = "  - where `R` judgements-count (registrar-count-bounded)"]
          #[doc = "- One balance reserve operation."]
          #[doc = "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`)."]
          #[doc = "- One event."]
          #[doc = "# </weight>"]
          set_identity {
            info: ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
          },
          #[codec(index = 2)]
          #[doc = "Set the sub-accounts of the sender."]
          #[doc = ""]
          #[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
          #[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
          #[doc = "identity."]
          #[doc = ""]
          #[doc = "- `subs`: The identity's (new) sub-accounts."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(P + S)`"]
          #[doc = "  - where `P` old-subs-count (hard- and deposit-bounded)."]
          #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
          #[doc = "- At most one balance operations."]
          #[doc = "- DB:"]
          #[doc = "  - `P + S` storage mutations (codec complexity `O(1)`)"]
          #[doc = "  - One storage read (codec complexity `O(P)`)."]
          #[doc = "  - One storage write (codec complexity `O(S)`)."]
          #[doc = "  - One storage-exists (`IdentityOf::contains_key`)."]
          #[doc = "# </weight>"]
          set_subs {
            subs: ::std::vec::Vec<(
              ::subxt::sp_core::crypto::AccountId32,
              runtime_types::pallet_identity::types::Data,
            )>,
          },
          #[codec(index = 3)]
          #[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
          #[doc = ""]
          #[doc = "Payment: All reserved balances on the account are returned."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
          #[doc = "identity."]
          #[doc = ""]
          #[doc = "Emits `IdentityCleared` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(R + S + X)`"]
          #[doc = "  - where `R` registrar-count (governance-bounded)."]
          #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
          #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
          #[doc = "- One balance-unreserve operation."]
          #[doc = "- `2` storage reads and `S + 2` storage deletions."]
          #[doc = "- One event."]
          #[doc = "# </weight>"]
          clear_identity,
          #[codec(index = 4)]
          #[doc = "Request a judgement from a registrar."]
          #[doc = ""]
          #[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
          #[doc = "given."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
          #[doc = "registered identity."]
          #[doc = ""]
          #[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
          #[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
          #[doc = ""]
          #[doc = "```nocompile"]
          #[doc = "Self::registrars().get(reg_index).unwrap().fee"]
          #[doc = "```"]
          #[doc = ""]
          #[doc = "Emits `JudgementRequested` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(R + X)`."]
          #[doc = "- One balance-reserve operation."]
          #[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`."]
          #[doc = "- One event."]
          #[doc = "# </weight>"]
          request_judgement {
            #[codec(compact)]
            reg_index: ::core::primitive::u32,
            #[codec(compact)]
            max_fee: ::core::primitive::u128,
          },
          #[codec(index = 5)]
          #[doc = "Cancel a previous request."]
          #[doc = ""]
          #[doc = "Payment: A previously reserved deposit is returned on success."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
          #[doc = "registered identity."]
          #[doc = ""]
          #[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
          #[doc = ""]
          #[doc = "Emits `JudgementUnrequested` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(R + X)`."]
          #[doc = "- One balance-reserve operation."]
          #[doc = "- One storage mutation `O(R + X)`."]
          #[doc = "- One event"]
          #[doc = "# </weight>"]
          cancel_request { reg_index: ::core::primitive::u32 },
          #[codec(index = 6)]
          #[doc = "Set the fee required for a judgement to be requested from a registrar."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
          #[doc = "of the registrar whose index is `index`."]
          #[doc = ""]
          #[doc = "- `index`: the index of the registrar whose fee is to be set."]
          #[doc = "- `fee`: the new fee."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(R)`."]
          #[doc = "- One storage mutation `O(R)`."]
          #[doc = "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)"]
          #[doc = "# </weight>"]
          set_fee {
            #[codec(compact)]
            index: ::core::primitive::u32,
            #[codec(compact)]
            fee: ::core::primitive::u128,
          },
          #[codec(index = 7)]
          #[doc = "Change the account associated with a registrar."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
          #[doc = "of the registrar whose index is `index`."]
          #[doc = ""]
          #[doc = "- `index`: the index of the registrar whose fee is to be set."]
          #[doc = "- `new`: the new account ID."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(R)`."]
          #[doc = "- One storage mutation `O(R)`."]
          #[doc = "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)"]
          #[doc = "# </weight>"]
          set_account_id {
            #[codec(compact)]
            index: ::core::primitive::u32,
            new: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 8)]
          #[doc = "Set the field information for a registrar."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
          #[doc = "of the registrar whose index is `index`."]
          #[doc = ""]
          #[doc = "- `index`: the index of the registrar whose fee is to be set."]
          #[doc = "- `fields`: the fields that the registrar concerns themselves with."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(R)`."]
          #[doc = "- One storage mutation `O(R)`."]
          #[doc = "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)"]
          #[doc = "# </weight>"]
          set_fields {
            #[codec(compact)]
            index: ::core::primitive::u32,
            fields: runtime_types::pallet_identity::types::BitFlags<
              runtime_types::pallet_identity::types::IdentityField,
            >,
          },
          #[codec(index = 9)]
          #[doc = "Provide a judgement for an account's identity."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
          #[doc = "of the registrar whose index is `reg_index`."]
          #[doc = ""]
          #[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
          #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
          #[doc = "  with a registered identity."]
          #[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
          #[doc = ""]
          #[doc = "Emits `JudgementGiven` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(R + X)`."]
          #[doc = "- One balance-transfer operation."]
          #[doc = "- Up to one account-lookup operation."]
          #[doc = "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`."]
          #[doc = "- One event."]
          #[doc = "# </weight>"]
          provide_judgement {
            #[codec(compact)]
            reg_index: ::core::primitive::u32,
            target: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            judgement: runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>,
          },
          #[codec(index = 10)]
          #[doc = "Remove an account's identity and sub-account information and slash the deposits."]
          #[doc = ""]
          #[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
          #[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
          #[doc = "manually using `cancel_request`."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
          #[doc = ""]
          #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
          #[doc = "  with a registered identity."]
          #[doc = ""]
          #[doc = "Emits `IdentityKilled` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(R + S + X)`."]
          #[doc = "- One balance-reserve operation."]
          #[doc = "- `S + 2` storage mutations."]
          #[doc = "- One event."]
          #[doc = "# </weight>"]
          kill_identity {
            target: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          },
          #[codec(index = 11)]
          #[doc = "Add the given account to the sender's subs."]
          #[doc = ""]
          #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
          #[doc = "to the sender."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
          #[doc = "sub identity of `sub`."]
          add_sub {
            sub: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            data: runtime_types::pallet_identity::types::Data,
          },
          #[codec(index = 12)]
          #[doc = "Alter the associated name of the given sub-account."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
          #[doc = "sub identity of `sub`."]
          rename_sub {
            sub: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            data: runtime_types::pallet_identity::types::Data,
          },
          #[codec(index = 13)]
          #[doc = "Remove the given account from the sender's subs."]
          #[doc = ""]
          #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
          #[doc = "to the sender."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
          #[doc = "sub identity of `sub`."]
          remove_sub {
            sub: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          },
          #[codec(index = 14)]
          #[doc = "Remove the sender as a sub-account."]
          #[doc = ""]
          #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
          #[doc = "to the sender (*not* the original depositor)."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
          #[doc = "super-identity."]
          #[doc = ""]
          #[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
          #[doc = "controller of an account is maliciously registered as a sub-account."]
          quit_sub,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Too many subs-accounts."]
          TooManySubAccounts,
          #[codec(index = 1)]
          #[doc = "Account isn't found."]
          NotFound,
          #[codec(index = 2)]
          #[doc = "Account isn't named."]
          NotNamed,
          #[codec(index = 3)]
          #[doc = "Empty index."]
          EmptyIndex,
          #[codec(index = 4)]
          #[doc = "Fee is changed."]
          FeeChanged,
          #[codec(index = 5)]
          #[doc = "No identity found."]
          NoIdentity,
          #[codec(index = 6)]
          #[doc = "Sticky judgement."]
          StickyJudgement,
          #[codec(index = 7)]
          #[doc = "Judgement given."]
          JudgementGiven,
          #[codec(index = 8)]
          #[doc = "Invalid judgement."]
          InvalidJudgement,
          #[codec(index = 9)]
          #[doc = "The index is invalid."]
          InvalidIndex,
          #[codec(index = 10)]
          #[doc = "The target is invalid."]
          InvalidTarget,
          #[codec(index = 11)]
          #[doc = "Too many additional fields."]
          TooManyFields,
          #[codec(index = 12)]
          #[doc = "Maximum amount of registrars reached. Cannot add any more."]
          TooManyRegistrars,
          #[codec(index = 13)]
          #[doc = "Account ID is already named."]
          AlreadyClaimed,
          #[codec(index = 14)]
          #[doc = "Sender is not a sub-account."]
          NotSub,
          #[codec(index = 15)]
          #[doc = "Sub-account isn't owned by sender."]
          NotOwned,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "A name was set or reset (which will remove all judgements)."]
          IdentitySet {
            who: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 1)]
          #[doc = "A name was cleared, and the given balance returned."]
          IdentityCleared {
            who: ::subxt::sp_core::crypto::AccountId32,
            deposit: ::core::primitive::u128,
          },
          #[codec(index = 2)]
          #[doc = "A name was removed and the given balance slashed."]
          IdentityKilled {
            who: ::subxt::sp_core::crypto::AccountId32,
            deposit: ::core::primitive::u128,
          },
          #[codec(index = 3)]
          #[doc = "A judgement was asked from a registrar."]
          JudgementRequested {
            who: ::subxt::sp_core::crypto::AccountId32,
            registrar_index: ::core::primitive::u32,
          },
          #[codec(index = 4)]
          #[doc = "A judgement request was retracted."]
          JudgementUnrequested {
            who: ::subxt::sp_core::crypto::AccountId32,
            registrar_index: ::core::primitive::u32,
          },
          #[codec(index = 5)]
          #[doc = "A judgement was given by a registrar."]
          JudgementGiven {
            target: ::subxt::sp_core::crypto::AccountId32,
            registrar_index: ::core::primitive::u32,
          },
          #[codec(index = 6)]
          #[doc = "A registrar was added."]
          RegistrarAdded {
            registrar_index: ::core::primitive::u32,
          },
          #[codec(index = 7)]
          #[doc = "A sub-identity was added to an identity and the deposit paid."]
          SubIdentityAdded {
            sub: ::subxt::sp_core::crypto::AccountId32,
            main: ::subxt::sp_core::crypto::AccountId32,
            deposit: ::core::primitive::u128,
          },
          #[codec(index = 8)]
          #[doc = "A sub-identity was removed from an identity and the deposit freed."]
          SubIdentityRemoved {
            sub: ::subxt::sp_core::crypto::AccountId32,
            main: ::subxt::sp_core::crypto::AccountId32,
            deposit: ::core::primitive::u128,
          },
          #[codec(index = 9)]
          #[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
          #[doc = "main identity account to the sub-identity account."]
          SubIdentityRevoked {
            sub: ::subxt::sp_core::crypto::AccountId32,
            main: ::subxt::sp_core::crypto::AccountId32,
            deposit: ::core::primitive::u128,
          },
        }
      }
      pub mod types {
        use super::runtime_types;
        #[derive(
          :: subxt :: codec :: CompactAs,
          :: subxt :: codec :: Decode,
          :: subxt :: codec :: Encode,
          Debug,
        )]
        pub struct BitFlags<_0>(
          pub ::core::primitive::u64,
          #[codec(skip)] pub ::core::marker::PhantomData<_0>,
        );
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Data {
          #[codec(index = 0)]
          None,
          #[codec(index = 1)]
          Raw0([::core::primitive::u8; 0usize]),
          #[codec(index = 2)]
          Raw1([::core::primitive::u8; 1usize]),
          #[codec(index = 3)]
          Raw2([::core::primitive::u8; 2usize]),
          #[codec(index = 4)]
          Raw3([::core::primitive::u8; 3usize]),
          #[codec(index = 5)]
          Raw4([::core::primitive::u8; 4usize]),
          #[codec(index = 6)]
          Raw5([::core::primitive::u8; 5usize]),
          #[codec(index = 7)]
          Raw6([::core::primitive::u8; 6usize]),
          #[codec(index = 8)]
          Raw7([::core::primitive::u8; 7usize]),
          #[codec(index = 9)]
          Raw8([::core::primitive::u8; 8usize]),
          #[codec(index = 10)]
          Raw9([::core::primitive::u8; 9usize]),
          #[codec(index = 11)]
          Raw10([::core::primitive::u8; 10usize]),
          #[codec(index = 12)]
          Raw11([::core::primitive::u8; 11usize]),
          #[codec(index = 13)]
          Raw12([::core::primitive::u8; 12usize]),
          #[codec(index = 14)]
          Raw13([::core::primitive::u8; 13usize]),
          #[codec(index = 15)]
          Raw14([::core::primitive::u8; 14usize]),
          #[codec(index = 16)]
          Raw15([::core::primitive::u8; 15usize]),
          #[codec(index = 17)]
          Raw16([::core::primitive::u8; 16usize]),
          #[codec(index = 18)]
          Raw17([::core::primitive::u8; 17usize]),
          #[codec(index = 19)]
          Raw18([::core::primitive::u8; 18usize]),
          #[codec(index = 20)]
          Raw19([::core::primitive::u8; 19usize]),
          #[codec(index = 21)]
          Raw20([::core::primitive::u8; 20usize]),
          #[codec(index = 22)]
          Raw21([::core::primitive::u8; 21usize]),
          #[codec(index = 23)]
          Raw22([::core::primitive::u8; 22usize]),
          #[codec(index = 24)]
          Raw23([::core::primitive::u8; 23usize]),
          #[codec(index = 25)]
          Raw24([::core::primitive::u8; 24usize]),
          #[codec(index = 26)]
          Raw25([::core::primitive::u8; 25usize]),
          #[codec(index = 27)]
          Raw26([::core::primitive::u8; 26usize]),
          #[codec(index = 28)]
          Raw27([::core::primitive::u8; 27usize]),
          #[codec(index = 29)]
          Raw28([::core::primitive::u8; 28usize]),
          #[codec(index = 30)]
          Raw29([::core::primitive::u8; 29usize]),
          #[codec(index = 31)]
          Raw30([::core::primitive::u8; 30usize]),
          #[codec(index = 32)]
          Raw31([::core::primitive::u8; 31usize]),
          #[codec(index = 33)]
          Raw32([::core::primitive::u8; 32usize]),
          #[codec(index = 34)]
          BlakeTwo256([::core::primitive::u8; 32usize]),
          #[codec(index = 35)]
          Sha256([::core::primitive::u8; 32usize]),
          #[codec(index = 36)]
          Keccak256([::core::primitive::u8; 32usize]),
          #[codec(index = 37)]
          ShaThree256([::core::primitive::u8; 32usize]),
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum IdentityField {
          #[codec(index = 1)]
          Display,
          #[codec(index = 2)]
          Legal,
          #[codec(index = 4)]
          Web,
          #[codec(index = 8)]
          Riot,
          #[codec(index = 16)]
          Email,
          #[codec(index = 32)]
          PgpFingerprint,
          #[codec(index = 64)]
          Image,
          #[codec(index = 128)]
          Twitter,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct IdentityInfo {
          pub additional: runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
            runtime_types::pallet_identity::types::Data,
            runtime_types::pallet_identity::types::Data,
          )>,
          pub display: runtime_types::pallet_identity::types::Data,
          pub legal: runtime_types::pallet_identity::types::Data,
          pub web: runtime_types::pallet_identity::types::Data,
          pub riot: runtime_types::pallet_identity::types::Data,
          pub email: runtime_types::pallet_identity::types::Data,
          pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
          pub image: runtime_types::pallet_identity::types::Data,
          pub twitter: runtime_types::pallet_identity::types::Data,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Judgement<_0> {
          #[codec(index = 0)]
          Unknown,
          #[codec(index = 1)]
          FeePaid(_0),
          #[codec(index = 2)]
          Reasonable,
          #[codec(index = 3)]
          KnownGood,
          #[codec(index = 4)]
          OutOfDate,
          #[codec(index = 5)]
          LowQuality,
          #[codec(index = 6)]
          Erroneous,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct RegistrarInfo<_0, _1> {
          pub account: _1,
          pub fee: _0,
          pub fields: runtime_types::pallet_identity::types::BitFlags<
            runtime_types::pallet_identity::types::IdentityField,
          >,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Registration<_0> {
          pub judgements: runtime_types::frame_support::storage::bounded_vec::BoundedVec<(
            ::core::primitive::u32,
            runtime_types::pallet_identity::types::Judgement<_0>,
          )>,
          pub deposit: _0,
          pub info: runtime_types::pallet_identity::types::IdentityInfo,
        }
      }
    }
    pub mod pallet_im_online {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "# <weight>"]
          #[doc = "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is"]
          #[doc = "  length of `heartbeat.network_state.external_address`"]
          #[doc = "  - `O(K)`: decoding of length `K`"]
          #[doc = "  - `O(E)`: decoding/encoding of length `E`"]
          #[doc = "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,"]
          #[doc = "  `ReceivedHeartbeats`"]
          #[doc = "- DbWrites: `ReceivedHeartbeats`"]
          #[doc = "# </weight>"]
          heartbeat {
            heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
            signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Non existent public key."]
          InvalidKey,
          #[codec(index = 1)]
          #[doc = "Duplicated heartbeat."]
          DuplicatedHeartbeat,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "A new heartbeat was received from `AuthorityId`."]
          HeartbeatReceived {
            authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
          },
          #[codec(index = 1)]
          #[doc = "At the end of the session, no offence was committed."]
          AllGood,
          #[codec(index = 2)]
          #[doc = "At the end of the session, at least one validator was found to be offline."]
          SomeOffline {
            offline: ::std::vec::Vec<(
              ::subxt::sp_core::crypto::AccountId32,
              runtime_types::pallet_staking::Exposure<
                ::subxt::sp_core::crypto::AccountId32,
                ::core::primitive::u128,
              >,
            )>,
          },
        }
      }
      pub mod sr25519 {
        use super::runtime_types;
        pub mod app_sr25519 {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct Public(pub runtime_types::sp_core::sr25519::Public);
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct BoundedOpaqueNetworkState {
        pub peer_id: runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
          ::core::primitive::u8,
        >,
        pub external_addresses:
          runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
            runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
              ::core::primitive::u8,
            >,
          >,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Heartbeat<_0> {
        pub block_number: _0,
        pub network_state: runtime_types::sp_core::offchain::OpaqueNetworkState,
        pub session_index: _0,
        pub authority_index: _0,
        pub validators_len: _0,
      }
    }
    pub mod pallet_indices {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Assign an previously unassigned index."]
          #[doc = ""]
          #[doc = "Payment: `Deposit` is reserved from the sender account."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "- `index`: the index to be claimed. This must not be in use."]
          #[doc = ""]
          #[doc = "Emits `IndexAssigned` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(1)`."]
          #[doc = "- One storage mutation (codec `O(1)`)."]
          #[doc = "- One reserve operation."]
          #[doc = "- One event."]
          #[doc = "-------------------"]
          #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
          #[doc = "# </weight>"]
          claim { index: ::core::primitive::u32 },
          #[codec(index = 1)]
          #[doc = "Assign an index already owned by the sender to another account. The balance reservation"]
          #[doc = "is effectively transferred to the new account."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "- `index`: the index to be re-assigned. This must be owned by the sender."]
          #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
          #[doc = ""]
          #[doc = "Emits `IndexAssigned` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(1)`."]
          #[doc = "- One storage mutation (codec `O(1)`)."]
          #[doc = "- One transfer operation."]
          #[doc = "- One event."]
          #[doc = "-------------------"]
          #[doc = "- DB Weight:"]
          #[doc = "   - Reads: Indices Accounts, System Account (recipient)"]
          #[doc = "   - Writes: Indices Accounts, System Account (recipient)"]
          #[doc = "# </weight>"]
          transfer {
            new: ::subxt::sp_core::crypto::AccountId32,
            index: ::core::primitive::u32,
          },
          #[codec(index = 2)]
          #[doc = "Free up an index owned by the sender."]
          #[doc = ""]
          #[doc = "Payment: Any previous deposit placed for the index is unreserved in the sender account."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the sender must own the index."]
          #[doc = ""]
          #[doc = "- `index`: the index to be freed. This must be owned by the sender."]
          #[doc = ""]
          #[doc = "Emits `IndexFreed` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(1)`."]
          #[doc = "- One storage mutation (codec `O(1)`)."]
          #[doc = "- One reserve operation."]
          #[doc = "- One event."]
          #[doc = "-------------------"]
          #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
          #[doc = "# </weight>"]
          free { index: ::core::primitive::u32 },
          #[codec(index = 3)]
          #[doc = "Force an index to an account. This doesn't require a deposit. If the index is already"]
          #[doc = "held, then any deposit is reimbursed to its current owner."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Root_."]
          #[doc = ""]
          #[doc = "- `index`: the index to be (re-)assigned."]
          #[doc = "- `new`: the new owner of the index. This function is a no-op if it is equal to sender."]
          #[doc = "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred."]
          #[doc = ""]
          #[doc = "Emits `IndexAssigned` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(1)`."]
          #[doc = "- One storage mutation (codec `O(1)`)."]
          #[doc = "- Up to one reserve operation."]
          #[doc = "- One event."]
          #[doc = "-------------------"]
          #[doc = "- DB Weight:"]
          #[doc = "   - Reads: Indices Accounts, System Account (original owner)"]
          #[doc = "   - Writes: Indices Accounts, System Account (original owner)"]
          #[doc = "# </weight>"]
          force_transfer {
            new: ::subxt::sp_core::crypto::AccountId32,
            index: ::core::primitive::u32,
            freeze: ::core::primitive::bool,
          },
          #[codec(index = 4)]
          #[doc = "Freeze an index so it will always point to the sender account. This consumes the"]
          #[doc = "deposit."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and the signing account must have a"]
          #[doc = "non-frozen account `index`."]
          #[doc = ""]
          #[doc = "- `index`: the index to be frozen in place."]
          #[doc = ""]
          #[doc = "Emits `IndexFrozen` if successful."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(1)`."]
          #[doc = "- One storage mutation (codec `O(1)`)."]
          #[doc = "- Up to one slash operation."]
          #[doc = "- One event."]
          #[doc = "-------------------"]
          #[doc = "- DB Weight: 1 Read/Write (Accounts)"]
          #[doc = "# </weight>"]
          freeze { index: ::core::primitive::u32 },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "The index was not already assigned."]
          NotAssigned,
          #[codec(index = 1)]
          #[doc = "The index is assigned to another account."]
          NotOwner,
          #[codec(index = 2)]
          #[doc = "The index was not available."]
          InUse,
          #[codec(index = 3)]
          #[doc = "The source and destination accounts are identical."]
          NotTransfer,
          #[codec(index = 4)]
          #[doc = "The index is permanent and may not be freed/changed."]
          Permanent,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "A account index was assigned."]
          IndexAssigned {
            who: ::subxt::sp_core::crypto::AccountId32,
            index: ::core::primitive::u32,
          },
          #[codec(index = 1)]
          #[doc = "A account index has been freed up (unassigned)."]
          IndexFreed { index: ::core::primitive::u32 },
          #[codec(index = 2)]
          #[doc = "A account index has been frozen to its current account ID."]
          IndexFrozen {
            index: ::core::primitive::u32,
            who: ::subxt::sp_core::crypto::AccountId32,
          },
        }
      }
    }
    pub mod pallet_membership {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Add a member `who` to the set."]
          #[doc = ""]
          #[doc = "May only be called from `T::AddOrigin`."]
          add_member {
            who: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 1)]
          #[doc = "Remove a member `who` from the set."]
          #[doc = ""]
          #[doc = "May only be called from `T::RemoveOrigin`."]
          remove_member {
            who: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 2)]
          #[doc = "Swap out one member `remove` for another `add`."]
          #[doc = ""]
          #[doc = "May only be called from `T::SwapOrigin`."]
          #[doc = ""]
          #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
          swap_member {
            remove: ::subxt::sp_core::crypto::AccountId32,
            add: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 3)]
          #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
          #[doc = "pass `members` pre-sorted."]
          #[doc = ""]
          #[doc = "May only be called from `T::ResetOrigin`."]
          reset_members {
            members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
          },
          #[codec(index = 4)]
          #[doc = "Swap out the sending member for some other key `new`."]
          #[doc = ""]
          #[doc = "May only be called from `Signed` origin of a current member."]
          #[doc = ""]
          #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
          change_key {
            new: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 5)]
          #[doc = "Set the prime member. Must be a current member."]
          #[doc = ""]
          #[doc = "May only be called from `T::PrimeOrigin`."]
          set_prime {
            who: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 6)]
          #[doc = "Remove the prime member if it exists."]
          #[doc = ""]
          #[doc = "May only be called from `T::PrimeOrigin`."]
          clear_prime,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Already a member."]
          AlreadyMember,
          #[codec(index = 1)]
          #[doc = "Not a member."]
          NotMember,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "The given member was added; see the transaction for who."]
          MemberAdded,
          #[codec(index = 1)]
          #[doc = "The given member was removed; see the transaction for who."]
          MemberRemoved,
          #[codec(index = 2)]
          #[doc = "Two members were swapped; see the transaction for who."]
          MembersSwapped,
          #[codec(index = 3)]
          #[doc = "The membership was reset; see the transaction for who the new set is."]
          MembersReset,
          #[codec(index = 4)]
          #[doc = "One of the members' keys changed."]
          KeyChanged,
          #[codec(index = 5)]
          #[doc = "Phantom member, never used."]
          Dummy,
        }
      }
    }
    pub mod pallet_multisig {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
          #[doc = "multi-signature, but do not participate in the approval process."]
          #[doc = "- `call`: The call to be executed."]
          #[doc = ""]
          #[doc = "Result is equivalent to the dispatched result."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
          #[doc = "-------------------------------"]
          #[doc = "- DB Weight: None"]
          #[doc = "- Plus Call Weight"]
          #[doc = "# </weight>"]
          as_multi_threshold_1 {
            other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
            call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
          },
          #[codec(index = 1)]
          #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
          #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
          #[doc = ""]
          #[doc = "If there are enough, then dispatch the call."]
          #[doc = ""]
          #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
          #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
          #[doc = "is cancelled."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
          #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
          #[doc = "dispatch. May not be empty."]
          #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
          #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
          #[doc = "transaction index) of the first approval transaction."]
          #[doc = "- `call`: The call to be executed."]
          #[doc = ""]
          #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
          #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
          #[doc = ""]
          #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
          #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
          #[doc = "may be found in the deposited `MultisigExecuted` event."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(S + Z + Call)`."]
          #[doc = "- Up to one balance-reserve or unreserve operation."]
          #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
          #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
          #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
          #[doc = "- One encode & hash, both of complexity `O(S)`."]
          #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
          #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
          #[doc = "- One event."]
          #[doc = "- The weight of the `call`."]
          #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
          #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
          #[doc = "-------------------------------"]
          #[doc = "- DB Weight:"]
          #[doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
          #[doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
          #[doc = "- Plus Call Weight"]
          #[doc = "# </weight>"]
          as_multi {
            threshold: ::core::primitive::u16,
            other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
            maybe_timepoint: ::core::option::Option<
              runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
            >,
            call: ::subxt::WrapperKeepOpaque<runtime_types::lagoon_runtime::Call>,
            store_call: ::core::primitive::bool,
            max_weight: ::core::primitive::u64,
          },
          #[codec(index = 2)]
          #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
          #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
          #[doc = ""]
          #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
          #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
          #[doc = "is cancelled."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
          #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
          #[doc = "dispatch. May not be empty."]
          #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
          #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
          #[doc = "transaction index) of the first approval transaction."]
          #[doc = "- `call_hash`: The hash of the call to be executed."]
          #[doc = ""]
          #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(S)`."]
          #[doc = "- Up to one balance-reserve or unreserve operation."]
          #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
          #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
          #[doc = "- One encode & hash, both of complexity `O(S)`."]
          #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
          #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
          #[doc = "- One event."]
          #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
          #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
          #[doc = "----------------------------------"]
          #[doc = "- DB Weight:"]
          #[doc = "    - Read: Multisig Storage, [Caller Account]"]
          #[doc = "    - Write: Multisig Storage, [Caller Account]"]
          #[doc = "# </weight>"]
          approve_as_multi {
            threshold: ::core::primitive::u16,
            other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
            maybe_timepoint: ::core::option::Option<
              runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
            >,
            call_hash: [::core::primitive::u8; 32usize],
            max_weight: ::core::primitive::u64,
          },
          #[codec(index = 3)]
          #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
          #[doc = "for this operation will be unreserved on success."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
          #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
          #[doc = "dispatch. May not be empty."]
          #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
          #[doc = "transaction for this dispatch."]
          #[doc = "- `call_hash`: The hash of the call to be executed."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(S)`."]
          #[doc = "- Up to one balance-reserve or unreserve operation."]
          #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
          #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
          #[doc = "- One encode & hash, both of complexity `O(S)`."]
          #[doc = "- One event."]
          #[doc = "- I/O: 1 read `O(S)`, one remove."]
          #[doc = "- Storage: removes one item."]
          #[doc = "----------------------------------"]
          #[doc = "- DB Weight:"]
          #[doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"]
          #[doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"]
          #[doc = "# </weight>"]
          cancel_as_multi {
            threshold: ::core::primitive::u16,
            other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
            timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
            call_hash: [::core::primitive::u8; 32usize],
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Threshold must be 2 or greater."]
          MinimumThreshold,
          #[codec(index = 1)]
          #[doc = "Call is already approved by this signatory."]
          AlreadyApproved,
          #[codec(index = 2)]
          #[doc = "Call doesn't need any (more) approvals."]
          NoApprovalsNeeded,
          #[codec(index = 3)]
          #[doc = "There are too few signatories in the list."]
          TooFewSignatories,
          #[codec(index = 4)]
          #[doc = "There are too many signatories in the list."]
          TooManySignatories,
          #[codec(index = 5)]
          #[doc = "The signatories were provided out of order; they should be ordered."]
          SignatoriesOutOfOrder,
          #[codec(index = 6)]
          #[doc = "The sender was contained in the other signatories; it shouldn't be."]
          SenderInSignatories,
          #[codec(index = 7)]
          #[doc = "Multisig operation not found when attempting to cancel."]
          NotFound,
          #[codec(index = 8)]
          #[doc = "Only the account that originally created the multisig is able to cancel it."]
          NotOwner,
          #[codec(index = 9)]
          #[doc = "No timepoint was given, yet the multisig operation is already underway."]
          NoTimepoint,
          #[codec(index = 10)]
          #[doc = "A different timepoint was given to the multisig operation that is underway."]
          WrongTimepoint,
          #[codec(index = 11)]
          #[doc = "A timepoint was given, yet no multisig operation is underway."]
          UnexpectedTimepoint,
          #[codec(index = 12)]
          #[doc = "The maximum weight information provided was too low."]
          MaxWeightTooLow,
          #[codec(index = 13)]
          #[doc = "The data to be stored is already stored."]
          AlreadyStored,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "A new multisig operation has begun."]
          NewMultisig {
            approving: ::subxt::sp_core::crypto::AccountId32,
            multisig: ::subxt::sp_core::crypto::AccountId32,
            call_hash: [::core::primitive::u8; 32usize],
          },
          #[codec(index = 1)]
          #[doc = "A multisig operation has been approved by someone."]
          MultisigApproval {
            approving: ::subxt::sp_core::crypto::AccountId32,
            timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
            multisig: ::subxt::sp_core::crypto::AccountId32,
            call_hash: [::core::primitive::u8; 32usize],
          },
          #[codec(index = 2)]
          #[doc = "A multisig operation has been executed."]
          MultisigExecuted {
            approving: ::subxt::sp_core::crypto::AccountId32,
            timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
            multisig: ::subxt::sp_core::crypto::AccountId32,
            call_hash: [::core::primitive::u8; 32usize],
            result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
          },
          #[codec(index = 3)]
          #[doc = "A multisig operation has been cancelled."]
          MultisigCancelled {
            cancelling: ::subxt::sp_core::crypto::AccountId32,
            timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
            multisig: ::subxt::sp_core::crypto::AccountId32,
            call_hash: [::core::primitive::u8; 32usize],
          },
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Multisig<_0, _1, _2> {
        pub when: runtime_types::pallet_multisig::Timepoint<_0>,
        pub deposit: _1,
        pub depositor: _2,
        pub approvals: ::std::vec::Vec<_2>,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Timepoint<_0> {
        pub height: _0,
        pub index: _0,
      }
    }
    pub mod pallet_offences {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "There is an offence reported of the given `kind` happened at the `session_index` and"]
          #[doc = "(kind-specific) time slot. This event is not deposited for duplicate slashes."]
          #[doc = "\\[kind, timeslot\\]."]
          Offence {
            kind: [::core::primitive::u8; 16usize],
            timeslot: ::std::vec::Vec<::core::primitive::u8>,
          },
        }
      }
    }
    pub mod pallet_oracle {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Oracle have confirmation and confirm the trade."]
          #[doc = ""]
          #[doc = "- `request_id`: Unique request ID."]
          #[doc = "- `market_makers`: Vector of `SwapConfirmation` who represent the allocation of multiple source."]
          #[doc = ""]
          #[doc = "Emits `SwapProcessed` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          confirm_swap {
            request_id: ::subxt::sp_core::H256,
            market_makers: ::std::vec::Vec<runtime_types::tidefi_primitives::SwapConfirmation>,
          },
          #[codec(index = 1)]
          #[doc = "Oracle cancel a swap request and release remaining funds"]
          #[doc = ""]
          #[doc = "- `request_id`: Unique request ID."]
          #[doc = ""]
          #[doc = "Emits `SwapCancelled` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          cancel_swap { request_id: ::subxt::sp_core::H256 },
          #[codec(index = 2)]
          #[doc = "Oracle change the account ID who can confirm trade."]
          #[doc = ""]
          #[doc = "Make sure to have access to the `account_id` otherwise"]
          #[doc = "only `root` will be able to update the oracle account."]
          #[doc = ""]
          #[doc = "- `new_account_id`: The new Oracle account id."]
          #[doc = ""]
          #[doc = "Emits `AccountChanged` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          set_account_id {
            new_account_id: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 3)]
          #[doc = "Change Oracle status."]
          #[doc = ""]
          #[doc = "- `is_enabled`: Is the oracle enabled?"]
          #[doc = ""]
          #[doc = "Emits `StatusChanged` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          set_status { is_enabled: ::core::primitive::bool },
          #[codec(index = 4)]
          #[doc = "Change Oracle status."]
          #[doc = ""]
          #[doc = "- `is_enabled`: Is the oracle enabled?"]
          #[doc = ""]
          #[doc = "Emits `StatusChanged` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          im_alive {
            im_alive: runtime_types::tidefi_primitives::OracleImAlive,
          },
          #[codec(index = 5)]
          #[doc = "Add market maker to the local storage"]
          #[doc = ""]
          #[doc = "Emits `StatusChanged` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          add_market_maker {
            account_id: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 6)]
          #[doc = "Remove market maker to the local storage"]
          #[doc = ""]
          #[doc = "- `delete_orders`: Should we delete all existing swaps on chain for this user?"]
          #[doc = ""]
          #[doc = "Emits `StatusChanged` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          remove_market_maker {
            account_id: ::subxt::sp_core::crypto::AccountId32,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "The Quorum is paused. Try again later."]
          OraclePaused,
          #[codec(index = 1)]
          #[doc = "The access to the Oracle pallet is not allowed for this account ID."]
          AccessDenied,
          #[codec(index = 2)]
          #[doc = "Invalid request ID."]
          InvalidRequestId,
          #[codec(index = 3)]
          #[doc = "Invalid swap request status."]
          InvalidSwapRequestStatus,
          #[codec(index = 4)]
          #[doc = "Invalid market maker swap request status."]
          InvalidMarketMakerSwapRequestStatus,
          #[codec(index = 5)]
          #[doc = "Market maker buy token does not match swap sell token"]
          MarketMakerBuyTokenNotMatchSwapSellToken,
          #[codec(index = 6)]
          #[doc = "Market maker has not enough token to sell"]
          MarketMakerHasNotEnoughTokenToSell,
          #[codec(index = 7)]
          #[doc = "Invalid market maker request ID, includes an index in the SwapConfirmation list"]
          InvalidMarketMakerRequestId { index: ::core::primitive::u8 },
          #[codec(index = 8)]
          #[doc = "There is a conflict in the request."]
          Conflict,
          #[codec(index = 9)]
          #[doc = "Unable to transfer token."]
          TransferFailed,
          #[codec(index = 10)]
          #[doc = "Unable to burn token."]
          TraderCannotDepositBuyTokens,
          #[codec(index = 11)]
          #[doc = "Unable to mint token."]
          MintFailed,
          #[codec(index = 12)]
          #[doc = "Unable to release funds."]
          ReleaseFailed,
          #[codec(index = 13)]
          #[doc = "Unable to register trade swap network fees."]
          SwapFeeRegistrationFailed,
          #[codec(index = 14)]
          #[doc = "Unable to register market maker swap network fees."]
          MarketMakerSwapFeeRegistrationFailed,
          #[codec(index = 15)]
          #[doc = "Unknown Asset."]
          UnknownAsset,
          #[codec(index = 16)]
          #[doc = "No Funds available for this Asset Id."]
          TraderHasNotEnoughTokenToSell,
          #[codec(index = 17)]
          #[doc = "Request contains offer that is less than swap lower bound"]
          OfferIsLessThanSwapLowerBound { index: ::core::primitive::u8 },
          #[codec(index = 18)]
          #[doc = "Request contains offer that is greater than swap upper bound"]
          OfferIsGreaterThanSwapUpperBound { index: ::core::primitive::u8 },
          #[codec(index = 19)]
          #[doc = "Swap overflow"]
          TraderCannotOversell,
          #[codec(index = 20)]
          #[doc = "Request contains offer that is less than market maker swap lower bound"]
          OfferIsLessThanMarketMakerSwapLowerBound { index: ::core::primitive::u8 },
          #[codec(index = 21)]
          #[doc = "Request contains offer that is greater than market maker swap upper bound"]
          OfferIsGreaterThanMarketMakerSwapUpperBound { index: ::core::primitive::u8 },
          #[codec(index = 22)]
          #[doc = "Market Makers do not have enough funds left to sell"]
          MarketMakerHasNotEnoughTokenLeftToSell,
          #[codec(index = 23)]
          #[doc = "Market Makers cannot deposit source funds of the trade"]
          MarketMakerCantDeposit,
          #[codec(index = 24)]
          #[doc = "Delete trader's swap request from Swaps failed"]
          DeleteSwapFailed,
          #[codec(index = 25)]
          #[doc = "Delete market maker swap request from Swaps failed"]
          DeleteMarketMakerSwapFailed,
          #[codec(index = 26)]
          #[doc = "Release trader's unswapped funds failed"]
          ReleaseUnswappedFundsFailed,
          #[codec(index = 27)]
          #[doc = "Release market maker's unswapped funds failed"]
          ReleaseMarketMakerUnswappedFundsFailed,
          #[codec(index = 28)]
          #[doc = "Update trader's swap request status in AccountSwaps failed"]
          UpdateAccountSwapRequestStatusFailed,
          #[codec(index = 29)]
          #[doc = "Update market maker's swap request status in AccountSwaps failed"]
          UpdateMarketMakerAccountSwapRequestStatusFailed,
          #[codec(index = 30)]
          #[doc = "Swaps cap reached for this account id"]
          SwapOverflow,
          #[codec(index = 31)]
          #[doc = "Unknown Error."]
          UnknownError,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "Oracle status changed"]
          StatusChanged { is_enabled: ::core::primitive::bool },
          #[codec(index = 1)]
          #[doc = "Oracle account changed"]
          AccountChanged {
            account_id: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 2)]
          #[doc = "Oracle added a market maker"]
          MarketMakerAdded {
            account_id: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 3)]
          #[doc = "Oracle removed a market maker"]
          MarketMakerRemoved {
            account_id: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 4)]
          #[doc = "Oracle processed the initial swap"]
          SwapProcessed {
            request_id: ::subxt::sp_core::H256,
            status: runtime_types::tidefi_primitives::SwapStatus,
            account_id: ::subxt::sp_core::crypto::AccountId32,
            currency_from: runtime_types::tidefi_primitives::CurrencyId,
            currency_amount_from: ::core::primitive::u128,
            currency_to: runtime_types::tidefi_primitives::CurrencyId,
            currency_amount_to: ::core::primitive::u128,
            initial_extrinsic_hash: [::core::primitive::u8; 32usize],
          },
          #[codec(index = 5)]
          #[doc = "Oracle cancelled the initial swap and released the funds"]
          SwapCancelled { request_id: ::subxt::sp_core::H256 },
        }
      }
    }
    pub mod pallet_preimage {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Register a preimage on-chain."]
          #[doc = ""]
          #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
          #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
          note_preimage {
            bytes: ::std::vec::Vec<::core::primitive::u8>,
          },
          #[codec(index = 1)]
          #[doc = "Clear an unrequested preimage from the runtime storage."]
          unnote_preimage { hash: ::subxt::sp_core::H256 },
          #[codec(index = 2)]
          #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
          #[doc = ""]
          #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
          #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
          request_preimage { hash: ::subxt::sp_core::H256 },
          #[codec(index = 3)]
          #[doc = "Clear a previously made request for a preimage."]
          #[doc = ""]
          #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
          unrequest_preimage { hash: ::subxt::sp_core::H256 },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Preimage is too large to store on-chain."]
          TooLarge,
          #[codec(index = 1)]
          #[doc = "Preimage has already been noted on-chain."]
          AlreadyNoted,
          #[codec(index = 2)]
          #[doc = "The user is not authorized to perform this action."]
          NotAuthorized,
          #[codec(index = 3)]
          #[doc = "The preimage cannot be removed since it has not yet been noted."]
          NotNoted,
          #[codec(index = 4)]
          #[doc = "A preimage may not be removed when there are outstanding requests."]
          Requested,
          #[codec(index = 5)]
          #[doc = "The preimage request cannot be removed since no outstanding requests exist."]
          NotRequested,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "A preimage has been noted."]
          Noted { hash: ::subxt::sp_core::H256 },
          #[codec(index = 1)]
          #[doc = "A preimage has been requested."]
          Requested { hash: ::subxt::sp_core::H256 },
          #[codec(index = 2)]
          #[doc = "A preimage has ben cleared."]
          Cleared { hash: ::subxt::sp_core::H256 },
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum RequestStatus<_0, _1> {
        #[codec(index = 0)]
        Unrequested(::core::option::Option<(_0, _1)>),
        #[codec(index = 1)]
        Requested(::core::primitive::u32),
      }
    }
    pub mod pallet_proxy {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
          #[doc = "`add_proxy`."]
          #[doc = ""]
          #[doc = "Removes any corresponding announcement(s)."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
          #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
          #[doc = "- `call`: The call to be made by the `real` account."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Weight is a function of the number of proxies the user has (P)."]
          #[doc = "# </weight>"]
          proxy {
            real: ::subxt::sp_core::crypto::AccountId32,
            force_proxy_type:
              ::core::option::Option<runtime_types::lagoon_runtime::config::proxy::ProxyType>,
            call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
          },
          #[codec(index = 1)]
          #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
          #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
          #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
          #[doc = "zero."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Weight is a function of the number of proxies the user has (P)."]
          #[doc = "# </weight>"]
          add_proxy {
            delegate: ::subxt::sp_core::crypto::AccountId32,
            proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
            delay: ::core::primitive::u32,
          },
          #[codec(index = 2)]
          #[doc = "Unregister a proxy account for the sender."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
          #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Weight is a function of the number of proxies the user has (P)."]
          #[doc = "# </weight>"]
          remove_proxy {
            delegate: ::subxt::sp_core::crypto::AccountId32,
            proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
            delay: ::core::primitive::u32,
          },
          #[codec(index = 3)]
          #[doc = "Unregister all proxy accounts for the sender."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "WARNING: This may be called on accounts created by `anonymous`, however if done, then"]
          #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Weight is a function of the number of proxies the user has (P)."]
          #[doc = "# </weight>"]
          remove_proxies,
          #[codec(index = 4)]
          #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
          #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
          #[doc = ""]
          #[doc = "Requires a `Signed` origin."]
          #[doc = ""]
          #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
          #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
          #[doc = "allow for maximum flexibility."]
          #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
          #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
          #[doc = "want to use `0`."]
          #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
          #[doc = "zero."]
          #[doc = ""]
          #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
          #[doc = "same sender, with the same parameters."]
          #[doc = ""]
          #[doc = "Fails if there are insufficient funds to pay for deposit."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Weight is a function of the number of proxies the user has (P)."]
          #[doc = "# </weight>"]
          #[doc = "TODO: Might be over counting 1 read"]
          anonymous {
            proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
            delay: ::core::primitive::u32,
            index: ::core::primitive::u16,
          },
          #[codec(index = 5)]
          #[doc = "Removes a previously spawned anonymous proxy."]
          #[doc = ""]
          #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
          #[doc = "inaccessible."]
          #[doc = ""]
          #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
          #[doc = "`anonymous` with corresponding parameters."]
          #[doc = ""]
          #[doc = "- `spawner`: The account that originally called `anonymous` to create this account."]
          #[doc = "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`."]
          #[doc = "- `proxy_type`: The proxy type originally passed to `anonymous`."]
          #[doc = "- `height`: The height of the chain when the call to `anonymous` was processed."]
          #[doc = "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed."]
          #[doc = ""]
          #[doc = "Fails with `NoPermission` in case the caller is not a previously created anonymous"]
          #[doc = "account whose `anonymous` call has corresponding parameters."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Weight is a function of the number of proxies the user has (P)."]
          #[doc = "# </weight>"]
          kill_anonymous {
            spawner: ::subxt::sp_core::crypto::AccountId32,
            proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
            index: ::core::primitive::u16,
            #[codec(compact)]
            height: ::core::primitive::u32,
            #[codec(compact)]
            ext_index: ::core::primitive::u32,
          },
          #[codec(index = 6)]
          #[doc = "Publish the hash of a proxy-call that will be made in the future."]
          #[doc = ""]
          #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
          #[doc = "if the delay associated with the proxy relationship is greater than zero."]
          #[doc = ""]
          #[doc = "No more than `MaxPending` announcements may be made at any one time."]
          #[doc = ""]
          #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
          #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
          #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Weight is a function of:"]
          #[doc = "- A: the number of announcements made."]
          #[doc = "- P: the number of proxies the user has."]
          #[doc = "# </weight>"]
          announce {
            real: ::subxt::sp_core::crypto::AccountId32,
            call_hash: ::subxt::sp_core::H256,
          },
          #[codec(index = 7)]
          #[doc = "Remove a given announcement."]
          #[doc = ""]
          #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
          #[doc = "the deposit."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
          #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Weight is a function of:"]
          #[doc = "- A: the number of announcements made."]
          #[doc = "- P: the number of proxies the user has."]
          #[doc = "# </weight>"]
          remove_announcement {
            real: ::subxt::sp_core::crypto::AccountId32,
            call_hash: ::subxt::sp_core::H256,
          },
          #[codec(index = 8)]
          #[doc = "Remove the given announcement of a delegate."]
          #[doc = ""]
          #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
          #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `delegate`: The account that previously announced the call."]
          #[doc = "- `call_hash`: The hash of the call to be made."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Weight is a function of:"]
          #[doc = "- A: the number of announcements made."]
          #[doc = "- P: the number of proxies the user has."]
          #[doc = "# </weight>"]
          reject_announcement {
            delegate: ::subxt::sp_core::crypto::AccountId32,
            call_hash: ::subxt::sp_core::H256,
          },
          #[codec(index = 9)]
          #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
          #[doc = "`add_proxy`."]
          #[doc = ""]
          #[doc = "Removes any corresponding announcement(s)."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
          #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
          #[doc = "- `call`: The call to be made by the `real` account."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Weight is a function of:"]
          #[doc = "- A: the number of announcements made."]
          #[doc = "- P: the number of proxies the user has."]
          #[doc = "# </weight>"]
          proxy_announced {
            delegate: ::subxt::sp_core::crypto::AccountId32,
            real: ::subxt::sp_core::crypto::AccountId32,
            force_proxy_type:
              ::core::option::Option<runtime_types::lagoon_runtime::config::proxy::ProxyType>,
            call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "There are too many proxies registered or too many announcements pending."]
          TooMany,
          #[codec(index = 1)]
          #[doc = "Proxy registration not found."]
          NotFound,
          #[codec(index = 2)]
          #[doc = "Sender is not a proxy of the account to be proxied."]
          NotProxy,
          #[codec(index = 3)]
          #[doc = "A call which is incompatible with the proxy type's filter was attempted."]
          Unproxyable,
          #[codec(index = 4)]
          #[doc = "Account is already a proxy."]
          Duplicate,
          #[codec(index = 5)]
          #[doc = "Call may not be made by proxy because it may escalate its privileges."]
          NoPermission,
          #[codec(index = 6)]
          #[doc = "Announcement, if made at all, was made too recently."]
          Unannounced,
          #[codec(index = 7)]
          #[doc = "Cannot add self as proxy."]
          NoSelfProxy,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "A proxy was executed correctly, with the given."]
          ProxyExecuted {
            result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
          },
          #[codec(index = 1)]
          #[doc = "Anonymous account has been created by new proxy with given"]
          #[doc = "disambiguation index and proxy type."]
          AnonymousCreated {
            anonymous: ::subxt::sp_core::crypto::AccountId32,
            who: ::subxt::sp_core::crypto::AccountId32,
            proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
            disambiguation_index: ::core::primitive::u16,
          },
          #[codec(index = 2)]
          #[doc = "An announcement was placed to make a call in the future."]
          Announced {
            real: ::subxt::sp_core::crypto::AccountId32,
            proxy: ::subxt::sp_core::crypto::AccountId32,
            call_hash: ::subxt::sp_core::H256,
          },
          #[codec(index = 3)]
          #[doc = "A proxy was added."]
          ProxyAdded {
            delegator: ::subxt::sp_core::crypto::AccountId32,
            delegatee: ::subxt::sp_core::crypto::AccountId32,
            proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
            delay: ::core::primitive::u32,
          },
          #[codec(index = 4)]
          #[doc = "A proxy was removed."]
          ProxyRemoved {
            delegator: ::subxt::sp_core::crypto::AccountId32,
            delegatee: ::subxt::sp_core::crypto::AccountId32,
            proxy_type: runtime_types::lagoon_runtime::config::proxy::ProxyType,
            delay: ::core::primitive::u32,
          },
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Announcement<_0, _1, _2> {
        pub real: _0,
        pub call_hash: _1,
        pub height: _2,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ProxyDefinition<_0, _1, _2> {
        pub delegate: _0,
        pub proxy_type: _1,
        pub delay: _2,
      }
    }
    pub mod pallet_quorum {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Quorum member submit proposal"]
          submit_proposal {
            proposal: runtime_types::tidefi_primitives::ProposalType<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
              ::std::vec::Vec<::core::primitive::u8>,
              ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
            >,
          },
          #[codec(index = 1)]
          #[doc = "Quorum member acknowledge to a proposal"]
          acknowledge_proposal { proposal: ::subxt::sp_core::H256 },
          #[codec(index = 2)]
          #[doc = "Quorum member acknowledge a burned item and started the process."]
          acknowledge_burned { proposal: ::subxt::sp_core::H256 },
          #[codec(index = 3)]
          #[doc = "Quorum member reject a proposal"]
          reject_proposal { proposal: ::subxt::sp_core::H256 },
          #[codec(index = 4)]
          #[doc = "Evaluate the state of a proposal given the current vote threshold"]
          eval_proposal_state { proposal: ::subxt::sp_core::H256 },
          #[codec(index = 5)]
          #[doc = "Quorum member submit his own public keys"]
          submit_public_keys {
            public_keys: ::std::vec::Vec<(
              ::core::primitive::u32,
              ::std::vec::Vec<::core::primitive::u8>,
            )>,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Asset is currently disabled or do not exist on chain"]
          AssetDisabled,
          #[codec(index = 1)]
          #[doc = "The access to the Quorum pallet is not allowed for this account ID."]
          AccessDenied,
          #[codec(index = 2)]
          #[doc = "Unable to burn token."]
          BurnFailed,
          #[codec(index = 3)]
          #[doc = "Proposals cap exceeded, try again later."]
          ProposalsCapExceeded,
          #[codec(index = 4)]
          #[doc = "No proposal with the ID was found"]
          ProposalDoesNotExist,
          #[codec(index = 5)]
          #[doc = "Proposal block number is in the future."]
          ProposalBlockIsInFuture,
          #[codec(index = 6)]
          #[doc = "Proposal has either failed or succeeded"]
          ProposalAlreadyComplete,
          #[codec(index = 7)]
          #[doc = "Lifetime of proposal has been exceeded"]
          ProposalExpired,
          #[codec(index = 8)]
          #[doc = "Member already voted for this proposal"]
          MemberAlreadyVoted,
          #[codec(index = 9)]
          #[doc = "Mint failed"]
          MintFailed,
          #[codec(index = 10)]
          #[doc = "Invalid proposal"]
          BadProposal,
          #[codec(index = 11)]
          #[doc = "Invalid public key"]
          BadPublicKey,
          #[codec(index = 12)]
          #[doc = "Invalid transaction id"]
          BadTransactionId,
          #[codec(index = 13)]
          #[doc = "Invalid external address"]
          BadExternalAddress,
          #[codec(index = 14)]
          #[doc = "Burned queue cap reached"]
          BurnedQueueOverflow,
          #[codec(index = 15)]
          #[doc = "Watchlist cap reached"]
          WatchlistOverflow,
          #[codec(index = 16)]
          #[doc = "Members cap reached"]
          MembersOverflow,
          #[codec(index = 17)]
          #[doc = "Votes cap reached for this proposal"]
          VotesOverflow,
          #[codec(index = 18)]
          #[doc = "Public keys cap reached for this asset id"]
          PublicKeysOverflow,
          #[codec(index = 19)]
          UnknownError,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "Quorum status changed"]
          StatusChanged { is_enabled: ::core::primitive::bool },
          #[codec(index = 1)]
          #[doc = "Quorum account changed"]
          AccountChanged {
            account_id: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 2)]
          #[doc = "Quorum minted token to the account"]
          Minted {
            proposal_id: ::subxt::sp_core::H256,
            account_id: ::subxt::sp_core::crypto::AccountId32,
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            amount: ::core::primitive::u128,
            transaction_id: ::std::vec::Vec<::core::primitive::u8>,
            compliance_level: runtime_types::tidefi_primitives::ComplianceLevel,
          },
          #[codec(index = 3)]
          #[doc = "A new transaction has been added to the watch list"]
          WatchTransactionAdded {
            account_id: ::subxt::sp_core::crypto::AccountId32,
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            amount: ::core::primitive::u128,
            compliance_level: runtime_types::tidefi_primitives::ComplianceLevel,
            transaction_id: ::std::vec::Vec<::core::primitive::u8>,
            watch_action: runtime_types::tidefi_primitives::WatchListAction,
          },
          #[codec(index = 4)]
          #[doc = "Quorum burned token to the account from tidechain"]
          BurnedInitialized {
            proposal_id: ::subxt::sp_core::H256,
            account_id: ::subxt::sp_core::crypto::AccountId32,
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 5)]
          #[doc = "Quorum member acknowledged the burned and initiated the process"]
          BurnedAcknowledged { proposal_id: ::subxt::sp_core::H256 },
          #[codec(index = 6)]
          #[doc = "Member voted for a proposal"]
          VoteFor {
            account_id: ::subxt::sp_core::crypto::AccountId32,
            proposal_id: ::subxt::sp_core::H256,
          },
          #[codec(index = 7)]
          #[doc = "Member voted against a proposal"]
          VoteAgainst {
            account_id: ::subxt::sp_core::crypto::AccountId32,
            proposal_id: ::subxt::sp_core::H256,
          },
          #[codec(index = 8)]
          #[doc = "Proposal has been processed successfully"]
          ProposalSubmitted { proposal_id: ::subxt::sp_core::H256 },
          #[codec(index = 9)]
          #[doc = "Proposal has been approved"]
          ProposalApproved { proposal_id: ::subxt::sp_core::H256 },
          #[codec(index = 10)]
          #[doc = "Proposal has been processed successfully"]
          ProposalProcessed { proposal_id: ::subxt::sp_core::H256 },
          #[codec(index = 11)]
          #[doc = "Proposal has been rejected"]
          ProposalRejected { proposal_id: ::subxt::sp_core::H256 },
          #[codec(index = 12)]
          #[doc = "The quorum configuration has been updated, all elected members should re-submit public keys"]
          ConfigurationUpdated {
            members: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
            threshold: ::core::primitive::u16,
          },
        }
      }
    }
    pub mod pallet_recovery {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Send a call through a recovered account."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and registered to"]
          #[doc = "be able to make calls on behalf of the recovered account."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `account`: The recovered account you want to make a call on-behalf-of."]
          #[doc = "- `call`: The call you want to make with the recovered account."]
          as_recovered {
            account: ::subxt::sp_core::crypto::AccountId32,
            call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
          },
          #[codec(index = 1)]
          #[doc = "Allow ROOT to bypass the recovery process and set an a rescuer account"]
          #[doc = "for a lost account directly."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _ROOT_."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `lost`: The \"lost account\" to be recovered."]
          #[doc = "- `rescuer`: The \"rescuer account\" which can call as the lost account."]
          set_recovered {
            lost: ::subxt::sp_core::crypto::AccountId32,
            rescuer: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 2)]
          #[doc = "Create a recovery configuration for your account. This makes your account recoverable."]
          #[doc = ""]
          #[doc = "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance"]
          #[doc = "will be reserved for storing the recovery configuration. This deposit is returned"]
          #[doc = "in full when the user calls `remove_recovery`."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be"]
          #[doc = "  ordered and contain no duplicate values."]
          #[doc = "- `threshold`: The number of friends that must vouch for a recovery attempt before the"]
          #[doc = "  account can be recovered. Should be less than or equal to the length of the list of"]
          #[doc = "  friends."]
          #[doc = "- `delay_period`: The number of blocks after a recovery attempt is initialized that"]
          #[doc = "  needs to pass before the account can be recovered."]
          create_recovery {
            friends: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
            threshold: ::core::primitive::u16,
            delay_period: ::core::primitive::u32,
          },
          #[codec(index = 3)]
          #[doc = "Initiate the process for recovering a recoverable account."]
          #[doc = ""]
          #[doc = "Payment: `RecoveryDeposit` balance will be reserved for initiating the"]
          #[doc = "recovery process. This deposit will always be repatriated to the account"]
          #[doc = "trying to be recovered. See `close_recovery`."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `account`: The lost account that you want to recover. This account needs to be"]
          #[doc = "  recoverable (i.e. have a recovery configuration)."]
          initiate_recovery {
            account: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 4)]
          #[doc = "Allow a \"friend\" of a recoverable account to vouch for an active recovery"]
          #[doc = "process for that account."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and must be a \"friend\""]
          #[doc = "for the recoverable account."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `lost`: The lost account that you want to recover."]
          #[doc = "- `rescuer`: The account trying to rescue the lost account that you want to vouch for."]
          #[doc = ""]
          #[doc = "The combination of these two parameters must point to an active recovery"]
          #[doc = "process."]
          vouch_recovery {
            lost: ::subxt::sp_core::crypto::AccountId32,
            rescuer: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 5)]
          #[doc = "Allow a successful rescuer to claim their recovered account."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\""]
          #[doc = "who has successfully completed the account recovery process: collected"]
          #[doc = "`threshold` or more vouches, waited `delay_period` blocks since initiation."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `account`: The lost account that you want to claim has been successfully recovered by"]
          #[doc = "  you."]
          claim_recovery {
            account: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 6)]
          #[doc = "As the controller of a recoverable account, close an active recovery"]
          #[doc = "process for your account."]
          #[doc = ""]
          #[doc = "Payment: By calling this function, the recoverable account will receive"]
          #[doc = "the recovery deposit `RecoveryDeposit` placed by the rescuer."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and must be a"]
          #[doc = "recoverable account with an active recovery process for it."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `rescuer`: The account trying to rescue this recoverable account."]
          close_recovery {
            rescuer: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 7)]
          #[doc = "Remove the recovery process for your account. Recovered accounts are still accessible."]
          #[doc = ""]
          #[doc = "NOTE: The user must make sure to call `close_recovery` on all active"]
          #[doc = "recovery attempts before calling this function else it will fail."]
          #[doc = ""]
          #[doc = "Payment: By calling this function the recoverable account will unreserve"]
          #[doc = "their recovery configuration deposit."]
          #[doc = "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)"]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and must be a"]
          #[doc = "recoverable account (i.e. has a recovery configuration)."]
          remove_recovery,
          #[codec(index = 8)]
          #[doc = "Cancel the ability to use `as_recovered` for `account`."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_ and registered to"]
          #[doc = "be able to make calls on behalf of the recovered account."]
          #[doc = ""]
          #[doc = "Parameters:"]
          #[doc = "- `account`: The recovered account you are able to call on-behalf-of."]
          cancel_recovered {
            account: ::subxt::sp_core::crypto::AccountId32,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "User is not allowed to make a call on behalf of this account"]
          NotAllowed,
          #[codec(index = 1)]
          #[doc = "Threshold must be greater than zero"]
          ZeroThreshold,
          #[codec(index = 2)]
          #[doc = "Friends list must be greater than zero and threshold"]
          NotEnoughFriends,
          #[codec(index = 3)]
          #[doc = "Friends list must be less than max friends"]
          MaxFriends,
          #[codec(index = 4)]
          #[doc = "Friends list must be sorted and free of duplicates"]
          NotSorted,
          #[codec(index = 5)]
          #[doc = "This account is not set up for recovery"]
          NotRecoverable,
          #[codec(index = 6)]
          #[doc = "This account is already set up for recovery"]
          AlreadyRecoverable,
          #[codec(index = 7)]
          #[doc = "A recovery process has already started for this account"]
          AlreadyStarted,
          #[codec(index = 8)]
          #[doc = "A recovery process has not started for this rescuer"]
          NotStarted,
          #[codec(index = 9)]
          #[doc = "This account is not a friend who can vouch"]
          NotFriend,
          #[codec(index = 10)]
          #[doc = "The friend must wait until the delay period to vouch for this recovery"]
          DelayPeriod,
          #[codec(index = 11)]
          #[doc = "This user has already vouched for this recovery"]
          AlreadyVouched,
          #[codec(index = 12)]
          #[doc = "The threshold for recovering this account has not been met"]
          Threshold,
          #[codec(index = 13)]
          #[doc = "There are still active recovery attempts that need to be closed"]
          StillActive,
          #[codec(index = 14)]
          #[doc = "This account is already set up for recovery"]
          AlreadyProxy,
          #[codec(index = 15)]
          #[doc = "Some internal state is broken."]
          BadState,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "A recovery process has been set up for an account."]
          RecoveryCreated {
            account: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 1)]
          #[doc = "A recovery process has been initiated for lost account by rescuer account."]
          RecoveryInitiated {
            lost_account: ::subxt::sp_core::crypto::AccountId32,
            rescuer_account: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 2)]
          #[doc = "A recovery process for lost account by rescuer account has been vouched for by sender."]
          RecoveryVouched {
            lost_account: ::subxt::sp_core::crypto::AccountId32,
            rescuer_account: ::subxt::sp_core::crypto::AccountId32,
            sender: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 3)]
          #[doc = "A recovery process for lost account by rescuer account has been closed."]
          RecoveryClosed {
            lost_account: ::subxt::sp_core::crypto::AccountId32,
            rescuer_account: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 4)]
          #[doc = "Lost account has been successfully recovered by rescuer account."]
          AccountRecovered {
            lost_account: ::subxt::sp_core::crypto::AccountId32,
            rescuer_account: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 5)]
          #[doc = "A recovery process has been removed for an account."]
          RecoveryRemoved {
            lost_account: ::subxt::sp_core::crypto::AccountId32,
          },
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ActiveRecovery<_0, _1, _2> {
        pub created: _0,
        pub deposit: _1,
        pub friends: _2,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RecoveryConfig<_0, _1, _2> {
        pub delay_period: _0,
        pub deposit: _1,
        pub friends: _2,
        pub threshold: ::core::primitive::u16,
      }
    }
    pub mod pallet_scheduler {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Anonymously schedule a task."]
          schedule {
            when: ::core::primitive::u32,
            maybe_periodic:
              ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
            priority: ::core::primitive::u8,
            call: ::std::boxed::Box<
              runtime_types::frame_support::traits::schedule::MaybeHashed<
                runtime_types::lagoon_runtime::Call,
                ::subxt::sp_core::H256,
              >,
            >,
          },
          #[codec(index = 1)]
          #[doc = "Cancel an anonymously scheduled task."]
          cancel {
            when: ::core::primitive::u32,
            index: ::core::primitive::u32,
          },
          #[codec(index = 2)]
          #[doc = "Schedule a named task."]
          schedule_named {
            id: ::std::vec::Vec<::core::primitive::u8>,
            when: ::core::primitive::u32,
            maybe_periodic:
              ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
            priority: ::core::primitive::u8,
            call: ::std::boxed::Box<
              runtime_types::frame_support::traits::schedule::MaybeHashed<
                runtime_types::lagoon_runtime::Call,
                ::subxt::sp_core::H256,
              >,
            >,
          },
          #[codec(index = 3)]
          #[doc = "Cancel a named scheduled task."]
          cancel_named {
            id: ::std::vec::Vec<::core::primitive::u8>,
          },
          #[codec(index = 4)]
          #[doc = "Anonymously schedule a task after a delay."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Same as [`schedule`]."]
          #[doc = "# </weight>"]
          schedule_after {
            after: ::core::primitive::u32,
            maybe_periodic:
              ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
            priority: ::core::primitive::u8,
            call: ::std::boxed::Box<
              runtime_types::frame_support::traits::schedule::MaybeHashed<
                runtime_types::lagoon_runtime::Call,
                ::subxt::sp_core::H256,
              >,
            >,
          },
          #[codec(index = 5)]
          #[doc = "Schedule a named task after a delay."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "Same as [`schedule_named`](Self::schedule_named)."]
          #[doc = "# </weight>"]
          schedule_named_after {
            id: ::std::vec::Vec<::core::primitive::u8>,
            after: ::core::primitive::u32,
            maybe_periodic:
              ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
            priority: ::core::primitive::u8,
            call: ::std::boxed::Box<
              runtime_types::frame_support::traits::schedule::MaybeHashed<
                runtime_types::lagoon_runtime::Call,
                ::subxt::sp_core::H256,
              >,
            >,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Failed to schedule a call"]
          FailedToSchedule,
          #[codec(index = 1)]
          #[doc = "Cannot find the scheduled call."]
          NotFound,
          #[codec(index = 2)]
          #[doc = "Given target block number is in the past."]
          TargetBlockNumberInPast,
          #[codec(index = 3)]
          #[doc = "Reschedule failed because it does not change scheduled time."]
          RescheduleNoChange,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "Scheduled some task."]
          Scheduled {
            when: ::core::primitive::u32,
            index: ::core::primitive::u32,
          },
          #[codec(index = 1)]
          #[doc = "Canceled some task."]
          Canceled {
            when: ::core::primitive::u32,
            index: ::core::primitive::u32,
          },
          #[codec(index = 2)]
          #[doc = "Dispatched some task."]
          Dispatched {
            task: (::core::primitive::u32, ::core::primitive::u32),
            id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
            result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
          },
          #[codec(index = 3)]
          #[doc = "The call for the provided hash was not found so the task has been aborted."]
          CallLookupFailed {
            task: (::core::primitive::u32, ::core::primitive::u32),
            id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
            error: runtime_types::frame_support::traits::schedule::LookupError,
          },
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ScheduledV3<_0, _1, _2, _3> {
        pub maybe_id: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
        pub priority: ::core::primitive::u8,
        pub call: _0,
        pub maybe_periodic: ::core::option::Option<(_1, _1)>,
        pub origin: _2,
        #[codec(skip)]
        pub __subxt_unused_type_params: ::core::marker::PhantomData<_3>,
      }
    }
    pub mod pallet_security {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Change chain status."]
          #[doc = ""]
          #[doc = "This should be used only as emergency as you can disable Oracle or"]
          #[doc = "Quorum independently. You can also disable a currency if it's a known issue with"]
          #[doc = "a bridge. All transactions will be rejected, even from the Oracle"]
          #[doc = "and the Quorum for security reason."]
          #[doc = ""]
          #[doc = "This will also stop the staking blocks increment, so even if the Validators"]
          #[doc = "are still building blocks, they are not counted for the rewards."]
          #[doc = ""]
          #[doc = "- `status_code`: New chain `StatusCode`"]
          #[doc = ""]
          #[doc = "Emits `StatusChanged` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `0`"]
          set_status {
            status_code: runtime_types::tidefi_primitives::StatusCode,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Chain is in maintenance mode"]
          ChainMaintenanceMode,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          StatusChanged(runtime_types::tidefi_primitives::StatusCode),
          #[codec(index = 1)]
          UpdateCurrentBlock(::core::primitive::u32),
        }
      }
    }
    pub mod pallet_session {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Sets the session key(s) of the function caller to `keys`."]
          #[doc = "Allows an account to set its session key prior to becoming a validator."]
          #[doc = "This doesn't take effect until the next session."]
          #[doc = ""]
          #[doc = "The dispatch origin of this function must be signed."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
          #[doc = "  `T::Keys::key_ids()` which is fixed."]
          #[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
          #[doc = "- DbWrites: `origin account`, `NextKeys`"]
          #[doc = "- DbReads per key id: `KeyOwner`"]
          #[doc = "- DbWrites per key id: `KeyOwner`"]
          #[doc = "# </weight>"]
          set_keys {
            keys: runtime_types::lagoon_runtime::SessionKeys,
            proof: ::std::vec::Vec<::core::primitive::u8>,
          },
          #[codec(index = 1)]
          #[doc = "Removes any session key(s) of the function caller."]
          #[doc = ""]
          #[doc = "This doesn't take effect until the next session."]
          #[doc = ""]
          #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
          #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
          #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
          #[doc = "usually means being a stash account)."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
          #[doc = "  of `T::Keys::key_ids()` which is fixed."]
          #[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
          #[doc = "- DbWrites: `NextKeys`, `origin account`"]
          #[doc = "- DbWrites per key id: `KeyOwner`"]
          #[doc = "# </weight>"]
          purge_keys,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Invalid ownership proof."]
          InvalidProof,
          #[codec(index = 1)]
          #[doc = "No associated validator ID for account."]
          NoAssociatedValidatorId,
          #[codec(index = 2)]
          #[doc = "Registered duplicate key."]
          DuplicatedKey,
          #[codec(index = 3)]
          #[doc = "No keys are associated with this account."]
          NoKeys,
          #[codec(index = 4)]
          #[doc = "Key setting account is not live, so it's impossible to associate keys."]
          NoAccount,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "New session has happened. Note that the argument is the session index, not the"]
          #[doc = "block number as the type might suggest."]
          NewSession {
            session_index: ::core::primitive::u32,
          },
        }
      }
    }
    pub mod pallet_staking {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        pub mod pallet {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub enum Call {
            #[codec(index = 0)]
            #[doc = "Take the origin account as a stash and lock up `value` of its balance. `controller` will"]
            #[doc = "be the account that controls it."]
            #[doc = ""]
            #[doc = "`value` must be more than the `minimum_balance` specified by `T::Currency`."]
            #[doc = ""]
            #[doc = "The dispatch origin for this call must be _Signed_ by the stash account."]
            #[doc = ""]
            #[doc = "Emits `Bonded`."]
            #[doc = "# <weight>"]
            #[doc = "- Independent of the arguments. Moderate complexity."]
            #[doc = "- O(1)."]
            #[doc = "- Three extra DB entries."]
            #[doc = ""]
            #[doc = "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned"]
            #[doc = "unless the `origin` falls below _existential deposit_ and gets removed as dust."]
            #[doc = "------------------"]
            #[doc = "# </weight>"]
            bond {
              controller: ::subxt::sp_runtime::MultiAddress<
                ::subxt::sp_core::crypto::AccountId32,
                ::core::primitive::u32,
              >,
              #[codec(compact)]
              value: ::core::primitive::u128,
              payee: runtime_types::pallet_staking::RewardDestination<
                ::subxt::sp_core::crypto::AccountId32,
              >,
            },
            #[codec(index = 1)]
            #[doc = "Add some extra amount that have appeared in the stash `free_balance` into the balance up"]
            #[doc = "for staking."]
            #[doc = ""]
            #[doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."]
            #[doc = ""]
            #[doc = "Use this if there are additional funds in your stash account that you wish to bond."]
            #[doc = "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose"]
            #[doc = "any limitation on the amount that can be added."]
            #[doc = ""]
            #[doc = "Emits `Bonded`."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "- Independent of the arguments. Insignificant complexity."]
            #[doc = "- O(1)."]
            #[doc = "# </weight>"]
            bond_extra {
              #[codec(compact)]
              max_additional: ::core::primitive::u128,
            },
            #[codec(index = 2)]
            #[doc = "Schedule a portion of the stash to be unlocked ready for transfer out after the bond"]
            #[doc = "period ends. If this leaves an amount actively bonded less than"]
            #[doc = "T::Currency::minimum_balance(), then it is increased to the full amount."]
            #[doc = ""]
            #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
            #[doc = ""]
            #[doc = "Once the unlock period is done, you can call `withdraw_unbonded` to actually move"]
            #[doc = "the funds out of management ready for transfer."]
            #[doc = ""]
            #[doc = "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)"]
            #[doc = "can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need"]
            #[doc = "to be called first to remove some of the chunks (if possible)."]
            #[doc = ""]
            #[doc = "If a user encounters the `InsufficientBond` error when calling this extrinsic,"]
            #[doc = "they should call `chill` first in order to free up their bonded funds."]
            #[doc = ""]
            #[doc = "Emits `Unbonded`."]
            #[doc = ""]
            #[doc = "See also [`Call::withdraw_unbonded`]."]
            unbond {
              #[codec(compact)]
              value: ::core::primitive::u128,
            },
            #[codec(index = 3)]
            #[doc = "Remove any unlocked chunks from the `unlocking` queue from our management."]
            #[doc = ""]
            #[doc = "This essentially frees up that balance to be used by the stash account to do"]
            #[doc = "whatever it wants."]
            #[doc = ""]
            #[doc = "The dispatch origin for this call must be _Signed_ by the controller."]
            #[doc = ""]
            #[doc = "Emits `Withdrawn`."]
            #[doc = ""]
            #[doc = "See also [`Call::unbond`]."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "Complexity O(S) where S is the number of slashing spans to remove"]
            #[doc = "NOTE: Weight annotation is the kill scenario, we refund otherwise."]
            #[doc = "# </weight>"]
            withdraw_unbonded {
              num_slashing_spans: ::core::primitive::u32,
            },
            #[codec(index = 4)]
            #[doc = "Declare the desire to validate for the origin controller."]
            #[doc = ""]
            #[doc = "Effects will be felt at the beginning of the next era."]
            #[doc = ""]
            #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
            validate {
              prefs: runtime_types::pallet_staking::ValidatorPrefs,
            },
            #[codec(index = 5)]
            #[doc = "Declare the desire to nominate `targets` for the origin controller."]
            #[doc = ""]
            #[doc = "Effects will be felt at the beginning of the next era."]
            #[doc = ""]
            #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "- The transaction's complexity is proportional to the size of `targets` (N)"]
            #[doc = "which is capped at CompactAssignments::LIMIT (T::MaxNominations)."]
            #[doc = "- Both the reads and writes follow a similar pattern."]
            #[doc = "# </weight>"]
            nominate {
              targets: ::std::vec::Vec<
                ::subxt::sp_runtime::MultiAddress<
                  ::subxt::sp_core::crypto::AccountId32,
                  ::core::primitive::u32,
                >,
              >,
            },
            #[codec(index = 6)]
            #[doc = "Declare no desire to either validate or nominate."]
            #[doc = ""]
            #[doc = "Effects will be felt at the beginning of the next era."]
            #[doc = ""]
            #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "- Independent of the arguments. Insignificant complexity."]
            #[doc = "- Contains one read."]
            #[doc = "- Writes are limited to the `origin` account key."]
            #[doc = "# </weight>"]
            chill,
            #[codec(index = 7)]
            #[doc = "(Re-)set the payment target for a controller."]
            #[doc = ""]
            #[doc = "Effects will be felt instantly (as soon as this function is completed successfully)."]
            #[doc = ""]
            #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "- Independent of the arguments. Insignificant complexity."]
            #[doc = "- Contains a limited number of reads."]
            #[doc = "- Writes are limited to the `origin` account key."]
            #[doc = "---------"]
            #[doc = "- Weight: O(1)"]
            #[doc = "- DB Weight:"]
            #[doc = "    - Read: Ledger"]
            #[doc = "    - Write: Payee"]
            #[doc = "# </weight>"]
            set_payee {
              payee: runtime_types::pallet_staking::RewardDestination<
                ::subxt::sp_core::crypto::AccountId32,
              >,
            },
            #[codec(index = 8)]
            #[doc = "(Re-)set the controller of a stash."]
            #[doc = ""]
            #[doc = "Effects will be felt instantly (as soon as this function is completed successfully)."]
            #[doc = ""]
            #[doc = "The dispatch origin for this call must be _Signed_ by the stash, not the controller."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "- Independent of the arguments. Insignificant complexity."]
            #[doc = "- Contains a limited number of reads."]
            #[doc = "- Writes are limited to the `origin` account key."]
            #[doc = "----------"]
            #[doc = "Weight: O(1)"]
            #[doc = "DB Weight:"]
            #[doc = "- Read: Bonded, Ledger New Controller, Ledger Old Controller"]
            #[doc = "- Write: Bonded, Ledger New Controller, Ledger Old Controller"]
            #[doc = "# </weight>"]
            set_controller {
              controller: ::subxt::sp_runtime::MultiAddress<
                ::subxt::sp_core::crypto::AccountId32,
                ::core::primitive::u32,
              >,
            },
            #[codec(index = 9)]
            #[doc = "Sets the ideal number of validators."]
            #[doc = ""]
            #[doc = "The dispatch origin must be Root."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "Weight: O(1)"]
            #[doc = "Write: Validator Count"]
            #[doc = "# </weight>"]
            set_validator_count {
              #[codec(compact)]
              new: ::core::primitive::u32,
            },
            #[codec(index = 10)]
            #[doc = "Increments the ideal number of validators."]
            #[doc = ""]
            #[doc = "The dispatch origin must be Root."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "Same as [`Self::set_validator_count`]."]
            #[doc = "# </weight>"]
            increase_validator_count {
              #[codec(compact)]
              additional: ::core::primitive::u32,
            },
            #[codec(index = 11)]
            #[doc = "Scale up the ideal number of validators by a factor."]
            #[doc = ""]
            #[doc = "The dispatch origin must be Root."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "Same as [`Self::set_validator_count`]."]
            #[doc = "# </weight>"]
            scale_validator_count {
              factor: runtime_types::sp_arithmetic::per_things::Percent,
            },
            #[codec(index = 12)]
            #[doc = "Force there to be no new eras indefinitely."]
            #[doc = ""]
            #[doc = "The dispatch origin must be Root."]
            #[doc = ""]
            #[doc = "# Warning"]
            #[doc = ""]
            #[doc = "The election process starts multiple blocks before the end of the era."]
            #[doc = "Thus the election process may be ongoing when this is called. In this case the"]
            #[doc = "election will continue until the next era is triggered."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "- No arguments."]
            #[doc = "- Weight: O(1)"]
            #[doc = "- Write: ForceEra"]
            #[doc = "# </weight>"]
            force_no_eras,
            #[codec(index = 13)]
            #[doc = "Force there to be a new era at the end of the next session. After this, it will be"]
            #[doc = "reset to normal (non-forced) behaviour."]
            #[doc = ""]
            #[doc = "The dispatch origin must be Root."]
            #[doc = ""]
            #[doc = "# Warning"]
            #[doc = ""]
            #[doc = "The election process starts multiple blocks before the end of the era."]
            #[doc = "If this is called just before a new era is triggered, the election process may not"]
            #[doc = "have enough blocks to get a result."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "- No arguments."]
            #[doc = "- Weight: O(1)"]
            #[doc = "- Write ForceEra"]
            #[doc = "# </weight>"]
            force_new_era,
            #[codec(index = 14)]
            #[doc = "Set the validators who cannot be slashed (if any)."]
            #[doc = ""]
            #[doc = "The dispatch origin must be Root."]
            set_invulnerables {
              invulnerables: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
            },
            #[codec(index = 15)]
            #[doc = "Force a current staker to become completely unstaked, immediately."]
            #[doc = ""]
            #[doc = "The dispatch origin must be Root."]
            force_unstake {
              stash: ::subxt::sp_core::crypto::AccountId32,
              num_slashing_spans: ::core::primitive::u32,
            },
            #[codec(index = 16)]
            #[doc = "Force there to be a new era at the end of sessions indefinitely."]
            #[doc = ""]
            #[doc = "The dispatch origin must be Root."]
            #[doc = ""]
            #[doc = "# Warning"]
            #[doc = ""]
            #[doc = "The election process starts multiple blocks before the end of the era."]
            #[doc = "If this is called just before a new era is triggered, the election process may not"]
            #[doc = "have enough blocks to get a result."]
            force_new_era_always,
            #[codec(index = 17)]
            #[doc = "Cancel enactment of a deferred slash."]
            #[doc = ""]
            #[doc = "Can be called by the `T::SlashCancelOrigin`."]
            #[doc = ""]
            #[doc = "Parameters: era and indices of the slashes for that era to kill."]
            cancel_deferred_slash {
              era: ::core::primitive::u32,
              slash_indices: ::std::vec::Vec<::core::primitive::u32>,
            },
            #[codec(index = 18)]
            #[doc = "Pay out all the stakers behind a single validator for a single era."]
            #[doc = ""]
            #[doc = "- `validator_stash` is the stash account of the validator. Their nominators, up to"]
            #[doc = "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards."]
            #[doc = "- `era` may be any era between `[current_era - history_depth; current_era]`."]
            #[doc = ""]
            #[doc = "The origin of this call must be _Signed_. Any account can call this function, even if"]
            #[doc = "it is not one of the stakers."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "- Time complexity: at most O(MaxNominatorRewardedPerValidator)."]
            #[doc = "- Contains a limited number of reads and writes."]
            #[doc = "-----------"]
            #[doc = "N is the Number of payouts for the validator (including the validator)"]
            #[doc = "Weight:"]
            #[doc = "- Reward Destination Staked: O(N)"]
            #[doc = "- Reward Destination Controller (Creating): O(N)"]
            #[doc = ""]
            #[doc = "  NOTE: weights are assuming that payouts are made to alive stash account (Staked)."]
            #[doc = "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here."]
            #[doc = "# </weight>"]
            payout_stakers {
              validator_stash: ::subxt::sp_core::crypto::AccountId32,
              era: ::core::primitive::u32,
            },
            #[codec(index = 19)]
            #[doc = "Rebond a portion of the stash scheduled to be unlocked."]
            #[doc = ""]
            #[doc = "The dispatch origin must be signed by the controller."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "- Time complexity: O(L), where L is unlocking chunks"]
            #[doc = "- Bounded by `MaxUnlockingChunks`."]
            #[doc = "- Storage changes: Can't increase storage, only decrease it."]
            #[doc = "# </weight>"]
            rebond {
              #[codec(compact)]
              value: ::core::primitive::u128,
            },
            #[codec(index = 20)]
            #[doc = "Set `HistoryDepth` value. This function will delete any history information"]
            #[doc = "when `HistoryDepth` is reduced."]
            #[doc = ""]
            #[doc = "Parameters:"]
            #[doc = "- `new_history_depth`: The new history depth you would like to set."]
            #[doc = "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This"]
            #[doc = "  should report all the storage items that will be deleted by clearing old era history."]
            #[doc = "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an"]
            #[doc = "  accurate number."]
            #[doc = ""]
            #[doc = "Origin must be root."]
            #[doc = ""]
            #[doc = "# <weight>"]
            #[doc = "- E: Number of history depths removed, i.e. 10 -> 7 = 3"]
            #[doc = "- Weight: O(E)"]
            #[doc = "- DB Weight:"]
            #[doc = "    - Reads: Current Era, History Depth"]
            #[doc = "    - Writes: History Depth"]
            #[doc = "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs"]
            #[doc = "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,"]
            #[doc = "      ErasStartSessionIndex"]
            #[doc = "# </weight>"]
            set_history_depth {
              #[codec(compact)]
              new_history_depth: ::core::primitive::u32,
              #[codec(compact)]
              era_items_deleted: ::core::primitive::u32,
            },
            #[codec(index = 21)]
            #[doc = "Remove all data structures concerning a staker/stash once it is at a state where it can"]
            #[doc = "be considered `dust` in the staking system. The requirements are:"]
            #[doc = ""]
            #[doc = "1. the `total_balance` of the stash is below existential deposit."]
            #[doc = "2. or, the `ledger.total` of the stash is below existential deposit."]
            #[doc = ""]
            #[doc = "The former can happen in cases like a slash; the latter when a fully unbonded account"]
            #[doc = "is still receiving staking rewards in `RewardDestination::Staked`."]
            #[doc = ""]
            #[doc = "It can be called by anyone, as long as `stash` meets the above requirements."]
            #[doc = ""]
            #[doc = "Refunds the transaction fees upon successful execution."]
            reap_stash {
              stash: ::subxt::sp_core::crypto::AccountId32,
              num_slashing_spans: ::core::primitive::u32,
            },
            #[codec(index = 22)]
            #[doc = "Remove the given nominations from the calling validator."]
            #[doc = ""]
            #[doc = "Effects will be felt at the beginning of the next era."]
            #[doc = ""]
            #[doc = "The dispatch origin for this call must be _Signed_ by the controller, not the stash."]
            #[doc = ""]
            #[doc = "- `who`: A list of nominator stash accounts who are nominating this validator which"]
            #[doc = "  should no longer be nominating this validator."]
            #[doc = ""]
            #[doc = "Note: Making this call only makes sense if you first set the validator preferences to"]
            #[doc = "block any further nominations."]
            kick {
              who: ::std::vec::Vec<
                ::subxt::sp_runtime::MultiAddress<
                  ::subxt::sp_core::crypto::AccountId32,
                  ::core::primitive::u32,
                >,
              >,
            },
            #[codec(index = 23)]
            #[doc = "Update the various staking configurations ."]
            #[doc = ""]
            #[doc = "* `min_nominator_bond`: The minimum active bond needed to be a nominator."]
            #[doc = "* `min_validator_bond`: The minimum active bond needed to be a validator."]
            #[doc = "* `max_nominator_count`: The max number of users who can be a nominator at once. When"]
            #[doc = "  set to `None`, no limit is enforced."]
            #[doc = "* `max_validator_count`: The max number of users who can be a validator at once. When"]
            #[doc = "  set to `None`, no limit is enforced."]
            #[doc = "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which"]
            #[doc = "  should be filled in order for the `chill_other` transaction to work."]
            #[doc = "* `min_commission`: The minimum amount of commission that each validators must maintain."]
            #[doc = "  This is checked only upon calling `validate`. Existing validators are not affected."]
            #[doc = ""]
            #[doc = "Origin must be Root to call this function."]
            #[doc = ""]
            #[doc = "NOTE: Existing nominators and validators will not be affected by this update."]
            #[doc = "to kick people under the new limits, `chill_other` should be called."]
            set_staking_configs {
              min_nominator_bond:
                runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u128>,
              min_validator_bond:
                runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u128>,
              max_nominator_count:
                runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u32>,
              max_validator_count:
                runtime_types::pallet_staking::pallet::pallet::ConfigOp<::core::primitive::u32>,
              chill_threshold: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                runtime_types::sp_arithmetic::per_things::Percent,
              >,
              min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                runtime_types::sp_arithmetic::per_things::Perbill,
              >,
            },
            #[codec(index = 24)]
            #[doc = "Declare a `controller` to stop participating as either a validator or nominator."]
            #[doc = ""]
            #[doc = "Effects will be felt at the beginning of the next era."]
            #[doc = ""]
            #[doc = "The dispatch origin for this call must be _Signed_, but can be called by anyone."]
            #[doc = ""]
            #[doc = "If the caller is the same as the controller being targeted, then no further checks are"]
            #[doc = "enforced, and this function behaves just like `chill`."]
            #[doc = ""]
            #[doc = "If the caller is different than the controller being targeted, the following conditions"]
            #[doc = "must be met:"]
            #[doc = ""]
            #[doc = "* `controller` must belong to a nominator who has become non-decodable,"]
            #[doc = ""]
            #[doc = "Or:"]
            #[doc = ""]
            #[doc = "* A `ChillThreshold` must be set and checked which defines how close to the max"]
            #[doc = "  nominators or validators we must reach before users can start chilling one-another."]
            #[doc = "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine"]
            #[doc = "  how close we are to the threshold."]
            #[doc = "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines"]
            #[doc = "  if this is a person that should be chilled because they have not met the threshold"]
            #[doc = "  bond required."]
            #[doc = ""]
            #[doc = "This can be helpful if bond requirements are updated, and we need to remove old users"]
            #[doc = "who do not satisfy these requirements."]
            chill_other {
              controller: ::subxt::sp_core::crypto::AccountId32,
            },
            #[codec(index = 25)]
            #[doc = "Force a validator to have at least the minimum commission. This will not affect a"]
            #[doc = "validator who already has a commission greater than or equal to the minimum. Any account"]
            #[doc = "can call this."]
            force_apply_min_commission {
              validator_stash: ::subxt::sp_core::crypto::AccountId32,
            },
          }
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub enum ConfigOp<_0> {
            #[codec(index = 0)]
            Noop,
            #[codec(index = 1)]
            Set(_0),
            #[codec(index = 2)]
            Remove,
          }
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub enum Error {
            #[codec(index = 0)]
            #[doc = "Not a controller account."]
            NotController,
            #[codec(index = 1)]
            #[doc = "Not a stash account."]
            NotStash,
            #[codec(index = 2)]
            #[doc = "Stash is already bonded."]
            AlreadyBonded,
            #[codec(index = 3)]
            #[doc = "Controller is already paired."]
            AlreadyPaired,
            #[codec(index = 4)]
            #[doc = "Targets cannot be empty."]
            EmptyTargets,
            #[codec(index = 5)]
            #[doc = "Duplicate index."]
            DuplicateIndex,
            #[codec(index = 6)]
            #[doc = "Slash record index out of bounds."]
            InvalidSlashIndex,
            #[codec(index = 7)]
            #[doc = "Cannot have a validator or nominator role, with value less than the minimum defined by"]
            #[doc = "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the"]
            #[doc = "intention, `chill` first to remove one's role as validator/nominator."]
            InsufficientBond,
            #[codec(index = 8)]
            #[doc = "Can not schedule more unlock chunks."]
            NoMoreChunks,
            #[codec(index = 9)]
            #[doc = "Can not rebond without unlocking chunks."]
            NoUnlockChunk,
            #[codec(index = 10)]
            #[doc = "Attempting to target a stash that still has funds."]
            FundedTarget,
            #[codec(index = 11)]
            #[doc = "Invalid era to reward."]
            InvalidEraToReward,
            #[codec(index = 12)]
            #[doc = "Invalid number of nominations."]
            InvalidNumberOfNominations,
            #[codec(index = 13)]
            #[doc = "Items are not sorted and unique."]
            NotSortedAndUnique,
            #[codec(index = 14)]
            #[doc = "Rewards for this era have already been claimed for this validator."]
            AlreadyClaimed,
            #[codec(index = 15)]
            #[doc = "Incorrect previous history depth input provided."]
            IncorrectHistoryDepth,
            #[codec(index = 16)]
            #[doc = "Incorrect number of slashing spans provided."]
            IncorrectSlashingSpans,
            #[codec(index = 17)]
            #[doc = "Internal state has become somehow corrupted and the operation cannot continue."]
            BadState,
            #[codec(index = 18)]
            #[doc = "Too many nomination targets supplied."]
            TooManyTargets,
            #[codec(index = 19)]
            #[doc = "A nomination target was supplied that was blocked or otherwise not a validator."]
            BadTarget,
            #[codec(index = 20)]
            #[doc = "The user has enough bond and thus cannot be chilled forcefully by an external person."]
            CannotChillOther,
            #[codec(index = 21)]
            #[doc = "There are too many nominators in the system. Governance needs to adjust the staking"]
            #[doc = "settings to keep things safe for the runtime."]
            TooManyNominators,
            #[codec(index = 22)]
            #[doc = "There are too many validators in the system. Governance needs to adjust the staking"]
            #[doc = "settings to keep things safe for the runtime."]
            TooManyValidators,
            #[codec(index = 23)]
            #[doc = "Commission is too low. Must be at least `MinCommission`."]
            CommissionTooLow,
          }
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub enum Event {
            #[codec(index = 0)]
            #[doc = "The era payout has been set; the first balance is the validator-payout; the second is"]
            #[doc = "the remainder from the maximum amount of reward."]
            #[doc = "\\[era_index, validator_payout, remainder\\]"]
            EraPaid(
              ::core::primitive::u32,
              ::core::primitive::u128,
              ::core::primitive::u128,
            ),
            #[codec(index = 1)]
            #[doc = "The nominator has been rewarded by this amount. \\[stash, amount\\]"]
            Rewarded(
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            ),
            #[codec(index = 2)]
            #[doc = "One validator (and its nominators) has been slashed by the given amount."]
            #[doc = "\\[validator, amount\\]"]
            Slashed(
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            ),
            #[codec(index = 3)]
            #[doc = "An old slashing report from a prior era was discarded because it could"]
            #[doc = "not be processed. \\[session_index\\]"]
            OldSlashingReportDiscarded(::core::primitive::u32),
            #[codec(index = 4)]
            #[doc = "A new set of stakers was elected."]
            StakersElected,
            #[codec(index = 5)]
            #[doc = "An account has bonded this amount. \\[stash, amount\\]"]
            #[doc = ""]
            #[doc = "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,"]
            #[doc = "it will not be emitted for staking rewards when they are added to stake."]
            Bonded(
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            ),
            #[codec(index = 6)]
            #[doc = "An account has unbonded this amount. \\[stash, amount\\]"]
            Unbonded(
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            ),
            #[codec(index = 7)]
            #[doc = "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`"]
            #[doc = "from the unlocking queue. \\[stash, amount\\]"]
            Withdrawn(
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u128,
            ),
            #[codec(index = 8)]
            #[doc = "A nominator has been kicked from a validator. \\[nominator, stash\\]"]
            Kicked(
              ::subxt::sp_core::crypto::AccountId32,
              ::subxt::sp_core::crypto::AccountId32,
            ),
            #[codec(index = 9)]
            #[doc = "The election failed. No new era is planned."]
            StakingElectionFailed,
            #[codec(index = 10)]
            #[doc = "An account has stopped participating as either a validator or nominator."]
            #[doc = "\\[stash\\]"]
            Chilled(::subxt::sp_core::crypto::AccountId32),
            #[codec(index = 11)]
            #[doc = "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"]
            PayoutStarted(
              ::core::primitive::u32,
              ::subxt::sp_core::crypto::AccountId32,
            ),
            #[codec(index = 12)]
            #[doc = "A validator has set their preferences."]
            ValidatorPrefsSet(
              ::subxt::sp_core::crypto::AccountId32,
              runtime_types::pallet_staking::ValidatorPrefs,
            ),
          }
        }
      }
      pub mod slashing {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct SlashingSpans {
          pub span_index: ::core::primitive::u32,
          pub last_start: ::core::primitive::u32,
          pub last_nonzero_slash: ::core::primitive::u32,
          pub prior: ::std::vec::Vec<::core::primitive::u32>,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct SpanRecord<_0> {
          pub slashed: _0,
          pub paid_out: _0,
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ActiveEraInfo {
        pub index: ::core::primitive::u32,
        pub start: ::core::option::Option<::core::primitive::u64>,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct EraRewardPoints<_0> {
        pub total: ::core::primitive::u32,
        pub individual: ::subxt::KeyedVec<_0, ::core::primitive::u32>,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Exposure<_0, _1> {
        #[codec(compact)]
        pub total: _1,
        #[codec(compact)]
        pub own: _1,
        pub others: ::std::vec::Vec<runtime_types::pallet_staking::IndividualExposure<_0, _1>>,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Forcing {
        #[codec(index = 0)]
        NotForcing,
        #[codec(index = 1)]
        ForceNew,
        #[codec(index = 2)]
        ForceNone,
        #[codec(index = 3)]
        ForceAlways,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct IndividualExposure<_0, _1> {
        pub who: _0,
        #[codec(compact)]
        pub value: _1,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Nominations {
        pub targets: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
          ::subxt::sp_core::crypto::AccountId32,
        >,
        pub submitted_in: ::core::primitive::u32,
        pub suppressed: ::core::primitive::bool,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Releases {
        #[codec(index = 0)]
        V1_0_0Ancient,
        #[codec(index = 1)]
        V2_0_0,
        #[codec(index = 2)]
        V3_0_0,
        #[codec(index = 3)]
        V4_0_0,
        #[codec(index = 4)]
        V5_0_0,
        #[codec(index = 5)]
        V6_0_0,
        #[codec(index = 6)]
        V7_0_0,
        #[codec(index = 7)]
        V8_0_0,
        #[codec(index = 8)]
        V9_0_0,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum RewardDestination<_0> {
        #[codec(index = 0)]
        Staked,
        #[codec(index = 1)]
        Stash,
        #[codec(index = 2)]
        Controller,
        #[codec(index = 3)]
        Account(_0),
        #[codec(index = 4)]
        None,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct StakingLedger {
        pub stash: ::subxt::sp_core::crypto::AccountId32,
        #[codec(compact)]
        pub total: ::core::primitive::u128,
        #[codec(compact)]
        pub active: ::core::primitive::u128,
        pub unlocking: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
          runtime_types::pallet_staking::UnlockChunk<::core::primitive::u128>,
        >,
        pub claimed_rewards: ::std::vec::Vec<::core::primitive::u32>,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct UnappliedSlash<_0, _1> {
        pub validator: _0,
        pub own: _1,
        pub others: ::std::vec::Vec<(_0, _1)>,
        pub reporters: ::std::vec::Vec<_0>,
        pub payout: _1,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct UnlockChunk<_0> {
        #[codec(compact)]
        pub value: _0,
        #[codec(compact)]
        pub era: ::core::primitive::u32,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ValidatorPrefs {
        #[codec(compact)]
        pub commission: runtime_types::sp_arithmetic::per_things::Perbill,
        pub blocked: ::core::primitive::bool,
      }
    }
    pub mod pallet_sudo {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "- Limited storage reads."]
          #[doc = "- One DB write (event)."]
          #[doc = "- Weight of derivative `call` execution + 10,000."]
          #[doc = "# </weight>"]
          sudo {
            call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
          },
          #[codec(index = 1)]
          #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
          #[doc = "This function does not check the weight of the call, and instead allows the"]
          #[doc = "Sudo user to specify the weight of the call."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "- The weight of this call is defined by the caller."]
          #[doc = "# </weight>"]
          sudo_unchecked_weight {
            call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
            weight: ::core::primitive::u64,
          },
          #[codec(index = 2)]
          #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
          #[doc = "key."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "- Limited storage reads."]
          #[doc = "- One DB change."]
          #[doc = "# </weight>"]
          set_key {
            new: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          },
          #[codec(index = 3)]
          #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
          #[doc = "a given account."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "- Limited storage reads."]
          #[doc = "- One DB write (event)."]
          #[doc = "- Weight of derivative `call` execution + 10,000."]
          #[doc = "# </weight>"]
          sudo_as {
            who: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
            call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Sender must be the Sudo account"]
          RequireSudo,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "A sudo just took place. \\[result\\]"]
          Sudid {
            sudo_result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
          },
          #[codec(index = 1)]
          #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
          KeyChanged {
            old_sudoer: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
          },
          #[codec(index = 2)]
          #[doc = "A sudo just took place. \\[result\\]"]
          SudoAsDone {
            sudo_result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
          },
        }
      }
    }
    pub mod pallet_tidefi {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Transfer funds from one account into another."]
          #[doc = ""]
          #[doc = "- `destination_id`: Destination account"]
          #[doc = "- `currency_id`: The currency to transfer"]
          #[doc = "- `amount`: The amount to transfer"]
          #[doc = ""]
          #[doc = "Emits `Transfer` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          transfer {
            destination_id: ::subxt::sp_core::crypto::AccountId32,
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 1)]
          #[doc = "Submit asset withdrawal to the Quorum."]
          #[doc = ""]
          #[doc = "- `currency_id`: The currency to withdraw."]
          #[doc = "- `amount`: The amount to transfer"]
          #[doc = "- `external_address`: External address where to send funds."]
          #[doc = ""]
          #[doc = "Emits `Withdrawal` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          withdrawal {
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            amount: ::core::primitive::u128,
            external_address: ::std::vec::Vec<::core::primitive::u8>,
          },
          #[codec(index = 2)]
          #[doc = "Swap through the market makers."]
          #[doc = ""]
          #[doc = "This will register a new request and will be queued for the oracle, do"]
          #[doc = "not expect an immediate response."]
          #[doc = ""]
          #[doc = "- `currency_id_from`: The currency to send."]
          #[doc = "- `amount_from`: The amount to send."]
          #[doc = "- `currency_id_to`: The currency to receive."]
          #[doc = "- `amount_to`: The expected amount to receive with a 10% margin."]
          #[doc = ""]
          #[doc = "Emits `Swap` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          swap {
            currency_id_from: runtime_types::tidefi_primitives::CurrencyId,
            amount_from: ::core::primitive::u128,
            currency_id_to: runtime_types::tidefi_primitives::CurrencyId,
            amount_to: ::core::primitive::u128,
            swap_type: runtime_types::tidefi_primitives::SwapType,
            slippage_tolerance:
              ::core::option::Option<runtime_types::sp_arithmetic::per_things::Permill>,
          },
          #[codec(index = 3)]
          #[doc = "Cancel swap and release funds."]
          #[doc = ""]
          #[doc = "This will cancel a swap request and release remaining funds, if the swap is partially filled."]
          #[doc = ""]
          #[doc = "- `request_id`: The request ID to cancel."]
          #[doc = ""]
          #[doc = "Emits `SwapCancelled` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          cancel_swap { request_id: ::subxt::sp_core::H256 },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Asset is currently disabled or do not exist on chain"]
          AssetDisabled,
          #[codec(index = 1)]
          #[doc = "Unknown Asset"]
          UnknownAsset,
          #[codec(index = 2)]
          #[doc = "No Funds available for this Asset Id"]
          NoFunds,
          #[codec(index = 3)]
          #[doc = "Unknown Error"]
          UnknownError,
          #[codec(index = 4)]
          #[doc = "Quorum is paused. Withdrawal is not allowed"]
          QuorumPaused,
          #[codec(index = 5)]
          #[doc = "Oracle is paused. Trading is not allowed"]
          OraclePaused,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "Event emitted when transfer is processed."]
          Transfer {
            from_account_id: ::subxt::sp_core::crypto::AccountId32,
            to_account_id: ::subxt::sp_core::crypto::AccountId32,
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            amount: ::core::primitive::u128,
          },
          #[codec(index = 1)]
          #[doc = "Event emitted when widthdraw is initialized."]
          Withdrawal {
            account: ::subxt::sp_core::crypto::AccountId32,
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            amount: ::core::primitive::u128,
            external_address: ::std::vec::Vec<::core::primitive::u8>,
          },
          #[codec(index = 2)]
          #[doc = "Event emitted when swap is initialized."]
          Swap {
            request_id: ::subxt::sp_core::H256,
            account: ::subxt::sp_core::crypto::AccountId32,
            currency_id_from: runtime_types::tidefi_primitives::CurrencyId,
            amount_from: ::core::primitive::u128,
            currency_id_to: runtime_types::tidefi_primitives::CurrencyId,
            amount_to: ::core::primitive::u128,
            extrinsic_hash: [::core::primitive::u8; 32usize],
            slippage_tolerance: runtime_types::sp_arithmetic::per_things::Permill,
            swap_type: runtime_types::tidefi_primitives::SwapType,
            is_market_maker: ::core::primitive::bool,
          },
          #[codec(index = 3)]
          #[doc = "User cancelled the initial swap and the funds has been released"]
          SwapCancelled { request_id: ::subxt::sp_core::H256 },
        }
      }
    }
    pub mod pallet_tidefi_stake {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Stake currency"]
          #[doc = ""]
          #[doc = "- `currency_id`: The currency to stake"]
          #[doc = "- `amount`: The amount to stake"]
          #[doc = "- `duration`: The duration is in numbers of blocks. (blocks are ~6seconds)"]
          #[doc = ""]
          #[doc = "Emits `Staked` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          stake {
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            amount: ::core::primitive::u128,
            duration: ::core::primitive::u32,
          },
          #[codec(index = 1)]
          #[doc = "Unstake"]
          #[doc = ""]
          #[doc = "- `stake_id`: Unique Stake ID"]
          #[doc = "- `force_unstake`: Unstake with extra fees, even if the staking is not expired"]
          #[doc = ""]
          #[doc = "Emits `Unstaked` event when successful."]
          #[doc = ""]
          #[doc = "Weight: `O(1)`"]
          unstake {
            stake_id: ::subxt::sp_core::H256,
            force_unstake: ::core::primitive::bool,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Duration doesn't exist on-chain."]
          InvalidDuration,
          #[codec(index = 1)]
          #[doc = "Exceeded unstake queue's capacity"]
          UnstakeQueueCapExceeded,
          #[codec(index = 2)]
          #[doc = "Insufficient balance"]
          InsufficientBalance,
          #[codec(index = 3)]
          #[doc = "Invalid stake request ID"]
          InvalidStakeId,
          #[codec(index = 4)]
          #[doc = "Stake is not ready"]
          StakingNotReady,
          #[codec(index = 5)]
          #[doc = "Something went wrong with fees transfer"]
          TransferFeesFailed,
          #[codec(index = 6)]
          #[doc = "Something went wrong with funds transfer"]
          TransferFailed,
          #[codec(index = 7)]
          #[doc = "The staked amount is below the minimum stake amount for this currency."]
          AmountTooSmall,
          #[codec(index = 8)]
          #[doc = "The staked amount is above the maximum stake amount for this currency."]
          AmountTooLarge,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "The assets get staked successfully"]
          Staked {
            request_id: ::subxt::sp_core::H256,
            account_id: ::subxt::sp_core::crypto::AccountId32,
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            amount: ::core::primitive::u128,
            duration: ::core::primitive::u32,
          },
          #[codec(index = 1)]
          #[doc = "The assets unstaking has been queued"]
          UnstakeQueued {
            request_id: ::subxt::sp_core::H256,
            account_id: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 2)]
          #[doc = "The assets get `unstaked` successfully"]
          Unstaked {
            request_id: ::subxt::sp_core::H256,
            account_id: ::subxt::sp_core::crypto::AccountId32,
            currency_id: runtime_types::tidefi_primitives::CurrencyId,
            initial_balance: ::core::primitive::u128,
            final_balance: ::core::primitive::u128,
          },
        }
      }
    }
    pub mod pallet_timestamp {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Set the current time."]
          #[doc = ""]
          #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
          #[doc = "phase, if this call hasn't been invoked by that time."]
          #[doc = ""]
          #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
          #[doc = "`MinimumPeriod`."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be `Inherent`."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
          #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
          #[doc = "  `on_finalize`)"]
          #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
          #[doc = "# </weight>"]
          set {
            #[codec(compact)]
            now: ::core::primitive::u64,
          },
        }
      }
    }
    pub mod pallet_transaction_payment {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Releases {
        #[codec(index = 0)]
        V1Ancient,
        #[codec(index = 1)]
        V2,
      }
    }
    pub mod pallet_treasury {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
          #[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
          #[doc = "proposal is awarded."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- Complexity: O(1)"]
          #[doc = "- DbReads: `ProposalCount`, `origin account`"]
          #[doc = "- DbWrites: `ProposalCount`, `Proposals`, `origin account`"]
          #[doc = "# </weight>"]
          propose_spend {
            #[codec(compact)]
            value: ::core::primitive::u128,
            beneficiary: ::subxt::sp_runtime::MultiAddress<
              ::subxt::sp_core::crypto::AccountId32,
              ::core::primitive::u32,
            >,
          },
          #[codec(index = 1)]
          #[doc = "Reject a proposed spend. The original deposit will be slashed."]
          #[doc = ""]
          #[doc = "May only be called from `T::RejectOrigin`."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- Complexity: O(1)"]
          #[doc = "- DbReads: `Proposals`, `rejected proposer account`"]
          #[doc = "- DbWrites: `Proposals`, `rejected proposer account`"]
          #[doc = "# </weight>"]
          reject_proposal {
            #[codec(compact)]
            proposal_id: ::core::primitive::u32,
          },
          #[codec(index = 2)]
          #[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
          #[doc = "and the original deposit will be returned."]
          #[doc = ""]
          #[doc = "May only be called from `T::ApproveOrigin`."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- Complexity: O(1)."]
          #[doc = "- DbReads: `Proposals`, `Approvals`"]
          #[doc = "- DbWrite: `Approvals`"]
          #[doc = "# </weight>"]
          approve_proposal {
            #[codec(compact)]
            proposal_id: ::core::primitive::u32,
          },
          #[codec(index = 3)]
          #[doc = "Force a previously approved proposal to be removed from the approval queue."]
          #[doc = "The original deposit will no longer be returned."]
          #[doc = ""]
          #[doc = "May only be called from `T::RejectOrigin`."]
          #[doc = "- `proposal_id`: The index of a proposal"]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- Complexity: O(A) where `A` is the number of approvals"]
          #[doc = "- Db reads and writes: `Approvals`"]
          #[doc = "# </weight>"]
          #[doc = ""]
          #[doc = "Errors:"]
          #[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
          #[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
          #[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
          remove_approval {
            #[codec(compact)]
            proposal_id: ::core::primitive::u32,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Proposer's balance is too low."]
          InsufficientProposersBalance,
          #[codec(index = 1)]
          #[doc = "No proposal or bounty at that index."]
          InvalidIndex,
          #[codec(index = 2)]
          #[doc = "Too many approvals in the queue."]
          TooManyApprovals,
          #[codec(index = 3)]
          #[doc = "Proposal has not been approved."]
          ProposalNotApproved,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "New proposal."]
          Proposed {
            proposal_index: ::core::primitive::u32,
          },
          #[codec(index = 1)]
          #[doc = "We have ended a spend period and will now allocate funds."]
          Spending {
            budget_remaining: ::core::primitive::u128,
          },
          #[codec(index = 2)]
          #[doc = "Some funds have been allocated."]
          Awarded {
            proposal_index: ::core::primitive::u32,
            award: ::core::primitive::u128,
            account: ::subxt::sp_core::crypto::AccountId32,
          },
          #[codec(index = 3)]
          #[doc = "A proposal was rejected; funds were slashed."]
          Rejected {
            proposal_index: ::core::primitive::u32,
            slashed: ::core::primitive::u128,
          },
          #[codec(index = 4)]
          #[doc = "Some of our funds have been burnt."]
          Burnt {
            burnt_funds: ::core::primitive::u128,
          },
          #[codec(index = 5)]
          #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
          Rollover {
            rollover_balance: ::core::primitive::u128,
          },
          #[codec(index = 6)]
          #[doc = "Some funds have been deposited."]
          Deposit { value: ::core::primitive::u128 },
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Proposal<_0, _1> {
        pub proposer: _0,
        pub value: _1,
        pub beneficiary: _0,
        pub bond: _1,
      }
    }
    pub mod pallet_utility {
      use super::runtime_types;
      pub mod pallet {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Call {
          #[codec(index = 0)]
          #[doc = "Send a batch of dispatch calls."]
          #[doc = ""]
          #[doc = "May be called from any origin."]
          #[doc = ""]
          #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
          #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
          #[doc = ""]
          #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
          #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
          #[doc = "# </weight>"]
          #[doc = ""]
          #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
          #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
          #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
          #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
          #[doc = "event is deposited."]
          batch {
            calls: ::std::vec::Vec<runtime_types::lagoon_runtime::Call>,
          },
          #[codec(index = 1)]
          #[doc = "Send a call through an indexed pseudonym of the sender."]
          #[doc = ""]
          #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
          #[doc = "use the same filter as the origin of this call."]
          #[doc = ""]
          #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
          #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
          #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
          #[doc = "in the Multisig pallet instead."]
          #[doc = ""]
          #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Signed_."]
          as_derivative {
            index: ::core::primitive::u16,
            call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
          },
          #[codec(index = 2)]
          #[doc = "Send a batch of dispatch calls and atomically execute them."]
          #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
          #[doc = ""]
          #[doc = "May be called from any origin."]
          #[doc = ""]
          #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
          #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
          #[doc = ""]
          #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
          #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
          #[doc = "# </weight>"]
          batch_all {
            calls: ::std::vec::Vec<runtime_types::lagoon_runtime::Call>,
          },
          #[codec(index = 3)]
          #[doc = "Dispatches a function call with a provided origin."]
          #[doc = ""]
          #[doc = "The dispatch origin for this call must be _Root_."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- O(1)."]
          #[doc = "- Limited storage reads."]
          #[doc = "- One DB write (event)."]
          #[doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."]
          #[doc = "# </weight>"]
          dispatch_as {
            as_origin: ::std::boxed::Box<runtime_types::lagoon_runtime::OriginCaller>,
            call: ::std::boxed::Box<runtime_types::lagoon_runtime::Call>,
          },
          #[codec(index = 4)]
          #[doc = "Send a batch of dispatch calls."]
          #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
          #[doc = ""]
          #[doc = "May be called from any origin."]
          #[doc = ""]
          #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
          #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
          #[doc = ""]
          #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
          #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
          #[doc = ""]
          #[doc = "# <weight>"]
          #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
          #[doc = "# </weight>"]
          force_batch {
            calls: ::std::vec::Vec<runtime_types::lagoon_runtime::Call>,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Error {
          #[codec(index = 0)]
          #[doc = "Too many calls batched."]
          TooManyCalls,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum Event {
          #[codec(index = 0)]
          #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
          #[doc = "well as the error."]
          BatchInterrupted {
            index: ::core::primitive::u32,
            error: runtime_types::sp_runtime::DispatchError,
          },
          #[codec(index = 1)]
          #[doc = "Batch of dispatches completed fully with no error."]
          BatchCompleted,
          #[codec(index = 2)]
          #[doc = "Batch of dispatches completed but has errors."]
          BatchCompletedWithErrors,
          #[codec(index = 3)]
          #[doc = "A single item within a Batch of dispatches has completed with no error."]
          ItemCompleted,
          #[codec(index = 4)]
          #[doc = "A single item within a Batch of dispatches has completed with error."]
          ItemFailed {
            error: runtime_types::sp_runtime::DispatchError,
          },
          #[codec(index = 5)]
          #[doc = "A call was dispatched."]
          DispatchedAs {
            result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
          },
        }
      }
    }
    pub mod primitive_types {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct H256(pub [::core::primitive::u8; 32usize]);
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct U256(pub [::core::primitive::u64; 4usize]);
    }
    pub mod sp_arithmetic {
      use super::runtime_types;
      pub mod fixed_point {
        use super::runtime_types;
        #[derive(
          :: subxt :: codec :: CompactAs,
          :: subxt :: codec :: Decode,
          :: subxt :: codec :: Encode,
          Debug,
        )]
        pub struct FixedU128(pub ::core::primitive::u128);
      }
      pub mod per_things {
        use super::runtime_types;
        #[derive(
          :: subxt :: codec :: CompactAs,
          :: subxt :: codec :: Decode,
          :: subxt :: codec :: Encode,
          Debug,
        )]
        pub struct PerU16(pub ::core::primitive::u16);
        #[derive(
          :: subxt :: codec :: CompactAs,
          :: subxt :: codec :: Decode,
          :: subxt :: codec :: Encode,
          Debug,
        )]
        pub struct Perbill(pub ::core::primitive::u32);
        #[derive(
          :: subxt :: codec :: CompactAs,
          :: subxt :: codec :: Decode,
          :: subxt :: codec :: Encode,
          Debug,
        )]
        pub struct Percent(pub ::core::primitive::u8);
        #[derive(
          :: subxt :: codec :: CompactAs,
          :: subxt :: codec :: Decode,
          :: subxt :: codec :: Encode,
          Debug,
        )]
        pub struct Permill(pub ::core::primitive::u32);
      }
    }
    pub mod sp_authority_discovery {
      use super::runtime_types;
      pub mod app {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Public(pub runtime_types::sp_core::sr25519::Public);
      }
    }
    pub mod sp_consensus_babe {
      use super::runtime_types;
      pub mod app {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Public(pub runtime_types::sp_core::sr25519::Public);
      }
      pub mod digests {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum NextConfigDescriptor {
          #[codec(index = 1)]
          V1 {
            c: (::core::primitive::u64, ::core::primitive::u64),
            allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
          },
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum PreDigest {
          #[codec(index = 1)]
          Primary(runtime_types::sp_consensus_babe::digests::PrimaryPreDigest),
          #[codec(index = 2)]
          SecondaryPlain(runtime_types::sp_consensus_babe::digests::SecondaryPlainPreDigest),
          #[codec(index = 3)]
          SecondaryVRF(runtime_types::sp_consensus_babe::digests::SecondaryVRFPreDigest),
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct PrimaryPreDigest {
          pub authority_index: ::core::primitive::u32,
          pub slot: runtime_types::sp_consensus_slots::Slot,
          pub vrf_output: [::core::primitive::u8; 32usize],
          pub vrf_proof: [::core::primitive::u8; 64usize],
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct SecondaryPlainPreDigest {
          pub authority_index: ::core::primitive::u32,
          pub slot: runtime_types::sp_consensus_slots::Slot,
        }
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct SecondaryVRFPreDigest {
          pub authority_index: ::core::primitive::u32,
          pub slot: runtime_types::sp_consensus_slots::Slot,
          pub vrf_output: [::core::primitive::u8; 32usize],
          pub vrf_proof: [::core::primitive::u8; 64usize],
        }
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum AllowedSlots {
        #[codec(index = 0)]
        PrimarySlots,
        #[codec(index = 1)]
        PrimaryAndSecondaryPlainSlots,
        #[codec(index = 2)]
        PrimaryAndSecondaryVRFSlots,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct BabeEpochConfiguration {
        pub c: (::core::primitive::u64, ::core::primitive::u64),
        pub allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
      }
    }
    pub mod sp_consensus_slots {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct EquivocationProof<_0, _1> {
        pub offender: _1,
        pub slot: runtime_types::sp_consensus_slots::Slot,
        pub first_header: _0,
        pub second_header: _0,
      }
      #[derive(
        :: subxt :: codec :: CompactAs,
        :: subxt :: codec :: Decode,
        :: subxt :: codec :: Encode,
        Debug,
      )]
      pub struct Slot(pub ::core::primitive::u64);
    }
    pub mod sp_core {
      use super::runtime_types;
      pub mod crypto {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct AccountId32(pub [::core::primitive::u8; 32usize]);
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
      }
      pub mod ecdsa {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Signature(pub [::core::primitive::u8; 65usize]);
      }
      pub mod ed25519 {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Public(pub [::core::primitive::u8; 32usize]);
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Signature(pub [::core::primitive::u8; 64usize]);
      }
      pub mod offchain {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct OpaqueMultiaddr(pub ::std::vec::Vec<::core::primitive::u8>);
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct OpaqueNetworkState {
          pub peer_id: runtime_types::sp_core::OpaquePeerId,
          pub external_addresses:
            ::std::vec::Vec<runtime_types::sp_core::offchain::OpaqueMultiaddr>,
        }
      }
      pub mod sr25519 {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Public(pub [::core::primitive::u8; 32usize]);
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Signature(pub [::core::primitive::u8; 64usize]);
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct OpaquePeerId(pub ::std::vec::Vec<::core::primitive::u8>);
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Void {}
    }
    pub mod sp_finality_grandpa {
      use super::runtime_types;
      pub mod app {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Public(pub runtime_types::sp_core::ed25519::Public);
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct Signature(pub runtime_types::sp_core::ed25519::Signature);
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum Equivocation<_0, _1> {
        #[codec(index = 0)]
        Prevote(
          runtime_types::finality_grandpa::Equivocation<
            runtime_types::sp_finality_grandpa::app::Public,
            runtime_types::finality_grandpa::Prevote<_0, _1>,
            runtime_types::sp_finality_grandpa::app::Signature,
          >,
        ),
        #[codec(index = 1)]
        Precommit(
          runtime_types::finality_grandpa::Equivocation<
            runtime_types::sp_finality_grandpa::app::Public,
            runtime_types::finality_grandpa::Precommit<_0, _1>,
            runtime_types::sp_finality_grandpa::app::Signature,
          >,
        ),
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct EquivocationProof<_0, _1> {
        pub set_id: ::core::primitive::u64,
        pub equivocation: runtime_types::sp_finality_grandpa::Equivocation<_0, _1>,
      }
    }
    pub mod sp_npos_elections {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ElectionScore {
        pub minimal_stake: ::core::primitive::u128,
        pub sum_stake: ::core::primitive::u128,
        pub sum_stake_squared: ::core::primitive::u128,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Support<_0> {
        pub total: ::core::primitive::u128,
        pub voters: ::std::vec::Vec<(_0, ::core::primitive::u128)>,
      }
    }
    pub mod sp_runtime {
      use super::runtime_types;
      pub mod generic {
        use super::runtime_types;
        pub mod digest {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct Digest {
            pub logs: ::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
          }
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub enum DigestItem {
            #[codec(index = 6)]
            PreRuntime(
              [::core::primitive::u8; 4usize],
              ::std::vec::Vec<::core::primitive::u8>,
            ),
            #[codec(index = 4)]
            Consensus(
              [::core::primitive::u8; 4usize],
              ::std::vec::Vec<::core::primitive::u8>,
            ),
            #[codec(index = 5)]
            Seal(
              [::core::primitive::u8; 4usize],
              ::std::vec::Vec<::core::primitive::u8>,
            ),
            #[codec(index = 0)]
            Other(::std::vec::Vec<::core::primitive::u8>),
            #[codec(index = 8)]
            RuntimeEnvironmentUpdated,
          }
        }
        pub mod era {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub enum Era {
            #[codec(index = 0)]
            Immortal,
            #[codec(index = 1)]
            Mortal1(::core::primitive::u8),
            #[codec(index = 2)]
            Mortal2(::core::primitive::u8),
            #[codec(index = 3)]
            Mortal3(::core::primitive::u8),
            #[codec(index = 4)]
            Mortal4(::core::primitive::u8),
            #[codec(index = 5)]
            Mortal5(::core::primitive::u8),
            #[codec(index = 6)]
            Mortal6(::core::primitive::u8),
            #[codec(index = 7)]
            Mortal7(::core::primitive::u8),
            #[codec(index = 8)]
            Mortal8(::core::primitive::u8),
            #[codec(index = 9)]
            Mortal9(::core::primitive::u8),
            #[codec(index = 10)]
            Mortal10(::core::primitive::u8),
            #[codec(index = 11)]
            Mortal11(::core::primitive::u8),
            #[codec(index = 12)]
            Mortal12(::core::primitive::u8),
            #[codec(index = 13)]
            Mortal13(::core::primitive::u8),
            #[codec(index = 14)]
            Mortal14(::core::primitive::u8),
            #[codec(index = 15)]
            Mortal15(::core::primitive::u8),
            #[codec(index = 16)]
            Mortal16(::core::primitive::u8),
            #[codec(index = 17)]
            Mortal17(::core::primitive::u8),
            #[codec(index = 18)]
            Mortal18(::core::primitive::u8),
            #[codec(index = 19)]
            Mortal19(::core::primitive::u8),
            #[codec(index = 20)]
            Mortal20(::core::primitive::u8),
            #[codec(index = 21)]
            Mortal21(::core::primitive::u8),
            #[codec(index = 22)]
            Mortal22(::core::primitive::u8),
            #[codec(index = 23)]
            Mortal23(::core::primitive::u8),
            #[codec(index = 24)]
            Mortal24(::core::primitive::u8),
            #[codec(index = 25)]
            Mortal25(::core::primitive::u8),
            #[codec(index = 26)]
            Mortal26(::core::primitive::u8),
            #[codec(index = 27)]
            Mortal27(::core::primitive::u8),
            #[codec(index = 28)]
            Mortal28(::core::primitive::u8),
            #[codec(index = 29)]
            Mortal29(::core::primitive::u8),
            #[codec(index = 30)]
            Mortal30(::core::primitive::u8),
            #[codec(index = 31)]
            Mortal31(::core::primitive::u8),
            #[codec(index = 32)]
            Mortal32(::core::primitive::u8),
            #[codec(index = 33)]
            Mortal33(::core::primitive::u8),
            #[codec(index = 34)]
            Mortal34(::core::primitive::u8),
            #[codec(index = 35)]
            Mortal35(::core::primitive::u8),
            #[codec(index = 36)]
            Mortal36(::core::primitive::u8),
            #[codec(index = 37)]
            Mortal37(::core::primitive::u8),
            #[codec(index = 38)]
            Mortal38(::core::primitive::u8),
            #[codec(index = 39)]
            Mortal39(::core::primitive::u8),
            #[codec(index = 40)]
            Mortal40(::core::primitive::u8),
            #[codec(index = 41)]
            Mortal41(::core::primitive::u8),
            #[codec(index = 42)]
            Mortal42(::core::primitive::u8),
            #[codec(index = 43)]
            Mortal43(::core::primitive::u8),
            #[codec(index = 44)]
            Mortal44(::core::primitive::u8),
            #[codec(index = 45)]
            Mortal45(::core::primitive::u8),
            #[codec(index = 46)]
            Mortal46(::core::primitive::u8),
            #[codec(index = 47)]
            Mortal47(::core::primitive::u8),
            #[codec(index = 48)]
            Mortal48(::core::primitive::u8),
            #[codec(index = 49)]
            Mortal49(::core::primitive::u8),
            #[codec(index = 50)]
            Mortal50(::core::primitive::u8),
            #[codec(index = 51)]
            Mortal51(::core::primitive::u8),
            #[codec(index = 52)]
            Mortal52(::core::primitive::u8),
            #[codec(index = 53)]
            Mortal53(::core::primitive::u8),
            #[codec(index = 54)]
            Mortal54(::core::primitive::u8),
            #[codec(index = 55)]
            Mortal55(::core::primitive::u8),
            #[codec(index = 56)]
            Mortal56(::core::primitive::u8),
            #[codec(index = 57)]
            Mortal57(::core::primitive::u8),
            #[codec(index = 58)]
            Mortal58(::core::primitive::u8),
            #[codec(index = 59)]
            Mortal59(::core::primitive::u8),
            #[codec(index = 60)]
            Mortal60(::core::primitive::u8),
            #[codec(index = 61)]
            Mortal61(::core::primitive::u8),
            #[codec(index = 62)]
            Mortal62(::core::primitive::u8),
            #[codec(index = 63)]
            Mortal63(::core::primitive::u8),
            #[codec(index = 64)]
            Mortal64(::core::primitive::u8),
            #[codec(index = 65)]
            Mortal65(::core::primitive::u8),
            #[codec(index = 66)]
            Mortal66(::core::primitive::u8),
            #[codec(index = 67)]
            Mortal67(::core::primitive::u8),
            #[codec(index = 68)]
            Mortal68(::core::primitive::u8),
            #[codec(index = 69)]
            Mortal69(::core::primitive::u8),
            #[codec(index = 70)]
            Mortal70(::core::primitive::u8),
            #[codec(index = 71)]
            Mortal71(::core::primitive::u8),
            #[codec(index = 72)]
            Mortal72(::core::primitive::u8),
            #[codec(index = 73)]
            Mortal73(::core::primitive::u8),
            #[codec(index = 74)]
            Mortal74(::core::primitive::u8),
            #[codec(index = 75)]
            Mortal75(::core::primitive::u8),
            #[codec(index = 76)]
            Mortal76(::core::primitive::u8),
            #[codec(index = 77)]
            Mortal77(::core::primitive::u8),
            #[codec(index = 78)]
            Mortal78(::core::primitive::u8),
            #[codec(index = 79)]
            Mortal79(::core::primitive::u8),
            #[codec(index = 80)]
            Mortal80(::core::primitive::u8),
            #[codec(index = 81)]
            Mortal81(::core::primitive::u8),
            #[codec(index = 82)]
            Mortal82(::core::primitive::u8),
            #[codec(index = 83)]
            Mortal83(::core::primitive::u8),
            #[codec(index = 84)]
            Mortal84(::core::primitive::u8),
            #[codec(index = 85)]
            Mortal85(::core::primitive::u8),
            #[codec(index = 86)]
            Mortal86(::core::primitive::u8),
            #[codec(index = 87)]
            Mortal87(::core::primitive::u8),
            #[codec(index = 88)]
            Mortal88(::core::primitive::u8),
            #[codec(index = 89)]
            Mortal89(::core::primitive::u8),
            #[codec(index = 90)]
            Mortal90(::core::primitive::u8),
            #[codec(index = 91)]
            Mortal91(::core::primitive::u8),
            #[codec(index = 92)]
            Mortal92(::core::primitive::u8),
            #[codec(index = 93)]
            Mortal93(::core::primitive::u8),
            #[codec(index = 94)]
            Mortal94(::core::primitive::u8),
            #[codec(index = 95)]
            Mortal95(::core::primitive::u8),
            #[codec(index = 96)]
            Mortal96(::core::primitive::u8),
            #[codec(index = 97)]
            Mortal97(::core::primitive::u8),
            #[codec(index = 98)]
            Mortal98(::core::primitive::u8),
            #[codec(index = 99)]
            Mortal99(::core::primitive::u8),
            #[codec(index = 100)]
            Mortal100(::core::primitive::u8),
            #[codec(index = 101)]
            Mortal101(::core::primitive::u8),
            #[codec(index = 102)]
            Mortal102(::core::primitive::u8),
            #[codec(index = 103)]
            Mortal103(::core::primitive::u8),
            #[codec(index = 104)]
            Mortal104(::core::primitive::u8),
            #[codec(index = 105)]
            Mortal105(::core::primitive::u8),
            #[codec(index = 106)]
            Mortal106(::core::primitive::u8),
            #[codec(index = 107)]
            Mortal107(::core::primitive::u8),
            #[codec(index = 108)]
            Mortal108(::core::primitive::u8),
            #[codec(index = 109)]
            Mortal109(::core::primitive::u8),
            #[codec(index = 110)]
            Mortal110(::core::primitive::u8),
            #[codec(index = 111)]
            Mortal111(::core::primitive::u8),
            #[codec(index = 112)]
            Mortal112(::core::primitive::u8),
            #[codec(index = 113)]
            Mortal113(::core::primitive::u8),
            #[codec(index = 114)]
            Mortal114(::core::primitive::u8),
            #[codec(index = 115)]
            Mortal115(::core::primitive::u8),
            #[codec(index = 116)]
            Mortal116(::core::primitive::u8),
            #[codec(index = 117)]
            Mortal117(::core::primitive::u8),
            #[codec(index = 118)]
            Mortal118(::core::primitive::u8),
            #[codec(index = 119)]
            Mortal119(::core::primitive::u8),
            #[codec(index = 120)]
            Mortal120(::core::primitive::u8),
            #[codec(index = 121)]
            Mortal121(::core::primitive::u8),
            #[codec(index = 122)]
            Mortal122(::core::primitive::u8),
            #[codec(index = 123)]
            Mortal123(::core::primitive::u8),
            #[codec(index = 124)]
            Mortal124(::core::primitive::u8),
            #[codec(index = 125)]
            Mortal125(::core::primitive::u8),
            #[codec(index = 126)]
            Mortal126(::core::primitive::u8),
            #[codec(index = 127)]
            Mortal127(::core::primitive::u8),
            #[codec(index = 128)]
            Mortal128(::core::primitive::u8),
            #[codec(index = 129)]
            Mortal129(::core::primitive::u8),
            #[codec(index = 130)]
            Mortal130(::core::primitive::u8),
            #[codec(index = 131)]
            Mortal131(::core::primitive::u8),
            #[codec(index = 132)]
            Mortal132(::core::primitive::u8),
            #[codec(index = 133)]
            Mortal133(::core::primitive::u8),
            #[codec(index = 134)]
            Mortal134(::core::primitive::u8),
            #[codec(index = 135)]
            Mortal135(::core::primitive::u8),
            #[codec(index = 136)]
            Mortal136(::core::primitive::u8),
            #[codec(index = 137)]
            Mortal137(::core::primitive::u8),
            #[codec(index = 138)]
            Mortal138(::core::primitive::u8),
            #[codec(index = 139)]
            Mortal139(::core::primitive::u8),
            #[codec(index = 140)]
            Mortal140(::core::primitive::u8),
            #[codec(index = 141)]
            Mortal141(::core::primitive::u8),
            #[codec(index = 142)]
            Mortal142(::core::primitive::u8),
            #[codec(index = 143)]
            Mortal143(::core::primitive::u8),
            #[codec(index = 144)]
            Mortal144(::core::primitive::u8),
            #[codec(index = 145)]
            Mortal145(::core::primitive::u8),
            #[codec(index = 146)]
            Mortal146(::core::primitive::u8),
            #[codec(index = 147)]
            Mortal147(::core::primitive::u8),
            #[codec(index = 148)]
            Mortal148(::core::primitive::u8),
            #[codec(index = 149)]
            Mortal149(::core::primitive::u8),
            #[codec(index = 150)]
            Mortal150(::core::primitive::u8),
            #[codec(index = 151)]
            Mortal151(::core::primitive::u8),
            #[codec(index = 152)]
            Mortal152(::core::primitive::u8),
            #[codec(index = 153)]
            Mortal153(::core::primitive::u8),
            #[codec(index = 154)]
            Mortal154(::core::primitive::u8),
            #[codec(index = 155)]
            Mortal155(::core::primitive::u8),
            #[codec(index = 156)]
            Mortal156(::core::primitive::u8),
            #[codec(index = 157)]
            Mortal157(::core::primitive::u8),
            #[codec(index = 158)]
            Mortal158(::core::primitive::u8),
            #[codec(index = 159)]
            Mortal159(::core::primitive::u8),
            #[codec(index = 160)]
            Mortal160(::core::primitive::u8),
            #[codec(index = 161)]
            Mortal161(::core::primitive::u8),
            #[codec(index = 162)]
            Mortal162(::core::primitive::u8),
            #[codec(index = 163)]
            Mortal163(::core::primitive::u8),
            #[codec(index = 164)]
            Mortal164(::core::primitive::u8),
            #[codec(index = 165)]
            Mortal165(::core::primitive::u8),
            #[codec(index = 166)]
            Mortal166(::core::primitive::u8),
            #[codec(index = 167)]
            Mortal167(::core::primitive::u8),
            #[codec(index = 168)]
            Mortal168(::core::primitive::u8),
            #[codec(index = 169)]
            Mortal169(::core::primitive::u8),
            #[codec(index = 170)]
            Mortal170(::core::primitive::u8),
            #[codec(index = 171)]
            Mortal171(::core::primitive::u8),
            #[codec(index = 172)]
            Mortal172(::core::primitive::u8),
            #[codec(index = 173)]
            Mortal173(::core::primitive::u8),
            #[codec(index = 174)]
            Mortal174(::core::primitive::u8),
            #[codec(index = 175)]
            Mortal175(::core::primitive::u8),
            #[codec(index = 176)]
            Mortal176(::core::primitive::u8),
            #[codec(index = 177)]
            Mortal177(::core::primitive::u8),
            #[codec(index = 178)]
            Mortal178(::core::primitive::u8),
            #[codec(index = 179)]
            Mortal179(::core::primitive::u8),
            #[codec(index = 180)]
            Mortal180(::core::primitive::u8),
            #[codec(index = 181)]
            Mortal181(::core::primitive::u8),
            #[codec(index = 182)]
            Mortal182(::core::primitive::u8),
            #[codec(index = 183)]
            Mortal183(::core::primitive::u8),
            #[codec(index = 184)]
            Mortal184(::core::primitive::u8),
            #[codec(index = 185)]
            Mortal185(::core::primitive::u8),
            #[codec(index = 186)]
            Mortal186(::core::primitive::u8),
            #[codec(index = 187)]
            Mortal187(::core::primitive::u8),
            #[codec(index = 188)]
            Mortal188(::core::primitive::u8),
            #[codec(index = 189)]
            Mortal189(::core::primitive::u8),
            #[codec(index = 190)]
            Mortal190(::core::primitive::u8),
            #[codec(index = 191)]
            Mortal191(::core::primitive::u8),
            #[codec(index = 192)]
            Mortal192(::core::primitive::u8),
            #[codec(index = 193)]
            Mortal193(::core::primitive::u8),
            #[codec(index = 194)]
            Mortal194(::core::primitive::u8),
            #[codec(index = 195)]
            Mortal195(::core::primitive::u8),
            #[codec(index = 196)]
            Mortal196(::core::primitive::u8),
            #[codec(index = 197)]
            Mortal197(::core::primitive::u8),
            #[codec(index = 198)]
            Mortal198(::core::primitive::u8),
            #[codec(index = 199)]
            Mortal199(::core::primitive::u8),
            #[codec(index = 200)]
            Mortal200(::core::primitive::u8),
            #[codec(index = 201)]
            Mortal201(::core::primitive::u8),
            #[codec(index = 202)]
            Mortal202(::core::primitive::u8),
            #[codec(index = 203)]
            Mortal203(::core::primitive::u8),
            #[codec(index = 204)]
            Mortal204(::core::primitive::u8),
            #[codec(index = 205)]
            Mortal205(::core::primitive::u8),
            #[codec(index = 206)]
            Mortal206(::core::primitive::u8),
            #[codec(index = 207)]
            Mortal207(::core::primitive::u8),
            #[codec(index = 208)]
            Mortal208(::core::primitive::u8),
            #[codec(index = 209)]
            Mortal209(::core::primitive::u8),
            #[codec(index = 210)]
            Mortal210(::core::primitive::u8),
            #[codec(index = 211)]
            Mortal211(::core::primitive::u8),
            #[codec(index = 212)]
            Mortal212(::core::primitive::u8),
            #[codec(index = 213)]
            Mortal213(::core::primitive::u8),
            #[codec(index = 214)]
            Mortal214(::core::primitive::u8),
            #[codec(index = 215)]
            Mortal215(::core::primitive::u8),
            #[codec(index = 216)]
            Mortal216(::core::primitive::u8),
            #[codec(index = 217)]
            Mortal217(::core::primitive::u8),
            #[codec(index = 218)]
            Mortal218(::core::primitive::u8),
            #[codec(index = 219)]
            Mortal219(::core::primitive::u8),
            #[codec(index = 220)]
            Mortal220(::core::primitive::u8),
            #[codec(index = 221)]
            Mortal221(::core::primitive::u8),
            #[codec(index = 222)]
            Mortal222(::core::primitive::u8),
            #[codec(index = 223)]
            Mortal223(::core::primitive::u8),
            #[codec(index = 224)]
            Mortal224(::core::primitive::u8),
            #[codec(index = 225)]
            Mortal225(::core::primitive::u8),
            #[codec(index = 226)]
            Mortal226(::core::primitive::u8),
            #[codec(index = 227)]
            Mortal227(::core::primitive::u8),
            #[codec(index = 228)]
            Mortal228(::core::primitive::u8),
            #[codec(index = 229)]
            Mortal229(::core::primitive::u8),
            #[codec(index = 230)]
            Mortal230(::core::primitive::u8),
            #[codec(index = 231)]
            Mortal231(::core::primitive::u8),
            #[codec(index = 232)]
            Mortal232(::core::primitive::u8),
            #[codec(index = 233)]
            Mortal233(::core::primitive::u8),
            #[codec(index = 234)]
            Mortal234(::core::primitive::u8),
            #[codec(index = 235)]
            Mortal235(::core::primitive::u8),
            #[codec(index = 236)]
            Mortal236(::core::primitive::u8),
            #[codec(index = 237)]
            Mortal237(::core::primitive::u8),
            #[codec(index = 238)]
            Mortal238(::core::primitive::u8),
            #[codec(index = 239)]
            Mortal239(::core::primitive::u8),
            #[codec(index = 240)]
            Mortal240(::core::primitive::u8),
            #[codec(index = 241)]
            Mortal241(::core::primitive::u8),
            #[codec(index = 242)]
            Mortal242(::core::primitive::u8),
            #[codec(index = 243)]
            Mortal243(::core::primitive::u8),
            #[codec(index = 244)]
            Mortal244(::core::primitive::u8),
            #[codec(index = 245)]
            Mortal245(::core::primitive::u8),
            #[codec(index = 246)]
            Mortal246(::core::primitive::u8),
            #[codec(index = 247)]
            Mortal247(::core::primitive::u8),
            #[codec(index = 248)]
            Mortal248(::core::primitive::u8),
            #[codec(index = 249)]
            Mortal249(::core::primitive::u8),
            #[codec(index = 250)]
            Mortal250(::core::primitive::u8),
            #[codec(index = 251)]
            Mortal251(::core::primitive::u8),
            #[codec(index = 252)]
            Mortal252(::core::primitive::u8),
            #[codec(index = 253)]
            Mortal253(::core::primitive::u8),
            #[codec(index = 254)]
            Mortal254(::core::primitive::u8),
            #[codec(index = 255)]
            Mortal255(::core::primitive::u8),
          }
        }
        pub mod header {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct Header<_0, _1> {
            pub parent_hash: ::subxt::sp_core::H256,
            #[codec(compact)]
            pub number: _0,
            pub state_root: ::subxt::sp_core::H256,
            pub extrinsics_root: ::subxt::sp_core::H256,
            pub digest: runtime_types::sp_runtime::generic::digest::Digest,
            #[codec(skip)]
            pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
          }
        }
        pub mod unchecked_extrinsic {
          use super::runtime_types;
          #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
          pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
            pub ::std::vec::Vec<::core::primitive::u8>,
            #[codec(skip)] pub ::core::marker::PhantomData<(_0, _1, _2, _3)>,
          );
        }
      }
      pub mod multiaddress {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub enum MultiAddress<_0, _1> {
          #[codec(index = 0)]
          Id(_0),
          #[codec(index = 1)]
          Index(#[codec(compact)] _1),
          #[codec(index = 2)]
          Raw(::std::vec::Vec<::core::primitive::u8>),
          #[codec(index = 3)]
          Address32([::core::primitive::u8; 32usize]),
          #[codec(index = 4)]
          Address20([::core::primitive::u8; 20usize]),
        }
      }
      pub mod traits {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct BlakeTwo256;
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum ArithmeticError {
        #[codec(index = 0)]
        Underflow,
        #[codec(index = 1)]
        Overflow,
        #[codec(index = 2)]
        DivisionByZero,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum DispatchError {
        #[codec(index = 0)]
        Other,
        #[codec(index = 1)]
        CannotLookup,
        #[codec(index = 2)]
        BadOrigin,
        #[codec(index = 3)]
        Module(runtime_types::sp_runtime::ModuleError),
        #[codec(index = 4)]
        ConsumerRemaining,
        #[codec(index = 5)]
        NoProviders,
        #[codec(index = 6)]
        TooManyConsumers,
        #[codec(index = 7)]
        Token(runtime_types::sp_runtime::TokenError),
        #[codec(index = 8)]
        Arithmetic(runtime_types::sp_runtime::ArithmeticError),
        #[codec(index = 9)]
        Transactional(runtime_types::sp_runtime::TransactionalError),
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ModuleError {
        pub index: ::core::primitive::u8,
        pub error: [::core::primitive::u8; 4usize],
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum MultiSignature {
        #[codec(index = 0)]
        Ed25519(runtime_types::sp_core::ed25519::Signature),
        #[codec(index = 1)]
        Sr25519(runtime_types::sp_core::sr25519::Signature),
        #[codec(index = 2)]
        Ecdsa(runtime_types::sp_core::ecdsa::Signature),
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum TokenError {
        #[codec(index = 0)]
        NoFunds,
        #[codec(index = 1)]
        WouldDie,
        #[codec(index = 2)]
        BelowMinimum,
        #[codec(index = 3)]
        CannotCreate,
        #[codec(index = 4)]
        UnknownAsset,
        #[codec(index = 5)]
        Frozen,
        #[codec(index = 6)]
        Unsupported,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum TransactionalError {
        #[codec(index = 0)]
        LimitReached,
        #[codec(index = 1)]
        NoLayer,
      }
    }
    pub mod sp_session {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct MembershipProof {
        pub session: ::core::primitive::u32,
        pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
        pub validator_count: ::core::primitive::u32,
      }
    }
    pub mod sp_staking {
      use super::runtime_types;
      pub mod offence {
        use super::runtime_types;
        #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
        pub struct OffenceDetails<_0, _1> {
          pub offender: _1,
          pub reporters: ::std::vec::Vec<_0>,
        }
      }
    }
    pub mod sp_version {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct RuntimeVersion {
        pub spec_name: ::std::string::String,
        pub impl_name: ::std::string::String,
        pub authoring_version: ::core::primitive::u32,
        pub spec_version: ::core::primitive::u32,
        pub impl_version: ::core::primitive::u32,
        pub apis: ::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
        pub transaction_version: ::core::primitive::u32,
        pub state_version: ::core::primitive::u8,
      }
    }
    pub mod tidefi_primitives {
      use super::runtime_types;
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ActiveEraInfo<_0> {
        pub index: _0,
        pub start_block: ::core::option::Option<_0>,
        pub start_session_index: ::core::option::Option<::core::primitive::u64>,
        pub last_session_block: ::core::option::Option<_0>,
        pub start: ::core::option::Option<::core::primitive::u64>,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum ComplianceLevel {
        #[codec(index = 0)]
        Green,
        #[codec(index = 1)]
        Amber,
        #[codec(index = 2)]
        Red,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum CurrencyId {
        #[codec(index = 0)]
        Tdfy,
        #[codec(index = 1)]
        Wrapped(::core::primitive::u32),
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Fee {
        pub amount: ::core::primitive::u128,
        pub fee: ::core::primitive::u128,
        pub fee_usdt: ::core::primitive::u128,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Mint<_0, _1> {
        pub account_id: _0,
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub mint_amount: ::core::primitive::u128,
        pub transaction_id: _1,
        pub compliance_level: runtime_types::tidefi_primitives::ComplianceLevel,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct OracleImAlive {
        pub usdt_value: ::std::vec::Vec<(
          runtime_types::tidefi_primitives::CurrencyId,
          ::core::primitive::u128,
        )>,
        pub tdfy_value: ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u128)>,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum ProposalStatus {
        #[codec(index = 0)]
        Initiated,
        #[codec(index = 1)]
        Approved,
        #[codec(index = 2)]
        Rejected,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum ProposalType<_0, _1, _2, _3> {
        #[codec(index = 0)]
        Mint(runtime_types::tidefi_primitives::Mint<_0, _2>),
        #[codec(index = 1)]
        Withdrawal(runtime_types::tidefi_primitives::Withdrawal<_0, _1, _2>),
        #[codec(index = 2)]
        UpdateConfiguration(_3, ::core::primitive::u16),
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct ProposalVotes<_0, _1> {
        pub votes_for: _1,
        pub votes_against: _1,
        pub status: runtime_types::tidefi_primitives::ProposalStatus,
        pub expiry: _0,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Stake<_0, _1> {
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub unique_id: ::subxt::sp_core::H256,
        pub last_session_index_compound: ::core::primitive::u64,
        pub initial_block: _1,
        pub initial_balance: _0,
        pub principal: _0,
        pub duration: _1,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct StakeCurrencyMeta<_0> {
        pub minimum_amount: _0,
        pub maximum_amount: _0,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum StatusCode {
        #[codec(index = 0)]
        Running,
        #[codec(index = 1)]
        Maintenance,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SunriseSwapPool {
        pub id: ::core::primitive::u8,
        pub minimum_usdt_value: ::core::primitive::u128,
        pub transactions_remaining: ::core::primitive::u32,
        pub balance: ::core::primitive::u128,
        pub rebates: runtime_types::sp_arithmetic::fixed_point::FixedU128,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Swap<_0, _1> {
        pub extrinsic_hash: [::core::primitive::u8; 32usize],
        pub account_id: _0,
        pub is_market_maker: ::core::primitive::bool,
        pub token_from: runtime_types::tidefi_primitives::CurrencyId,
        pub amount_from: ::core::primitive::u128,
        pub amount_from_filled: ::core::primitive::u128,
        pub token_to: runtime_types::tidefi_primitives::CurrencyId,
        pub amount_to: ::core::primitive::u128,
        pub amount_to_filled: ::core::primitive::u128,
        pub status: runtime_types::tidefi_primitives::SwapStatus,
        pub swap_type: runtime_types::tidefi_primitives::SwapType,
        pub block_number: _1,
        pub slippage: runtime_types::sp_arithmetic::per_things::Permill,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct SwapConfirmation {
        pub request_id: ::subxt::sp_core::H256,
        pub amount_to_receive: ::core::primitive::u128,
        pub amount_to_send: ::core::primitive::u128,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum SwapStatus {
        #[codec(index = 0)]
        Pending,
        #[codec(index = 1)]
        Cancelled,
        #[codec(index = 2)]
        PartiallyFilled,
        #[codec(index = 3)]
        Completed,
        #[codec(index = 4)]
        Rejected,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum SwapType {
        #[codec(index = 0)]
        Market,
        #[codec(index = 1)]
        Limit,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct WatchList<_0, _1> {
        pub compliance_level: runtime_types::tidefi_primitives::ComplianceLevel,
        pub currency_id: runtime_types::tidefi_primitives::CurrencyId,
        pub amount: ::core::primitive::u128,
        pub transaction_id: _1,
        pub watch_action: runtime_types::tidefi_primitives::WatchListAction,
        pub block_number: _0,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub enum WatchListAction {
        #[codec(index = 0)]
        Mint,
      }
      #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Debug)]
      pub struct Withdrawal<_0, _1, _2> {
        pub account_id: _0,
        pub asset_id: runtime_types::tidefi_primitives::CurrencyId,
        pub amount: ::core::primitive::u128,
        pub external_address: _2,
        pub block_number: _1,
      }
    }
  }
  #[doc = r" The default error type returned when there is a runtime issue."]
  pub type DispatchError = runtime_types::sp_runtime::DispatchError;
  impl ::subxt::HasModuleError for runtime_types::sp_runtime::DispatchError {
    fn module_error_data(&self) -> Option<::subxt::ModuleErrorData> {
      if let Self::Module(module_error) = self {
        Some(::subxt::ModuleErrorData {
          pallet_index: module_error.index,
          error: module_error.error,
        })
      } else {
        None
      }
    }
  }
  pub struct RuntimeApi<T: ::subxt::Config, X> {
    pub client: ::subxt::Client<T>,
    marker: ::core::marker::PhantomData<X>,
  }
  impl<T: ::subxt::Config, X> Clone for RuntimeApi<T, X> {
    fn clone(&self) -> Self {
      Self {
        client: self.client.clone(),
        marker: ::core::marker::PhantomData,
      }
    }
  }
  impl<T, X> ::core::convert::From<::subxt::Client<T>> for RuntimeApi<T, X>
  where
    T: ::subxt::Config,
    X: ::subxt::extrinsic::ExtrinsicParams<T>,
  {
    fn from(client: ::subxt::Client<T>) -> Self {
      Self {
        client,
        marker: ::core::marker::PhantomData,
      }
    }
  }
  impl<'a, T, X> RuntimeApi<T, X>
  where
    T: ::subxt::Config,
    X: ::subxt::extrinsic::ExtrinsicParams<T>,
  {
    pub fn validate_metadata(&'a self) -> Result<(), ::subxt::MetadataError> {
      let runtime_metadata_hash = {
        let locked_metadata = self.client.metadata();
        let metadata = locked_metadata.read();
        metadata.metadata_hash(&PALLETS)
      };
      if runtime_metadata_hash
        != [
          87u8, 232u8, 110u8, 131u8, 107u8, 65u8, 80u8, 106u8, 37u8, 84u8, 228u8, 222u8, 14u8,
          82u8, 233u8, 114u8, 200u8, 144u8, 137u8, 12u8, 37u8, 52u8, 76u8, 215u8, 108u8, 208u8,
          48u8, 208u8, 18u8, 233u8, 149u8, 122u8,
        ]
      {
        Err(::subxt::MetadataError::IncompatibleMetadata)
      } else {
        Ok(())
      }
    }
    pub fn constants(&'a self) -> ConstantsApi<'a, T> {
      ConstantsApi {
        client: &self.client,
      }
    }
    pub fn storage(&'a self) -> StorageApi<'a, T> {
      StorageApi {
        client: &self.client,
      }
    }
    pub fn tx(&'a self) -> TransactionApi<'a, T, X> {
      TransactionApi {
        client: &self.client,
        marker: ::core::marker::PhantomData,
      }
    }
    pub fn events(&'a self) -> EventsApi<'a, T> {
      EventsApi {
        client: &self.client,
      }
    }
  }
  pub struct EventsApi<'a, T: ::subxt::Config> {
    client: &'a ::subxt::Client<T>,
  }
  impl<'a, T: ::subxt::Config> EventsApi<'a, T> {
    pub async fn at(
      &self,
      block_hash: T::Hash,
    ) -> Result<::subxt::events::Events<T, Event>, ::subxt::BasicError> {
      ::subxt::events::at::<T, Event>(self.client, block_hash).await
    }
    pub async fn subscribe(
      &self,
    ) -> Result<
      ::subxt::events::EventSubscription<'a, ::subxt::events::EventSub<T::Header>, T, Event>,
      ::subxt::BasicError,
    > {
      ::subxt::events::subscribe::<T, Event>(self.client).await
    }
    pub async fn subscribe_finalized(
      &self,
    ) -> Result<
      ::subxt::events::EventSubscription<
        'a,
        ::subxt::events::FinalizedEventSub<'a, T::Header>,
        T,
        Event,
      >,
      ::subxt::BasicError,
    > {
      ::subxt::events::subscribe_finalized::<T, Event>(self.client).await
    }
  }
  pub struct ConstantsApi<'a, T: ::subxt::Config> {
    client: &'a ::subxt::Client<T>,
  }
  impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
    pub fn system(&self) -> system::constants::ConstantsApi<'a, T> {
      system::constants::ConstantsApi::new(self.client)
    }
    pub fn babe(&self) -> babe::constants::ConstantsApi<'a, T> {
      babe::constants::ConstantsApi::new(self.client)
    }
    pub fn timestamp(&self) -> timestamp::constants::ConstantsApi<'a, T> {
      timestamp::constants::ConstantsApi::new(self.client)
    }
    pub fn indices(&self) -> indices::constants::ConstantsApi<'a, T> {
      indices::constants::ConstantsApi::new(self.client)
    }
    pub fn balances(&self) -> balances::constants::ConstantsApi<'a, T> {
      balances::constants::ConstantsApi::new(self.client)
    }
    pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi<'a, T> {
      transaction_payment::constants::ConstantsApi::new(self.client)
    }
    pub fn authorship(&self) -> authorship::constants::ConstantsApi<'a, T> {
      authorship::constants::ConstantsApi::new(self.client)
    }
    pub fn staking(&self) -> staking::constants::ConstantsApi<'a, T> {
      staking::constants::ConstantsApi::new(self.client)
    }
    pub fn grandpa(&self) -> grandpa::constants::ConstantsApi<'a, T> {
      grandpa::constants::ConstantsApi::new(self.client)
    }
    pub fn im_online(&self) -> im_online::constants::ConstantsApi<'a, T> {
      im_online::constants::ConstantsApi::new(self.client)
    }
    pub fn elections(&self) -> elections::constants::ConstantsApi<'a, T> {
      elections::constants::ConstantsApi::new(self.client)
    }
    pub fn treasury(&self) -> treasury::constants::ConstantsApi<'a, T> {
      treasury::constants::ConstantsApi::new(self.client)
    }
    pub fn utility(&self) -> utility::constants::ConstantsApi<'a, T> {
      utility::constants::ConstantsApi::new(self.client)
    }
    pub fn identity(&self) -> identity::constants::ConstantsApi<'a, T> {
      identity::constants::ConstantsApi::new(self.client)
    }
    pub fn election_provider_multi_phase(
      &self,
    ) -> election_provider_multi_phase::constants::ConstantsApi<'a, T> {
      election_provider_multi_phase::constants::ConstantsApi::new(self.client)
    }
    pub fn recovery(&self) -> recovery::constants::ConstantsApi<'a, T> {
      recovery::constants::ConstantsApi::new(self.client)
    }
    pub fn scheduler(&self) -> scheduler::constants::ConstantsApi<'a, T> {
      scheduler::constants::ConstantsApi::new(self.client)
    }
    pub fn proxy(&self) -> proxy::constants::ConstantsApi<'a, T> {
      proxy::constants::ConstantsApi::new(self.client)
    }
    pub fn multisig(&self) -> multisig::constants::ConstantsApi<'a, T> {
      multisig::constants::ConstantsApi::new(self.client)
    }
    pub fn bounties(&self) -> bounties::constants::ConstantsApi<'a, T> {
      bounties::constants::ConstantsApi::new(self.client)
    }
    pub fn assets(&self) -> assets::constants::ConstantsApi<'a, T> {
      assets::constants::ConstantsApi::new(self.client)
    }
    pub fn bags_list(&self) -> bags_list::constants::ConstantsApi<'a, T> {
      bags_list::constants::ConstantsApi::new(self.client)
    }
    pub fn tidefi_staking(&self) -> tidefi_staking::constants::ConstantsApi<'a, T> {
      tidefi_staking::constants::ConstantsApi::new(self.client)
    }
    pub fn quorum(&self) -> quorum::constants::ConstantsApi<'a, T> {
      quorum::constants::ConstantsApi::new(self.client)
    }
    pub fn oracle(&self) -> oracle::constants::ConstantsApi<'a, T> {
      oracle::constants::ConstantsApi::new(self.client)
    }
    pub fn fees(&self) -> fees::constants::ConstantsApi<'a, T> {
      fees::constants::ConstantsApi::new(self.client)
    }
    pub fn asset_registry(&self) -> asset_registry::constants::ConstantsApi<'a, T> {
      asset_registry::constants::ConstantsApi::new(self.client)
    }
  }
  pub struct StorageApi<'a, T: ::subxt::Config> {
    client: &'a ::subxt::Client<T>,
  }
  impl<'a, T> StorageApi<'a, T>
  where
    T: ::subxt::Config,
  {
    pub fn system(&self) -> system::storage::StorageApi<'a, T> {
      system::storage::StorageApi::new(self.client)
    }
    pub fn babe(&self) -> babe::storage::StorageApi<'a, T> {
      babe::storage::StorageApi::new(self.client)
    }
    pub fn timestamp(&self) -> timestamp::storage::StorageApi<'a, T> {
      timestamp::storage::StorageApi::new(self.client)
    }
    pub fn indices(&self) -> indices::storage::StorageApi<'a, T> {
      indices::storage::StorageApi::new(self.client)
    }
    pub fn balances(&self) -> balances::storage::StorageApi<'a, T> {
      balances::storage::StorageApi::new(self.client)
    }
    pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi<'a, T> {
      transaction_payment::storage::StorageApi::new(self.client)
    }
    pub fn authorship(&self) -> authorship::storage::StorageApi<'a, T> {
      authorship::storage::StorageApi::new(self.client)
    }
    pub fn staking(&self) -> staking::storage::StorageApi<'a, T> {
      staking::storage::StorageApi::new(self.client)
    }
    pub fn offences(&self) -> offences::storage::StorageApi<'a, T> {
      offences::storage::StorageApi::new(self.client)
    }
    pub fn session(&self) -> session::storage::StorageApi<'a, T> {
      session::storage::StorageApi::new(self.client)
    }
    pub fn grandpa(&self) -> grandpa::storage::StorageApi<'a, T> {
      grandpa::storage::StorageApi::new(self.client)
    }
    pub fn im_online(&self) -> im_online::storage::StorageApi<'a, T> {
      im_online::storage::StorageApi::new(self.client)
    }
    pub fn council(&self) -> council::storage::StorageApi<'a, T> {
      council::storage::StorageApi::new(self.client)
    }
    pub fn technical_committee(&self) -> technical_committee::storage::StorageApi<'a, T> {
      technical_committee::storage::StorageApi::new(self.client)
    }
    pub fn elections(&self) -> elections::storage::StorageApi<'a, T> {
      elections::storage::StorageApi::new(self.client)
    }
    pub fn technical_membership(&self) -> technical_membership::storage::StorageApi<'a, T> {
      technical_membership::storage::StorageApi::new(self.client)
    }
    pub fn treasury(&self) -> treasury::storage::StorageApi<'a, T> {
      treasury::storage::StorageApi::new(self.client)
    }
    pub fn identity(&self) -> identity::storage::StorageApi<'a, T> {
      identity::storage::StorageApi::new(self.client)
    }
    pub fn election_provider_multi_phase(
      &self,
    ) -> election_provider_multi_phase::storage::StorageApi<'a, T> {
      election_provider_multi_phase::storage::StorageApi::new(self.client)
    }
    pub fn recovery(&self) -> recovery::storage::StorageApi<'a, T> {
      recovery::storage::StorageApi::new(self.client)
    }
    pub fn scheduler(&self) -> scheduler::storage::StorageApi<'a, T> {
      scheduler::storage::StorageApi::new(self.client)
    }
    pub fn proxy(&self) -> proxy::storage::StorageApi<'a, T> {
      proxy::storage::StorageApi::new(self.client)
    }
    pub fn multisig(&self) -> multisig::storage::StorageApi<'a, T> {
      multisig::storage::StorageApi::new(self.client)
    }
    pub fn bounties(&self) -> bounties::storage::StorageApi<'a, T> {
      bounties::storage::StorageApi::new(self.client)
    }
    pub fn assets(&self) -> assets::storage::StorageApi<'a, T> {
      assets::storage::StorageApi::new(self.client)
    }
    pub fn bags_list(&self) -> bags_list::storage::StorageApi<'a, T> {
      bags_list::storage::StorageApi::new(self.client)
    }
    pub fn preimage(&self) -> preimage::storage::StorageApi<'a, T> {
      preimage::storage::StorageApi::new(self.client)
    }
    pub fn sudo(&self) -> sudo::storage::StorageApi<'a, T> {
      sudo::storage::StorageApi::new(self.client)
    }
    pub fn tidefi(&self) -> tidefi::storage::StorageApi<'a, T> {
      tidefi::storage::StorageApi::new(self.client)
    }
    pub fn tidefi_staking(&self) -> tidefi_staking::storage::StorageApi<'a, T> {
      tidefi_staking::storage::StorageApi::new(self.client)
    }
    pub fn quorum(&self) -> quorum::storage::StorageApi<'a, T> {
      quorum::storage::StorageApi::new(self.client)
    }
    pub fn oracle(&self) -> oracle::storage::StorageApi<'a, T> {
      oracle::storage::StorageApi::new(self.client)
    }
    pub fn security(&self) -> security::storage::StorageApi<'a, T> {
      security::storage::StorageApi::new(self.client)
    }
    pub fn fees(&self) -> fees::storage::StorageApi<'a, T> {
      fees::storage::StorageApi::new(self.client)
    }
    pub fn asset_registry(&self) -> asset_registry::storage::StorageApi<'a, T> {
      asset_registry::storage::StorageApi::new(self.client)
    }
  }
  pub struct TransactionApi<'a, T: ::subxt::Config, X> {
    client: &'a ::subxt::Client<T>,
    marker: ::core::marker::PhantomData<X>,
  }
  impl<'a, T, X> TransactionApi<'a, T, X>
  where
    T: ::subxt::Config,
    X: ::subxt::extrinsic::ExtrinsicParams<T>,
  {
    pub fn system(&self) -> system::calls::TransactionApi<'a, T, X> {
      system::calls::TransactionApi::new(self.client)
    }
    pub fn babe(&self) -> babe::calls::TransactionApi<'a, T, X> {
      babe::calls::TransactionApi::new(self.client)
    }
    pub fn timestamp(&self) -> timestamp::calls::TransactionApi<'a, T, X> {
      timestamp::calls::TransactionApi::new(self.client)
    }
    pub fn indices(&self) -> indices::calls::TransactionApi<'a, T, X> {
      indices::calls::TransactionApi::new(self.client)
    }
    pub fn balances(&self) -> balances::calls::TransactionApi<'a, T, X> {
      balances::calls::TransactionApi::new(self.client)
    }
    pub fn authorship(&self) -> authorship::calls::TransactionApi<'a, T, X> {
      authorship::calls::TransactionApi::new(self.client)
    }
    pub fn staking(&self) -> staking::calls::TransactionApi<'a, T, X> {
      staking::calls::TransactionApi::new(self.client)
    }
    pub fn session(&self) -> session::calls::TransactionApi<'a, T, X> {
      session::calls::TransactionApi::new(self.client)
    }
    pub fn grandpa(&self) -> grandpa::calls::TransactionApi<'a, T, X> {
      grandpa::calls::TransactionApi::new(self.client)
    }
    pub fn im_online(&self) -> im_online::calls::TransactionApi<'a, T, X> {
      im_online::calls::TransactionApi::new(self.client)
    }
    pub fn council(&self) -> council::calls::TransactionApi<'a, T, X> {
      council::calls::TransactionApi::new(self.client)
    }
    pub fn technical_committee(&self) -> technical_committee::calls::TransactionApi<'a, T, X> {
      technical_committee::calls::TransactionApi::new(self.client)
    }
    pub fn elections(&self) -> elections::calls::TransactionApi<'a, T, X> {
      elections::calls::TransactionApi::new(self.client)
    }
    pub fn technical_membership(&self) -> technical_membership::calls::TransactionApi<'a, T, X> {
      technical_membership::calls::TransactionApi::new(self.client)
    }
    pub fn treasury(&self) -> treasury::calls::TransactionApi<'a, T, X> {
      treasury::calls::TransactionApi::new(self.client)
    }
    pub fn utility(&self) -> utility::calls::TransactionApi<'a, T, X> {
      utility::calls::TransactionApi::new(self.client)
    }
    pub fn identity(&self) -> identity::calls::TransactionApi<'a, T, X> {
      identity::calls::TransactionApi::new(self.client)
    }
    pub fn election_provider_multi_phase(
      &self,
    ) -> election_provider_multi_phase::calls::TransactionApi<'a, T, X> {
      election_provider_multi_phase::calls::TransactionApi::new(self.client)
    }
    pub fn recovery(&self) -> recovery::calls::TransactionApi<'a, T, X> {
      recovery::calls::TransactionApi::new(self.client)
    }
    pub fn scheduler(&self) -> scheduler::calls::TransactionApi<'a, T, X> {
      scheduler::calls::TransactionApi::new(self.client)
    }
    pub fn proxy(&self) -> proxy::calls::TransactionApi<'a, T, X> {
      proxy::calls::TransactionApi::new(self.client)
    }
    pub fn multisig(&self) -> multisig::calls::TransactionApi<'a, T, X> {
      multisig::calls::TransactionApi::new(self.client)
    }
    pub fn bounties(&self) -> bounties::calls::TransactionApi<'a, T, X> {
      bounties::calls::TransactionApi::new(self.client)
    }
    pub fn assets(&self) -> assets::calls::TransactionApi<'a, T, X> {
      assets::calls::TransactionApi::new(self.client)
    }
    pub fn bags_list(&self) -> bags_list::calls::TransactionApi<'a, T, X> {
      bags_list::calls::TransactionApi::new(self.client)
    }
    pub fn preimage(&self) -> preimage::calls::TransactionApi<'a, T, X> {
      preimage::calls::TransactionApi::new(self.client)
    }
    pub fn sudo(&self) -> sudo::calls::TransactionApi<'a, T, X> {
      sudo::calls::TransactionApi::new(self.client)
    }
    pub fn tidefi(&self) -> tidefi::calls::TransactionApi<'a, T, X> {
      tidefi::calls::TransactionApi::new(self.client)
    }
    pub fn tidefi_staking(&self) -> tidefi_staking::calls::TransactionApi<'a, T, X> {
      tidefi_staking::calls::TransactionApi::new(self.client)
    }
    pub fn quorum(&self) -> quorum::calls::TransactionApi<'a, T, X> {
      quorum::calls::TransactionApi::new(self.client)
    }
    pub fn oracle(&self) -> oracle::calls::TransactionApi<'a, T, X> {
      oracle::calls::TransactionApi::new(self.client)
    }
    pub fn security(&self) -> security::calls::TransactionApi<'a, T, X> {
      security::calls::TransactionApi::new(self.client)
    }
    pub fn fees(&self) -> fees::calls::TransactionApi<'a, T, X> {
      fees::calls::TransactionApi::new(self.client)
    }
    pub fn asset_registry(&self) -> asset_registry::calls::TransactionApi<'a, T, X> {
      asset_registry::calls::TransactionApi::new(self.client)
    }
  }
}

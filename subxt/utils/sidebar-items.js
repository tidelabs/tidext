window.SIDEBAR_ITEMS = {"mod":[["account_id","The “default” Substrate/Polkadot AccountId. This is used in codegen, as well as signing related bits. This doesn’t contain much functionality itself, but is easy to convert to/from an `sp_core::AccountId32` for instance, to gain functionality without forcing a dependency on Substrate crates here."],["bits","Generic `scale_bits` over `bitvec`-like `BitOrder` and `BitFormat` types."],["multi_address","The “default” Substrate/Polkadot Address type. This is used in codegen, as well as signing related bits. This doesn’t contain much functionality itself, but is easy to convert to/from an `sp_runtime::MultiAddress` for instance, to gain functionality without forcing a dependency on Substrate crates here."],["multi_signature","The “default” Substrate/Polkadot Signature type. This is used in codegen, as well as signing related bits. This doesn’t contain much functionality itself, but is easy to convert to/from an `sp_runtime::MultiSignature` for instance, to gain functionality without forcing a dependency on Substrate crates here."]],"struct":[["Encoded","Wraps an already encoded byte vector, prevents being encoded as a raw byte vector as part of the transaction payload"],["WrapperKeepOpaque","A wrapper for any type `T` which implement encode/decode in a way compatible with `Vec<u8>`."]],"type":[["KeyedVec","This represents a key-value collection and is SCALE compatible with collections like BTreeMap. This has the same type params as `BTreeMap` which allows us to easily swap the two during codegen."]]};
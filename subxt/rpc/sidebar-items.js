initSidebarItems({"enum":[["NumberOrHex","A number type that can be serialized both as a number or a string that encodes a number in a string."],["SubstrateTxStatus","Possible transaction status events."]],"struct":[["BlockNumber","Wrapper for NumberOrHex to allow custom From impls"],["BlockStats","Statistics of a block returned by the `dev_getBlockStats` RPC."],["Health","Health struct returned by the RPC"],["RawValue","Reference to a range of bytes encompassing a single valid JSON value in the input data."],["ReadProof","ReadProof struct returned by the RPC"],["Rpc","Client for substrate rpc interfaces"],["RpcClient","A concrete wrapper around an [`RpcClientT`] which exposes the udnerlying interface via some higher level methods that make it a little easier to work with."],["RpcParams","This represents the parameters passed to an [`RpcClient`], and exists to enforce that parameters are provided in the correct format."],["RuntimeVersion","This contains the runtime version information necessary to make transactions, as obtained from the RPC call `state_getRuntimeVersion`,"],["Subscription","A generic RPC Subscription. This implements [`Stream`], and so most of the functionality you’ll need to interact with it comes from the [`StreamExt`] extension trait."],["TryFromIntError","An error type that signals an out-of-range conversion attempt."]],"trait":[["RpcClientT","Any RPC client which implements this can be used in our [`super::Rpc`] type to talk to a node."]],"type":[["ChainBlock","Alias for the type of a block returned by `chain_getBlock`"],["RpcFuture","A boxed future that is returned from the [`RpcClientT`] methods."],["RpcSubscription","The inner subscription stream returned from our [`RpcClientT`]’s `subscription` method."],["SystemProperties","Arbitrary properties defined in the chain spec as a JSON object."]]});
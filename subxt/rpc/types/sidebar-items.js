window.SIDEBAR_ITEMS = {"enum":[["ChainHeadEvent","The event generated by the body / call / storage methods."],["DryRunError","An error dry running an extrinsic."],["FollowEvent","The event generated by the `chainHead_follow` method."],["NumberOrHex","A number type that can be serialized both as a number or a string that encodes a number in a string."],["RuntimeEvent","The runtime event generated if the `follow` subscription has set the `runtime_updates` flag."],["SubstrateTxStatus","Possible transaction status events."],["TransactionEvent","Possible transaction status events."]],"struct":[["BestBlockChanged","Indicate the block hash of the new best block."],["BlockNumber","Wrapper for NumberOrHex to allow custom From impls"],["BlockStats","Statistics of a block returned by the `dev_getBlockStats` RPC."],["Bytes","Hex-serialized shim for `Vec<u8>`."],["ChainBlock","Block details in the [`ChainBlockResponse`]."],["ChainBlockExtrinsic","Bytes representing an extrinsic in a [`ChainBlock`]."],["ChainBlockResponse","The response from `chain_getBlock`"],["ChainHeadResult","The result of a chain head method."],["ErrorEvent","The operation could not be processed due to an error."],["Finalized","Indicate the finalized and pruned block hashes."],["Health","Health struct returned by the RPC"],["Initialized","Contain information about the latest finalized block."],["NewBlock","Indicate a new non-finalized block."],["ReadProof","ReadProof struct returned by the RPC"],["RuntimeVersion","This contains the runtime version information necessary to make transactions, as obtained from the RPC call `state_getRuntimeVersion`,"],["RuntimeVersionEvent","The runtime specification of the current block."],["StorageChangeSet","Storage change set"],["StorageData","Storage data."],["StorageKey","Storage key."],["Subscription","A generic RPC Subscription. This implements [`Stream`], and so most of the functionality you’ll need to interact with it comes from the [`StreamExt`] extension trait."],["TransactionBlock","The transaction was included in a block of the chain."],["TransactionBroadcasted","The transaction was broadcasted to a number of peers."],["TransactionDropped","The transaction was dropped because of exceeding limits."],["TransactionError","The transaction could not be processed due to an error."],["TryFromIntError","An error type that signals an out-of-range conversion attempt."]],"type":[["ConsensusEngineId","Consensus engine unique ID."],["DryRunResult","Signal what the result of doing a dry run of an extrinsic is."],["EncodedJustification","The encoded justification specific to a consensus engine."],["Justification","An abstraction over justification for a block’s validity under a consensus algorithm."],["SystemProperties","Arbitrary properties defined in the chain spec as a JSON object."]]};
initSidebarItems({"constant":[["DEFAULT_RANDOM_HINT_SIZE",""]],"enum":[["AeadCipher",""],["AesKeyWrapCipher","The available ciphers for AES key wrapping."],["KeyType",""],["MnemonicLanguage",""],["ProcedureError","Error on procedure execution."],["Sha2Hash",""],["Slip10DeriveInput",""],["StrongholdProcedure","Enum that wraps all cryptographic procedures that are supported by Stronghold."]],"struct":[["AeadDecrypt",""],["AeadEncrypt",""],["AesKeyWrapDecrypt","Decrypts a provided wrapped key using a decryption key, and writes the result into an output location."],["AesKeyWrapEncrypt","Encrypts a key in a vault using another key, and returns the ciphertext."],["BIP39Generate","Generate a BIP39 seed and its corresponding mnemonic sentence (optionally protected by a passphrase). Store the seed and return the mnemonic sentence as data output."],["BIP39Recover","Use a BIP39 mnemonic sentence (optionally protected by a passphrase) to create or recover a BIP39 seed and store it in the `output` location.  For Sr25519, will take the mnemonic and optional passphrase and attempt to recover the seed. If no mnemonic is set, it will generate a new seed from a bit of random entropy."],["Chain",""],["ConcatKdf","Executes the concat KDF as defined in Section 5.8.1 of NIST.800-56A."],["CopyRecord","Copy the content of a record from one location to another."],["Ed25519Sign","Use the specified Ed25519 compatible key to sign the given message"],["FatalProcedureError","Execution of the procedure failed."],["GarbageCollect","Garbage collects any revokes in a Vault based on the given `vault_path`."],["GenerateKey",""],["Hkdf",""],["Hmac",""],["Pbkdf2Hmac",""],["ProcedureOutput","Output of a [`StrongholdProcedure`][super::StrongholdProcedure]."],["PublicKey","Derive an public key from the corresponding private key stored at the specified location"],["RevokeData","Revoke the data from the specified [`Location`]. Revoked data is not readable and can be removed from a vault with the [`GarbageCollect`] Procedure. If the `should_gc` flag is set to `true`, it with automatically cleanup the revoke. Otherwise, the data is just marked as revoked."],["Secp256k1Sign","Signs a message with a Secp256k1 key.  Returns a slice of size `secp256k1::SIGNATURE_LENGTH + 1` where the final byte is the recovery id as a `u8`."],["Slip10Derive","Derive a SLIP10 child key from a seed or a parent key, store it in output location and return the corresponding chain code"],["Slip10Generate","Generate a raw SLIP10 seed of the specified size (in bytes, defaults to 64 bytes/512 bits) and store it in the `output` location"],["Sr25519Derive","Derive a Sr25519 Key from a given `KeyPair` location and a `Vec<DeriveJunction>` chain."],["Sr25519Sign","Signs a message with a Sr25519 key pair."],["Verify","Verifies the signature of a message with a Sr25519 key pair.  Returns `[0]` or `[1]` where `0` is false and `1` is true."],["WriteVault","Write data to the specified [`Location`]."],["X25519DiffieHellman",""]],"trait":[["DeriveSecret","Trait for procedures that use an existing secret to derive a new one."],["GenerateSecret","Trait for procedures that generate a new secret."],["Procedure","Procedure to create, use or remove secrets from a stronghold vault. The `primitives::procedure` macro may be used to auto-implement this trait for procedures that implement `GenerateSecret`, `DeriveSecret` or `UseSecret`."],["UseSecret","Trait for procedures that use an existing secret."]],"type":[["ChainCode",""]]});